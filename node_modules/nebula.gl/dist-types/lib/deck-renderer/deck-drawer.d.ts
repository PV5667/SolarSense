/// <reference types="deck.gl" />
import { PolygonLayer } from '@deck.gl/layers';
export declare const SELECTION_TYPE: {
    NONE: any;
    RECTANGLE: string;
    POLYGON: string;
};
export default class DeckDrawer {
    nebula: Record<string, any>;
    usePolygon: boolean;
    validPolygon: boolean;
    landPoints: [number, number][];
    mousePoints: [number, number][];
    constructor(nebula: Record<string, any>);
    _getLayerIds(): any;
    _selectFromPickingInfos(pickingInfos: Record<string, any>[]): void;
    _getBoundingBox(): Record<string, any>;
    _selectRectangleObjects(): void;
    _selectPolygonObjects(): void;
    _getMousePosFromEvent(event: Record<string, any>): [number, number];
    handleEvent(event: Record<string, any>, lngLat: [number, number], selectionType: number): {
        redraw: boolean;
        deactivate: boolean;
    };
    reset(): void;
    _makeStartPointHighlight(center: [number, number]): number[];
    render(): (PolygonLayer<unknown, {
        id: string;
        data: any[];
        fp64: boolean;
        opacity: number;
        pickable: false;
        lineWidthMinPixels: number;
        lineWidthMaxPixels: number;
        lineDashJustified: boolean;
        getLineDashArray: (x: any) => number[];
        getLineColor: (obj: unknown) => any;
        getFillColor: (obj: unknown) => any;
        getPolygon: (o: unknown) => any;
    }> | PolygonLayer<unknown, {
        id: string;
        data: any[];
        getLineColor: (obj: unknown) => any;
        getFillColor: (obj: unknown) => any;
        fp64: boolean;
        opacity: number;
        stroked: false;
        pickable: true;
        getPolygon: (o: unknown) => any;
    }>)[];
}
//# sourceMappingURL=deck-drawer.d.ts.map