{
  "version": 3,
  "sources": ["../../@nebula.gl/layers/src/style.ts", "../../@nebula.gl/layers/src/constants.ts", "../../@nebula.gl/layers/src/layers/editable-layer.ts", "../../@nebula.gl/layers/src/utils.ts", "../../@nebula.gl/layers/src/layers/editable-path-layer.ts", "../../@nebula.gl/layers/src/layers/editable-geojson-layer.ts", "../../@deck.gl/geo-layers/src/wms-layer/utils.ts", "../../@deck.gl/geo-layers/src/wms-layer/wms-layer.ts", "../../@deck.gl/geo-layers/src/great-circle-layer/great-circle-layer.ts", "../../@deck.gl/geo-layers/src/geo-cell-layer/GeoCellLayer.ts", "../../@deck.gl/geo-layers/src/s2-layer/s2-geometry.ts", "../../@deck.gl/geo-layers/src/s2-layer/s2-utils.ts", "../../@deck.gl/geo-layers/src/s2-layer/s2-layer.ts", "../../@deck.gl/geo-layers/src/quadkey-layer/quadkey-utils.ts", "../../@deck.gl/geo-layers/src/quadkey-layer/quadkey-layer.ts", "../../@deck.gl/geo-layers/src/tileset-2d/tile-2d-header.ts", "../../@deck.gl/geo-layers/src/tileset-2d/tile-2d-traversal.ts", "../../@deck.gl/geo-layers/src/tileset-2d/utils.ts", "../../@deck.gl/geo-layers/src/tileset-2d/memoize.ts", "../../@deck.gl/geo-layers/src/tileset-2d/tileset-2d.ts", "../../@deck.gl/geo-layers/src/tileset-2d/index.ts", "../../@deck.gl/geo-layers/src/tile-layer/tile-layer.ts", "../../@deck.gl/geo-layers/src/trips-layer/trips-layer.ts", "../../@deck.gl/geo-layers/src/h3-layers/h3-hexagon-layer.ts", "../../@deck.gl/geo-layers/src/h3-layers/h3-cluster-layer.ts", "../../@deck.gl/mesh-layers/src/utils/matrix.ts", "../../@deck.gl/mesh-layers/src/simple-mesh-layer/simple-mesh-layer-vertex.glsl.ts", "../../@deck.gl/mesh-layers/src/simple-mesh-layer/simple-mesh-layer-fragment.glsl.ts", "../../@deck.gl/mesh-layers/src/simple-mesh-layer/simple-mesh-layer.ts", "../../@deck.gl/mesh-layers/src/scenegraph-layer/gltf-utils.ts", "../../@deck.gl/mesh-layers/src/scenegraph-layer/scenegraph-layer-vertex.glsl.ts", "../../@deck.gl/mesh-layers/src/scenegraph-layer/scenegraph-layer-fragment.glsl.ts", "../../@deck.gl/mesh-layers/src/scenegraph-layer/scenegraph-layer.ts", "../../@deck.gl/mesh-layers/src/index.ts", "../../@deck.gl/geo-layers/src/mesh-layer/mesh-layer-vertex.glsl.ts", "../../@deck.gl/geo-layers/src/mesh-layer/mesh-layer-fragment.glsl.ts", "../../@deck.gl/geo-layers/src/mesh-layer/mesh-layer.ts", "../../@deck.gl/geo-layers/src/tile-3d-layer/tile-3d-layer.ts", "../../@deck.gl/geo-layers/src/terrain-layer/terrain-layer.ts", "../../@deck.gl/extensions/src/brushing/shader-module.ts", "../../@deck.gl/extensions/src/brushing/brushing-extension.ts", "../../@deck.gl/extensions/src/data-filter/shader-module.ts", "../../@deck.gl/extensions/src/data-filter/aggregator.ts", "../../@deck.gl/extensions/src/data-filter/data-filter-extension.ts", "../../@deck.gl/extensions/src/fp64/project64.glsl.ts", "../../@deck.gl/extensions/src/fp64/project64.ts", "../../@deck.gl/extensions/src/fp64/fp64-extension.ts", "../../@deck.gl/extensions/src/path-style/shaders.glsl.ts", "../../@deck.gl/extensions/src/path-style/path-style-extension.ts", "../../@deck.gl/extensions/src/fill-style/shaders.glsl.ts", "../../@deck.gl/extensions/src/fill-style/fill-style-extension.ts", "../../@deck.gl/extensions/src/clip/clip-extension.ts", "../../@deck.gl/extensions/src/collision-filter/shader-module.ts", "../../@deck.gl/extensions/src/collision-filter/collision-filter-pass.ts", "../../@deck.gl/extensions/src/mask/mask-pass.ts", "../../@deck.gl/extensions/src/utils/projection-utils.ts", "../../@deck.gl/extensions/src/mask/mask-effect.ts", "../../@deck.gl/extensions/src/collision-filter/collision-filter-effect.ts", "../../@deck.gl/extensions/src/collision-filter/collision-filter-extension.ts", "../../@deck.gl/extensions/src/mask/shader-module.ts", "../../@deck.gl/extensions/src/mask/mask-extension.ts", "../../@deck.gl/extensions/src/terrain/shader-module.ts", "../../@deck.gl/extensions/src/terrain/utils.ts", "../../@deck.gl/extensions/src/terrain/terrain-cover.ts", "../../@deck.gl/extensions/src/terrain/terrain-pass.ts", "../../@deck.gl/extensions/src/terrain/terrain-picking-pass.ts", "../../@deck.gl/extensions/src/terrain/height-map-builder.ts", "../../@deck.gl/extensions/src/terrain/terrain-effect.ts", "../../@deck.gl/extensions/src/terrain/terrain-extension.ts", "../../@deck.gl/extensions/src/index.ts", "../../@deck.gl/geo-layers/src/mvt-layer/coordinate-transform.ts", "../../@deck.gl/geo-layers/src/mvt-layer/find-index-binary.ts", "../../@deck.gl/geo-layers/src/mvt-layer/mvt-layer.ts", "../../@deck.gl/geo-layers/src/geohash-layer/geohash-utils.ts", "../../@deck.gl/geo-layers/src/geohash-layer/geohash-layer.ts", "../../@deck.gl/geo-layers/src/index.ts", "../../@nebula.gl/layers/src/layers/editable-h3-cluster-layer.ts", "../../@nebula.gl/layers/src/layers/selection-layer.ts", "../../@nebula.gl/layers/src/layers/elevated-edit-handle-layer.ts", "../../@luma.gl/constants/src/index.js", "../../@nebula.gl/layers/src/shaderlib/outline/outline.ts", "../../@nebula.gl/layers/src/layers/path-outline-layer/path-outline-layer.ts", "../../@nebula.gl/layers/src/layers/path-marker-layer/arrow-2d-geometry.ts", "../../math.gl/src/index.ts", "../../@nebula.gl/layers/src/layers/path-marker-layer/create-path-markers.ts", "../../@nebula.gl/layers/src/layers/path-marker-layer/polyline.ts", "../../@nebula.gl/layers/src/layers/path-marker-layer/path-marker-layer.ts", "../../@nebula.gl/layers/src/layers/junction-scatterplot-layer.ts", "../../@nebula.gl/layers/src/index.ts"],
  "sourcesContent": ["// Describes the arrow style of polylines\nexport const ArrowStyles = {\n  NONE: 0,\n  FORWARD: 1,\n  BACKWARD: 2,\n  BOTH: 3,\n};\n\nexport const DEFAULT_ARROWS = 1;\nexport const MAX_ARROWS = 3;\n", "/**\n * A multiplier for screen-space width/scale for Arc, Line, Icon and Text layers.\n * Required in order to maintain the same appearance after upgrading to deck.gl v8.5.\n * https://github.com/visgl/deck.gl/blob/master/docs/upgrade-guide.md\n */\nexport const PROJECTED_PIXEL_SIZE_MULTIPLIER = 2 / 3;\n\n/**\n * Unit literal to shader unit number conversion.\n */\nexport const UNIT = {\n  common: 0,\n  meters: 1,\n  pixels: 2,\n};\n", "/* eslint-env browser */\n\nimport { CompositeLayer } from '@deck.gl/core';\nimport { CompositeLayerProps } from '@deck.gl/core/lib/composite-layer';\nimport {\n  ClickEvent,\n  StartDraggingEvent,\n  StopDraggingEvent,\n  DraggingEvent,\n  PointerMoveEvent,\n  Position,\n} from '@nebula.gl/edit-modes';\n\nconst EVENT_TYPES = ['anyclick', 'pointermove', 'panstart', 'panmove', 'panend', 'keyup'];\n\nexport interface EditableLayerProps<D> extends CompositeLayerProps<D> {\n  pickingRadius?: number;\n  pickingDepth?: number;\n}\n\nexport default class EditableLayer<\n  D,\n  P extends EditableLayerProps<D> = EditableLayerProps<D>\n> extends CompositeLayer<D, P> {\n  static layerName = 'EditableLayer';\n\n  // Overridable interaction event handlers\n  onLayerClick(event: ClickEvent) {\n    // default implementation - do nothing\n  }\n\n  onStartDragging(event: StartDraggingEvent) {\n    // default implementation - do nothing\n  }\n\n  onStopDragging(event: StopDraggingEvent) {\n    // default implementation - do nothing\n  }\n\n  onDragging(event: DraggingEvent) {\n    // default implementation - do nothing\n  }\n\n  onPointerMove(event: PointerMoveEvent) {\n    // default implementation - do nothing\n  }\n\n  onLayerKeyUp(event: KeyboardEvent): void {\n    // default implementation - do nothing;\n  }\n  // TODO: implement onCancelDragging (e.g. drag off screen)\n\n  initializeState() {\n    this.setState({\n      _editableLayerState: {\n        // Picked objects at the time the pointer went down\n        pointerDownPicks: null,\n        // Screen coordinates where the pointer went down\n        pointerDownScreenCoords: null,\n        // Ground coordinates where the pointer went down\n        pointerDownMapCoords: null,\n\n        // Keep track of the mjolnir.js event handler so it can be deregistered\n        eventHandler: this._forwardEventToCurrentLayer.bind(this),\n      },\n    });\n\n    this._addEventHandlers();\n  }\n\n  finalizeState() {\n    this._removeEventHandlers();\n  }\n\n  _addEventHandlers() {\n    // @ts-ignore\n    const { eventManager } = this.context.deck;\n    const { eventHandler } = this.state._editableLayerState;\n\n    for (const eventType of EVENT_TYPES) {\n      eventManager.on(eventType, eventHandler, {\n        // give nebula a higher priority so that it can stop propagation to deck.gl's map panning handlers\n        priority: 100,\n      });\n    }\n  }\n\n  _removeEventHandlers() {\n    // @ts-ignore\n    const { eventManager } = this.context.deck;\n    const { eventHandler } = this.state._editableLayerState;\n\n    for (const eventType of EVENT_TYPES) {\n      eventManager.off(eventType, eventHandler);\n    }\n  }\n\n  // A new layer instance is created on every render, so forward the event to the current layer\n  // This means that the first layer instance will stick around to be the event listener, but will forward the event\n  // to the latest layer instance.\n  _forwardEventToCurrentLayer(event: any) {\n    const currentLayer = this.getCurrentLayer();\n\n    // Use a naming convention to find the event handling function for this event type\n    const func = currentLayer[`_on${event.type}`].bind(currentLayer);\n    if (!func) {\n      console.warn(`no handler for mjolnir.js event ${event.type}`); // eslint-disable-line\n      return;\n    }\n    func(event);\n  }\n\n  _onanyclick({ srcEvent }: any) {\n    const screenCoords = this.getScreenCoords(srcEvent);\n    const mapCoords = this.getMapCoords(screenCoords);\n    // @ts-ignore\n    const picks = this.getPicks(screenCoords);\n\n    this.onLayerClick({\n      mapCoords,\n      // @ts-ignore\n      screenCoords,\n      picks,\n      sourceEvent: srcEvent,\n    });\n  }\n\n  _onkeyup({ srcEvent }: { srcEvent: KeyboardEvent }) {\n    this.onLayerKeyUp(srcEvent);\n  }\n\n  _onpanstart(event: any) {\n    const screenCoords = this.getScreenCoords(event.srcEvent);\n    const mapCoords = this.getMapCoords(screenCoords);\n    // @ts-ignore\n    const picks = this.getPicks(screenCoords);\n\n    this.setState({\n      _editableLayerState: {\n        ...this.state._editableLayerState,\n        pointerDownScreenCoords: screenCoords,\n        pointerDownMapCoords: mapCoords,\n        pointerDownPicks: picks,\n      },\n    });\n\n    this.onStartDragging({\n      picks,\n      // @ts-ignore\n      screenCoords,\n      // @ts-ignore\n      mapCoords,\n      // @ts-ignore\n      pointerDownScreenCoords: screenCoords,\n      pointerDownMapCoords: mapCoords,\n      cancelPan: event.stopImmediatePropagation,\n      sourceEvent: event.srcEvent,\n    });\n  }\n\n  _onpanmove(event: any) {\n    const { srcEvent } = event;\n    const screenCoords = this.getScreenCoords(srcEvent);\n    const mapCoords = this.getMapCoords(screenCoords);\n\n    const {\n      pointerDownPicks,\n      pointerDownScreenCoords,\n      pointerDownMapCoords,\n    } = this.state._editableLayerState;\n    // @ts-ignore\n    const picks = this.getPicks(screenCoords);\n\n    this.onDragging({\n      // @ts-ignore\n      screenCoords,\n      mapCoords,\n      picks,\n      pointerDownPicks,\n      pointerDownScreenCoords,\n      pointerDownMapCoords,\n      sourceEvent: srcEvent,\n      cancelPan: event.stopImmediatePropagation,\n      // another (hacky) approach for cancelling map panning\n      // const controller = this.context.deck.viewManager.controllers[\n      //   Object.keys(this.context.deck.viewManager.controllers)[0]\n      // ];\n      // controller._state.isDragging = false;\n    });\n  }\n\n  _onpanend({ srcEvent }: any) {\n    const screenCoords = this.getScreenCoords(srcEvent);\n    const mapCoords = this.getMapCoords(screenCoords);\n\n    const {\n      pointerDownPicks,\n      pointerDownScreenCoords,\n      pointerDownMapCoords,\n    } = this.state._editableLayerState;\n    // @ts-ignore\n    const picks = this.getPicks(screenCoords);\n\n    this.onStopDragging({\n      picks,\n      // @ts-ignore\n      screenCoords,\n      mapCoords,\n      pointerDownPicks,\n      pointerDownScreenCoords,\n      pointerDownMapCoords,\n      sourceEvent: srcEvent,\n    });\n\n    this.setState({\n      _editableLayerState: {\n        ...this.state._editableLayerState,\n        pointerDownScreenCoords: null,\n        pointerDownMapCoords: null,\n        pointerDownPicks: null,\n      },\n    });\n  }\n\n  _onpointermove(event: any) {\n    const { srcEvent } = event;\n    const screenCoords = this.getScreenCoords(srcEvent);\n    const mapCoords = this.getMapCoords(screenCoords);\n\n    const {\n      pointerDownPicks,\n      pointerDownScreenCoords,\n      pointerDownMapCoords,\n    } = this.state._editableLayerState;\n    // @ts-ignore\n    const picks = this.getPicks(screenCoords);\n\n    this.onPointerMove({\n      // @ts-ignore\n      screenCoords,\n      mapCoords,\n      picks,\n      pointerDownPicks,\n      pointerDownScreenCoords,\n      pointerDownMapCoords,\n      sourceEvent: srcEvent,\n    });\n  }\n\n  getPicks(screenCoords: [number, number]) {\n    // @ts-ignore\n    return this.context.deck.pickMultipleObjects({\n      x: screenCoords[0],\n      y: screenCoords[1],\n      layerIds: [this.props.id],\n      radius: this.props.pickingRadius,\n      depth: this.props.pickingDepth,\n    });\n  }\n\n  getScreenCoords(pointerEvent: any): Position {\n    return [\n      pointerEvent.clientX -\n        (this.context.gl.canvas as HTMLCanvasElement).getBoundingClientRect().left,\n      pointerEvent.clientY -\n        (this.context.gl.canvas as HTMLCanvasElement).getBoundingClientRect().top,\n    ];\n  }\n\n  getMapCoords(screenCoords: Position): Position {\n    // @ts-ignore\n    return this.context.viewport.unproject([screenCoords[0], screenCoords[1]]);\n  }\n}\n", "import destination from '@turf/destination';\nimport bearing from '@turf/bearing';\nimport pointToLineDistance from '@turf/point-to-line-distance';\nimport { point } from '@turf/helpers';\nimport {\n  Position,\n  Point,\n  LineString,\n  FeatureOf,\n  FeatureWithProps,\n  Viewport,\n} from '@nebula.gl/edit-modes';\nimport WebMercatorViewport from 'viewport-mercator-project';\n\n// TODO edit-modes: delete and use edit-modes/utils instead\n\nexport type NearestPointType = FeatureWithProps<Point, { dist: number; index: number }>;\n\nexport function toDeckColor(\n  color?: [number, number, number, number] | number,\n  defaultColor: [number, number, number, number] = [255, 0, 0, 255]\n): [number, number, number, number] {\n  if (!Array.isArray(color)) {\n    return defaultColor;\n  }\n  return [color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255];\n}\n\n//\n// a GeoJSON helper function that calls the provided function with\n// an argument that is the most deeply-nested array having elements\n// that are arrays of primitives as an argument, e.g.\n//\n// {\n//   \"type\": \"MultiPolygon\",\n//   \"coordinates\": [\n//       [\n//           [[30, 20], [45, 40], [10, 40], [30, 20]]\n//       ],\n//       [\n//           [[15, 5], [40, 10], [10, 20], [5, 10], [15, 5]]\n//       ]\n//   ]\n// }\n//\n// the function would be called on:\n//\n// [[30, 20], [45, 40], [10, 40], [30, 20]]\n//\n// and\n//\n// [[15, 5], [40, 10], [10, 20], [5, 10], [15, 5]]\n//\nexport function recursivelyTraverseNestedArrays(\n  array: Array<any>,\n  prefix: Array<number>,\n  fn: Function\n) {\n  if (!Array.isArray(array[0])) {\n    return true;\n  }\n  for (let i = 0; i < array.length; i++) {\n    if (recursivelyTraverseNestedArrays(array[i], [...prefix, i], fn)) {\n      fn(array, prefix);\n      break;\n    }\n  }\n  return false;\n}\n\nexport function generatePointsParallelToLinePoints(\n  p1: Position,\n  p2: Position,\n  groundCoords: Position\n): Position[] {\n  const lineString: LineString = {\n    type: 'LineString',\n    coordinates: [p1, p2],\n  };\n  const pt = point(groundCoords);\n  const ddistance = pointToLineDistance(pt, lineString);\n  const lineBearing = bearing(p1, p2);\n\n  // Check if current point is to the left or right of line\n  // Line from A=(x1,y1) to B=(x2,y2) a point P=(x,y)\n  // then (x−x1)(y2−y1)−(y−y1)(x2−x1)\n  const isPointToLeftOfLine =\n    (groundCoords[0] - p1[0]) * (p2[1] - p1[1]) - (groundCoords[1] - p1[1]) * (p2[0] - p1[0]);\n\n  // Bearing to draw perpendicular to the line string\n  const orthogonalBearing = isPointToLeftOfLine < 0 ? lineBearing - 90 : lineBearing - 270;\n\n  // Get coordinates for the point p3 and p4 which are perpendicular to the lineString\n  // Add the distance as the current position moves away from the lineString\n  const p3 = destination(p2, ddistance, orthogonalBearing);\n  const p4 = destination(p1, ddistance, orthogonalBearing);\n  //@ts-ignore\n  return [p3.geometry.coordinates, p4.geometry.coordinates];\n}\n\nexport function distance2d(x1: number, y1: number, x2: number, y2: number): number {\n  const dx = x1 - x2;\n  const dy = y1 - y2;\n  return Math.sqrt(dx * dx + dy * dy);\n}\n\nexport function mix(a: number, b: number, ratio: number): number {\n  return b * ratio + a * (1 - ratio);\n}\n\nexport function nearestPointOnProjectedLine(\n  line: FeatureOf<LineString>,\n  inPoint: FeatureOf<Point>,\n  viewport: Viewport\n): NearestPointType {\n  const wmViewport = new WebMercatorViewport(viewport);\n  // Project the line to viewport, then find the nearest point\n  const coordinates: Array<Array<number>> = line.geometry.coordinates as any;\n  const projectedCoords = coordinates.map(([x, y, z = 0]) => wmViewport.project([x, y, z]));\n  //@ts-ignore\n  const [x, y] = wmViewport.project(inPoint.geometry.coordinates);\n  // console.log('projectedCoords', JSON.stringify(projectedCoords));\n\n  let minDistance = Infinity;\n  let minPointInfo = {};\n\n  projectedCoords.forEach(([x2, y2], index) => {\n    if (index === 0) {\n      return;\n    }\n\n    const [x1, y1] = projectedCoords[index - 1];\n\n    // line from projectedCoords[index - 1] to projectedCoords[index]\n    // convert to Ax + By + C = 0\n    const A = y1 - y2;\n    const B = x2 - x1;\n    const C = x1 * y2 - x2 * y1;\n\n    // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line\n    const div = A * A + B * B;\n    const distance = Math.abs(A * x + B * y + C) / Math.sqrt(div);\n\n    // TODO: Check if inside bounds\n\n    if (distance < minDistance) {\n      minDistance = distance;\n      minPointInfo = {\n        index,\n        x0: (B * (B * x - A * y) - A * C) / div,\n        y0: (A * (-B * x + A * y) - B * C) / div,\n      };\n    }\n  });\n  //@ts-ignore\n  const { index, x0, y0 } = minPointInfo;\n  const [x1, y1, z1 = 0] = projectedCoords[index - 1];\n  const [x2, y2, z2 = 0] = projectedCoords[index];\n\n  // calculate what ratio of the line we are on to find the proper z\n  const lineLength = distance2d(x1, y1, x2, y2);\n  const startToPointLength = distance2d(x1, y1, x0, y0);\n  const ratio = startToPointLength / lineLength;\n  const z0 = mix(z1, z2, ratio);\n\n  return {\n    type: 'Feature',\n    geometry: {\n      type: 'Point',\n      coordinates: wmViewport.unproject([x0, y0, z0]),\n    },\n    properties: {\n      // TODO: calculate the distance in proper units\n      dist: minDistance,\n      index: index - 1,\n    },\n  };\n}\n\n/**\n * Inserts toInsert string into base string before insertBefore string.\n * @param base A string to insert into.\n * @param insertBefore A sub string in `base` string to insert before.\n * @param toInsert A string to insert.\n * @returns Combined string. `base` string if `insertBefore` string isn't found.\n */\nexport function insertBefore(base: string, insertBefore: string, toInsert: string): string {\n  const at = base.indexOf(insertBefore);\n  if (at < 0) {\n    return base;\n  }\n  return base.slice(0, at) + toInsert + base.slice(at);\n}\n", "import { PathLayer, PathLayerProps } from '@deck.gl/layers';\n\nimport { insertBefore } from '../utils';\n\ninterface EditablePathLayerProps extends PathLayerProps<any> {\n  pickingLineWidthExtraPixels?: number;\n}\n\nconst defaultProps = {\n  ...PathLayer.defaultProps,\n  pickingLineWidthExtraPixels: { type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER },\n};\n\nexport default class EditablePathLayer extends PathLayer<any, EditablePathLayerProps> {\n  getShaders() {\n    const shaders = super.getShaders();\n\n    shaders.vs = insertBefore(\n      shaders.vs,\n      'vec3 width;',\n      `\n       if(picking_uActive){\n        widthPixels.xy += pickingLineWidthExtraPixels;\n       }\n      `\n    );\n\n    return {\n      ...shaders,\n      inject: {\n        ...(shaders.inject || {}),\n        'vs:#decl': (shaders.inject?.['vs:#decl'] || '').concat(\n          `uniform float pickingLineWidthExtraPixels;`\n        ),\n      },\n    };\n  }\n\n  draw(props) {\n    super.draw({\n      ...props,\n      uniforms: {\n        ...props.uniforms,\n        pickingLineWidthExtraPixels: this.props.pickingLineWidthExtraPixels,\n      },\n    });\n  }\n}\n\nEditablePathLayer.defaultProps = defaultProps;\nEditablePathLayer.layerName = 'EditablePathLayer';\n", "/* eslint-env browser */\n\nimport { RGBAColor } from '@deck.gl/core';\nimport { GeoJsonLayer, ScatterplotLayer, IconLayer, TextLayer } from '@deck.gl/layers';\n\nimport {\n  ViewMode,\n  ModifyMode,\n  TranslateMode,\n  ScaleMode,\n  RotateMode,\n  DuplicateMode,\n  SplitPolygonMode,\n  ExtrudeMode,\n  ElevationMode,\n  DrawPointMode,\n  DrawLineStringMode,\n  DrawPolygonMode,\n  DrawRectangleMode,\n  DrawSquareMode,\n  DrawRectangleFromCenterMode,\n  DrawSquareFromCenterMode,\n  DrawCircleFromCenterMode,\n  DrawCircleByDiameterMode,\n  DrawEllipseByBoundingBoxMode,\n  DrawRectangleUsingThreePointsMode,\n  DrawEllipseUsingThreePointsMode,\n  Draw90DegreePolygonMode,\n  DrawPolygonByDraggingMode,\n  SnappableMode,\n  TransformMode,\n  EditAction,\n  ClickEvent,\n  StartDraggingEvent,\n  StopDraggingEvent,\n  DraggingEvent,\n  PointerMoveEvent,\n  GeoJsonEditModeType,\n  FeatureCollection,\n} from '@nebula.gl/edit-modes';\n\nimport { PROJECTED_PIXEL_SIZE_MULTIPLIER } from '../constants';\n\nimport EditableLayer, { EditableLayerProps } from './editable-layer';\nimport EditablePathLayer from './editable-path-layer';\n\nconst DEFAULT_LINE_COLOR: RGBAColor = [0x0, 0x0, 0x0, 0x99];\nconst DEFAULT_FILL_COLOR: RGBAColor = [0x0, 0x0, 0x0, 0x90];\nconst DEFAULT_SELECTED_LINE_COLOR: RGBAColor = [0x0, 0x0, 0x0, 0xff];\nconst DEFAULT_SELECTED_FILL_COLOR: RGBAColor = [0x0, 0x0, 0x90, 0x90];\nconst DEFAULT_TENTATIVE_LINE_COLOR: RGBAColor = [0x90, 0x90, 0x90, 0xff];\nconst DEFAULT_TENTATIVE_FILL_COLOR: RGBAColor = [0x90, 0x90, 0x90, 0x90];\nconst DEFAULT_EDITING_EXISTING_POINT_COLOR: RGBAColor = [0xc0, 0x0, 0x0, 0xff];\nconst DEFAULT_EDITING_INTERMEDIATE_POINT_COLOR: RGBAColor = [0x0, 0x0, 0x0, 0x80];\nconst DEFAULT_EDITING_SNAP_POINT_COLOR: RGBAColor = [0x7c, 0x00, 0xc0, 0xff];\nconst DEFAULT_EDITING_POINT_OUTLINE_COLOR: RGBAColor = [0xff, 0xff, 0xff, 0xff];\nconst DEFAULT_EDITING_EXISTING_POINT_RADIUS = 5;\nconst DEFAULT_EDITING_INTERMEDIATE_POINT_RADIUS = 3;\nconst DEFAULT_EDITING_SNAP_POINT_RADIUS = 7;\nconst DEFAULT_TOOLTIP_FONT_SIZE = 32 * PROJECTED_PIXEL_SIZE_MULTIPLIER;\n\nconst DEFAULT_EDIT_MODE = DrawPolygonMode;\n\nfunction guideAccessor(accessor) {\n  if (!accessor || typeof accessor !== 'function') {\n    return accessor;\n  }\n  return (guideMaybeWrapped) => accessor(unwrapGuide(guideMaybeWrapped));\n}\n\n// The object handed to us from deck.gl is different depending on the version of deck.gl used, unwrap as necessary\nfunction unwrapGuide(guideMaybeWrapped) {\n  if (guideMaybeWrapped.__source) {\n    return guideMaybeWrapped.__source.object;\n  } else if (guideMaybeWrapped.sourceFeature) {\n    return guideMaybeWrapped.sourceFeature.feature;\n  }\n  // It is not wrapped, return as is\n  return guideMaybeWrapped;\n}\n\nfunction getEditHandleColor(handle) {\n  switch (handle.properties.editHandleType) {\n    case 'existing':\n      return DEFAULT_EDITING_EXISTING_POINT_COLOR;\n    case 'snap-source':\n      return DEFAULT_EDITING_SNAP_POINT_COLOR;\n    case 'intermediate':\n    default:\n      return DEFAULT_EDITING_INTERMEDIATE_POINT_COLOR;\n  }\n}\n\nfunction getEditHandleOutlineColor(handle) {\n  return DEFAULT_EDITING_POINT_OUTLINE_COLOR;\n}\n\nfunction getEditHandleRadius(handle) {\n  switch (handle.properties.editHandleType) {\n    case 'existing':\n      return DEFAULT_EDITING_EXISTING_POINT_RADIUS;\n    case 'snap':\n      return DEFAULT_EDITING_SNAP_POINT_RADIUS;\n    case 'intermediate':\n    default:\n      return DEFAULT_EDITING_INTERMEDIATE_POINT_RADIUS;\n  }\n}\n\nexport interface EditableGeojsonLayerProps<D> extends EditableLayerProps<D> {\n  mode?: any;\n  modeConfig?: any;\n  selectedFeatureIndexes?: number[];\n  onEdit?: (updatedData?, editType?: string, featureIndexes?: number[], editContext?) => void;\n\n  pickable?: boolean;\n  pickingRadius?: number;\n  pickingDepth?: number;\n  fp64?: boolean;\n  filled?: boolean;\n  stroked?: boolean;\n  lineWidthScale?: number;\n  lineWidthMinPixels?: number;\n  lineWidthMaxPixels?: number;\n  pickingLineWidthExtraPixels?: number;\n  lineWidthUnits?: string;\n  lineJointRounded?: boolean;\n  lineCapRounded?: boolean;\n  lineMiterLimit?: number;\n  pointRadiusScale?: number;\n  pointRadiusMinPixels?: number;\n  pointRadiusMaxPixels?: number;\n\n  getLineColor?: RGBAColor | ((feature, isSelected, mode) => RGBAColor);\n  getFillColor?: RGBAColor | ((feature, isSelected, mode) => RGBAColor);\n  getRadius?: number | ((f) => number);\n  getLineWidth?: number | ((f) => number);\n\n  getTentativeLineColor?: RGBAColor | ((feature, isSelected, mode) => RGBAColor);\n  getTentativeFillColor?: RGBAColor | ((feature, isSelected, mode) => RGBAColor);\n  getTentativeLineWidth?: number | ((f) => number);\n\n  editHandleType?: string;\n\n  editHandlePointRadiusScale?: number;\n  editHandlePointOutline?: boolean;\n  editHandlePointStrokeWidth?: number;\n  editHandlePointRadiusUnits?: string;\n  editHandlePointRadiusMinPixels?: number;\n  editHandlePointRadiusMaxPixels?: number;\n  getEditHandlePointColor?: RGBAColor | ((handle) => RGBAColor);\n  getEditHandlePointOutlineColor?: RGBAColor | ((handle) => RGBAColor);\n  getEditHandlePointRadius?: number | ((handle) => number);\n\n  // icon handles\n  editHandleIconAtlas?: any;\n  editHandleIconMapping?: any;\n  editHandleIconSizeScale?: number;\n  editHandleIconSizeUnits?: string;\n  getEditHandleIcon?: (handle) => string;\n  getEditHandleIconSize?: number;\n  getEditHandleIconColor?: RGBAColor | ((handle) => RGBAColor);\n  getEditHandleIconAngle?: number | ((handle) => number);\n\n  // misc\n  billboard?: boolean;\n}\n\nconst defaultProps: EditableGeojsonLayerProps<any> = {\n  mode: DEFAULT_EDIT_MODE,\n\n  // Edit and interaction events\n  onEdit: () => {},\n\n  pickable: true,\n  pickingRadius: 10,\n  pickingDepth: 5,\n  fp64: false,\n  filled: true,\n  stroked: true,\n  lineWidthScale: PROJECTED_PIXEL_SIZE_MULTIPLIER,\n  lineWidthMinPixels: 1,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  pickingLineWidthExtraPixels: 0,\n  lineWidthUnits: 'pixels',\n  lineJointRounded: false,\n  lineCapRounded: false,\n  lineMiterLimit: 4,\n  pointRadiusScale: 1,\n  pointRadiusMinPixels: 2,\n  pointRadiusMaxPixels: Number.MAX_SAFE_INTEGER,\n  getLineColor: (feature, isSelected, mode) =>\n    isSelected ? DEFAULT_SELECTED_LINE_COLOR : DEFAULT_LINE_COLOR,\n  getFillColor: (feature, isSelected, mode) =>\n    isSelected ? DEFAULT_SELECTED_FILL_COLOR : DEFAULT_FILL_COLOR,\n  getRadius: (f) =>\n    (f && f.properties && f.properties.radius) || (f && f.properties && f.properties.size) || 1,\n  getLineWidth: (f) => (f && f.properties && f.properties.lineWidth) || 3,\n\n  // Tentative feature rendering\n  getTentativeLineColor: (f) => DEFAULT_TENTATIVE_LINE_COLOR,\n  getTentativeFillColor: (f) => DEFAULT_TENTATIVE_FILL_COLOR,\n  getTentativeLineWidth: (f) => (f && f.properties && f.properties.lineWidth) || 3,\n\n  editHandleType: 'point',\n\n  // point handles\n  editHandlePointRadiusScale: 1,\n  editHandlePointOutline: true,\n  editHandlePointStrokeWidth: 2,\n  editHandlePointRadiusUnits: 'pixels',\n  editHandlePointRadiusMinPixels: 4,\n  editHandlePointRadiusMaxPixels: 8,\n  getEditHandlePointColor: getEditHandleColor,\n  getEditHandlePointOutlineColor: getEditHandleOutlineColor,\n  getEditHandlePointRadius: getEditHandleRadius,\n\n  // icon handles\n  editHandleIconAtlas: null,\n  editHandleIconMapping: null,\n  editHandleIconSizeScale: 1,\n  editHandleIconSizeUnits: 'pixels',\n  getEditHandleIcon: (handle) => handle.properties.editHandleType,\n  getEditHandleIconSize: 10,\n  getEditHandleIconColor: getEditHandleColor,\n  getEditHandleIconAngle: 0,\n\n  // misc\n  billboard: true,\n};\n\n// Mapping of mode name to mode class (for legacy purposes)\nconst modeNameMapping = {\n  view: ViewMode,\n\n  // Alter modes\n  modify: ModifyMode,\n  translate: new SnappableMode(new TranslateMode()),\n\n  transform: new SnappableMode(new TransformMode()),\n  scale: ScaleMode,\n  rotate: RotateMode,\n  duplicate: DuplicateMode,\n  split: SplitPolygonMode,\n  extrude: ExtrudeMode,\n  elevation: ElevationMode,\n\n  // Draw modes\n  drawPoint: DrawPointMode,\n  drawLineString: DrawLineStringMode,\n  drawPolygon: DrawPolygonMode,\n  drawRectangle: DrawRectangleMode,\n  drawSquare: DrawSquareMode,\n  drawRectangleFromCenter: DrawRectangleFromCenterMode,\n  drawSquareFromCenter: DrawSquareFromCenterMode,\n  drawCircleFromCenter: DrawCircleFromCenterMode,\n  drawCircleByBoundingBox: DrawCircleByDiameterMode,\n  drawEllipseByBoundingBox: DrawEllipseByBoundingBoxMode,\n  drawRectangleUsing3Points: DrawRectangleUsingThreePointsMode,\n  drawEllipseUsing3Points: DrawEllipseUsingThreePointsMode,\n  draw90DegreePolygon: Draw90DegreePolygonMode,\n  drawPolygonByDragging: DrawPolygonByDraggingMode,\n};\n\n// type State = {\n//   mode: GeoJsonEditMode,\n//   tentativeFeature: ?Feature,\n//   editHandles: any[],\n//   selectedFeatures: Feature[]\n// };\n\nexport default class EditableGeoJsonLayer extends EditableLayer<\n  any,\n  EditableGeojsonLayerProps<any>\n> {\n  static layerName = 'EditableGeoJsonLayer';\n  static defaultProps = defaultProps;\n\n  // setState: ($Shape<State>) => void;\n  renderLayers() {\n    const subLayerProps = this.getSubLayerProps({\n      id: 'geojson',\n\n      // Proxy most GeoJsonLayer props as-is\n      data: this.props.data,\n      fp64: this.props.fp64,\n      filled: this.props.filled,\n      stroked: this.props.stroked,\n      lineWidthScale: this.props.lineWidthScale,\n      lineWidthMinPixels: this.props.lineWidthMinPixels,\n      lineWidthMaxPixels: this.props.lineWidthMaxPixels,\n      lineWidthUnits: this.props.lineWidthUnits,\n      lineJointRounded: this.props.lineJointRounded,\n      lineCapRounded: this.props.lineCapRounded,\n      lineMiterLimit: this.props.lineMiterLimit,\n      pointRadiusScale: this.props.pointRadiusScale,\n      pointRadiusMinPixels: this.props.pointRadiusMinPixels,\n      pointRadiusMaxPixels: this.props.pointRadiusMaxPixels,\n      getLineColor: this.selectionAwareAccessor(this.props.getLineColor),\n      getFillColor: this.selectionAwareAccessor(this.props.getFillColor),\n      getPointRadius: this.selectionAwareAccessor(this.props.getRadius),\n      getLineWidth: this.selectionAwareAccessor(this.props.getLineWidth),\n\n      _subLayerProps: {\n        linestrings: {\n          billboard: this.props.billboard,\n          updateTriggers: {\n            // required to update dashed array attribute\n            all: [this.props.selectedFeatureIndexes, this.props.mode],\n          },\n        },\n        'polygons-stroke': {\n          billboard: this.props.billboard,\n          pickingLineWidthExtraPixels: this.props.pickingLineWidthExtraPixels,\n          type: EditablePathLayer,\n          updateTriggers: {\n            // required to update dashed array attribute\n            all: [this.props.selectedFeatureIndexes, this.props.mode],\n          },\n        },\n      },\n\n      updateTriggers: {\n        getLineColor: [this.props.selectedFeatureIndexes, this.props.mode],\n        getFillColor: [this.props.selectedFeatureIndexes, this.props.mode],\n        getPointRadius: [this.props.selectedFeatureIndexes, this.props.mode],\n        getLineWidth: [this.props.selectedFeatureIndexes, this.props.mode],\n      },\n    });\n\n    let layers: any = [new GeoJsonLayer(subLayerProps)];\n\n    layers = layers.concat(this.createGuidesLayers(), this.createTooltipsLayers());\n\n    return layers;\n  }\n\n  initializeState() {\n    super.initializeState();\n\n    this.setState({\n      selectedFeatures: [],\n      editHandles: [],\n    });\n  }\n\n  // TODO: is this the best way to properly update state from an outside event handler?\n  shouldUpdateState(opts: any) {\n    // console.log(\n    //   'shouldUpdateState',\n    //   opts.changeFlags.propsOrDataChanged,\n    //   opts.changeFlags.stateChanged\n    // );\n    return super.shouldUpdateState(opts) || opts.changeFlags.stateChanged;\n  }\n\n  updateState({\n    props,\n    oldProps,\n    changeFlags,\n    context,\n  }: {\n    props: EditableGeojsonLayerProps<any>;\n    oldProps: EditableGeojsonLayerProps<any>;\n    changeFlags: any;\n    context: any;\n    s;\n  }) {\n    super.updateState({ oldProps, props, changeFlags, context });\n\n    if (changeFlags.propsOrDataChanged) {\n      const modePropChanged = Object.keys(oldProps).length === 0 || props.mode !== oldProps.mode;\n      if (modePropChanged) {\n        let mode;\n        if (typeof props.mode === 'function') {\n          // They passed a constructor/class, so new it up\n          const ModeConstructor = props.mode;\n          mode = new ModeConstructor();\n        } else if (typeof props.mode === 'string') {\n          // Lookup the mode based on its name (for backwards compatibility)\n          mode = modeNameMapping[props.mode];\n          // eslint-disable-next-line no-console\n          console.warn(\n            \"Deprecated use of passing `mode` as a string. Pass the mode's class constructor instead.\"\n          );\n        } else {\n          // Should be an instance of EditMode in this case\n          mode = props.mode;\n        }\n\n        if (!mode) {\n          console.warn(`No mode configured for ${String(props.mode)}`); // eslint-disable-line no-console,no-undef\n          // Use default mode\n          mode = new DEFAULT_EDIT_MODE();\n        }\n\n        if (mode !== this.state.mode) {\n          this.setState({ mode, cursor: null });\n        }\n      }\n    }\n\n    let selectedFeatures = [];\n    if (Array.isArray(props.selectedFeatureIndexes)) {\n      // TODO: needs improved testing, i.e. checking for duplicates, NaNs, out of range numbers, ...\n      selectedFeatures = props.selectedFeatureIndexes.map((elem) => props.data.features[elem]);\n    }\n\n    this.setState({ selectedFeatures });\n  }\n\n  getModeProps(props: EditableGeojsonLayerProps<any>) {\n    return {\n      modeConfig: props.modeConfig,\n      data: props.data,\n      selectedIndexes: props.selectedFeatureIndexes,\n      lastPointerMoveEvent: this.state.lastPointerMoveEvent,\n      cursor: this.state.cursor,\n      onEdit: (editAction: EditAction<FeatureCollection>) => {\n        // Force a re-render\n        // This supports double-click where we need to ensure that there's a re-render between the two clicks\n        // even though the data wasn't changed, just the internal tentative feature.\n        this.setNeedsUpdate();\n        props.onEdit(editAction);\n      },\n      onUpdateCursor: (cursor: string | null | undefined) => {\n        this.setState({ cursor });\n      },\n    };\n  }\n\n  selectionAwareAccessor(accessor: any) {\n    if (typeof accessor !== 'function') {\n      return accessor;\n    }\n    return (feature: Record<string, any>) =>\n      accessor(feature, this.isFeatureSelected(feature), this.props.mode);\n  }\n\n  isFeatureSelected(feature: Record<string, any>) {\n    if (!this.props.data || !this.props.selectedFeatureIndexes) {\n      return false;\n    }\n    if (!this.props.selectedFeatureIndexes.length) {\n      return false;\n    }\n    const featureIndex = this.props.data.features.indexOf(feature);\n    return this.props.selectedFeatureIndexes.includes(featureIndex);\n  }\n\n  getPickingInfo({ info, sourceLayer }: Record<string, any>) {\n    if (sourceLayer.id.endsWith('guides')) {\n      // If user is picking an editing handle, add additional data to the info\n      info.isGuide = true;\n    }\n\n    return info;\n  }\n\n  _updateAutoHighlight(info) {\n    // Extra handling for guides\n    if (info?.sourceLayer) {\n      if (info.isGuide) {\n        for (const layer of info.sourceLayer.getSubLayers()) {\n          layer.updateAutoHighlight(info);\n        }\n      } else {\n        info.sourceLayer.updateAutoHighlight(info);\n      }\n    }\n  }\n\n  createGuidesLayers() {\n    const mode = this.getActiveMode();\n    const guides: FeatureCollection = mode.getGuides(this.getModeProps(this.props));\n\n    if (!guides || !guides.features.length) {\n      return [];\n    }\n\n    const subLayerProps = {\n      linestrings: {\n        billboard: this.props.billboard,\n        autoHighlight: false,\n      },\n      'polygons-fill': {\n        autoHighlight: false,\n      },\n      'polygons-stroke': {\n        billboard: this.props.billboard,\n      },\n    };\n\n    if (this.props.editHandleType === 'icon') {\n      subLayerProps['points-icon'] = {\n        type: IconLayer,\n        iconAtlas: this.props.editHandleIconAtlas,\n        iconMapping: this.props.editHandleIconMapping,\n        sizeUnits: this.props.editHandleIconSizeUnits,\n        sizeScale: this.props.editHandleIconSizeScale,\n        getIcon: guideAccessor(this.props.getEditHandleIcon),\n        getSize: guideAccessor(this.props.getEditHandleIconSize),\n        getColor: guideAccessor(this.props.getEditHandleIconColor),\n        getAngle: guideAccessor(this.props.getEditHandleIconAngle),\n      };\n    } else {\n      subLayerProps['points-circle'] = {\n        type: ScatterplotLayer,\n        radiusScale: this.props.editHandlePointRadiusScale,\n        stroked: this.props.editHandlePointOutline,\n        getLineWidth: this.props.editHandlePointStrokeWidth,\n        radiusUnits: this.props.editHandlePointRadiusUnits,\n        radiusMinPixels: this.props.editHandlePointRadiusMinPixels,\n        radiusMaxPixels: this.props.editHandlePointRadiusMaxPixels,\n        getRadius: guideAccessor(this.props.getEditHandlePointRadius),\n        getFillColor: guideAccessor(this.props.getEditHandlePointColor),\n        getLineColor: guideAccessor(this.props.getEditHandlePointOutlineColor),\n      };\n    }\n\n    const layer = new GeoJsonLayer(\n      this.getSubLayerProps({\n        id: `guides`,\n        data: guides,\n        fp64: this.props.fp64,\n        _subLayerProps: subLayerProps,\n        lineWidthScale: this.props.lineWidthScale,\n        lineWidthMinPixels: this.props.lineWidthMinPixels,\n        lineWidthMaxPixels: this.props.lineWidthMaxPixels,\n        lineWidthUnits: this.props.lineWidthUnits,\n        lineJointRounded: this.props.lineJointRounded,\n        lineCapRounded: this.props.lineCapRounded,\n        lineMiterLimit: this.props.lineMiterLimit,\n        getLineColor: guideAccessor(this.props.getTentativeLineColor),\n        getLineWidth: guideAccessor(this.props.getTentativeLineWidth),\n        getFillColor: guideAccessor(this.props.getTentativeFillColor),\n        pointType: this.props.editHandleType === 'icon' ? 'icon' : 'circle',\n        iconAtlas: this.props.editHandleIconAtlas,\n      })\n    );\n\n    return [layer];\n  }\n\n  createTooltipsLayers() {\n    const mode = this.getActiveMode();\n    const tooltips = mode.getTooltips(this.getModeProps(this.props));\n\n    const layer = new TextLayer({\n      getSize: DEFAULT_TOOLTIP_FONT_SIZE,\n      ...this.getSubLayerProps({\n        id: `tooltips`,\n        data: tooltips,\n      }),\n    });\n\n    return [layer];\n  }\n\n  onLayerClick(event: ClickEvent) {\n    this.getActiveMode().handleClick(event, this.getModeProps(this.props));\n  }\n\n  onLayerKeyUp(event: KeyboardEvent) {\n    this.getActiveMode().handleKeyUp(event, this.getModeProps(this.props));\n  }\n\n  onStartDragging(event: StartDraggingEvent) {\n    this.getActiveMode().handleStartDragging(event, this.getModeProps(this.props));\n  }\n\n  onDragging(event: DraggingEvent) {\n    this.getActiveMode().handleDragging(event, this.getModeProps(this.props));\n  }\n\n  onStopDragging(event: StopDraggingEvent) {\n    this.getActiveMode().handleStopDragging(event, this.getModeProps(this.props));\n  }\n\n  onPointerMove(event: PointerMoveEvent) {\n    this.setState({ lastPointerMoveEvent: event });\n    this.getActiveMode().handlePointerMove(event, this.getModeProps(this.props));\n  }\n\n  getCursor({ isDragging }: { isDragging: boolean }) {\n    if (this.state === null || this.state === undefined) {\n      // Layer in 'Awaiting state'\n      return null;\n    }\n\n    let { cursor } = this.state;\n    if (!cursor) {\n      // default cursor\n      cursor = isDragging ? 'grabbing' : 'grab';\n    }\n    return cursor;\n  }\n\n  getActiveMode(): GeoJsonEditModeType {\n    return this.state.mode;\n  }\n}\n", "import {lngLatToWorld} from '@math.gl/web-mercator';\n\n// https://epsg.io/3857\n// +proj=merc +a=6378137 +b=6378137 +lat_ts=0 +lon_0=0 +x_0=0 +y_0=0 +k=1 +units=m +nadgrids=@null +wktext +no_defs +type=crs\nconst HALF_EARTH_CIRCUMFERENCE = 6378137 * Math.PI;\n\n/** Projects EPSG:4326 to EPSG:3857\n * This is a lightweight replacement of proj4. Use tests to ensure conformance.\n */\nexport function WGS84ToPseudoMercator(coord: [number, number]): [number, number] {\n  const mercator = lngLatToWorld(coord);\n  mercator[0] = (mercator[0] / 256 - 1) * HALF_EARTH_CIRCUMFERENCE;\n  mercator[1] = (mercator[1] / 256 - 1) * HALF_EARTH_CIRCUMFERENCE;\n  return mercator;\n}\n", "// deck.gl, MIT license\n// Attributions:\n// Copyright 2022 Foursquare Labs, Inc.\n\n/* eslint-disable camelcase */ // Some WMS parameters are not in camel case\n/* global setTimeout, clearTimeout */\n\nimport {\n  Layer,\n  CompositeLayer,\n  CompositeLayerProps,\n  UpdateParameters,\n  DefaultProps,\n  Viewport,\n  COORDINATE_SYSTEM,\n  _deepEqual as deepEqual\n} from '@deck.gl/core';\nimport {BitmapLayer} from '@deck.gl/layers';\nimport type {ImageSourceMetadata, ImageType, ImageServiceType} from '@loaders.gl/wms';\nimport {ImageSource, createImageSource} from '@loaders.gl/wms';\nimport {WGS84ToPseudoMercator} from './utils';\n\n/** All props supported by the TileLayer */\nexport type WMSLayerProps = CompositeLayerProps & _WMSLayerProps;\n\n/** Props added by the TileLayer */\ntype _WMSLayerProps = {\n  data: string | ImageSource;\n  serviceType?: ImageServiceType | 'auto';\n  layers?: string[];\n  srs?: 'EPSG:4326' | 'EPSG:3857' | 'auto';\n  onMetadataLoad?: (metadata: ImageSourceMetadata) => void;\n  onMetadataLoadError?: (error: Error) => void;\n  onImageLoadStart?: (requestId: unknown) => void;\n  onImageLoad?: (requestId: unknown) => void;\n  onImageLoadError?: (requestId: unknown, error: Error) => void;\n};\n\nconst defaultProps: DefaultProps<WMSLayerProps> = {\n  id: 'imagery-layer',\n  data: '',\n  serviceType: 'auto',\n  srs: 'auto',\n  layers: {type: 'array', compare: true, value: []},\n  onMetadataLoad: {type: 'function', value: () => {}},\n  // eslint-disable-next-line\n  onMetadataLoadError: {type: 'function', value: console.error},\n  onImageLoadStart: {type: 'function', value: () => {}},\n  onImageLoad: {type: 'function', value: () => {}},\n  onImageLoadError: {\n    type: 'function',\n    compare: false,\n    // eslint-disable-next-line\n    value: (requestId: unknown, error: Error) => console.error(error, requestId)\n  }\n};\n\n/**\n * The layer is used in Hex Tile layer in order to properly discard invisible elements during animation\n */\nexport class WMSLayer<ExtraPropsT extends {} = {}> extends CompositeLayer<\n  ExtraPropsT & Required<_WMSLayerProps>\n> {\n  static layerName = 'WMSLayer';\n  static defaultProps: DefaultProps = defaultProps;\n\n  state!: {\n    imageSource: ImageSource;\n    image: ImageType;\n    bounds: [number, number, number, number];\n    lastRequestParameters: {\n      bbox: [number, number, number, number];\n      layers: string[];\n      srs: 'EPSG:4326' | 'EPSG:3857';\n      width: number;\n      height: number;\n    };\n    lastRequestId: number;\n    _nextRequestId: number;\n    /** TODO: Change any => setTimeout return type. Different between Node and browser... */\n    _timeoutId: any;\n    loadCounter: number;\n  };\n\n  /** Returns true if all async resources are loaded */\n  get isLoaded(): boolean {\n    // Track the explicit loading done by this layer\n    return Boolean(this.state) && this.state.loadCounter === 0 && super.isLoaded;\n  }\n\n  /** Lets deck.gl know that we want viewport change events */\n  override shouldUpdateState(): boolean {\n    return true;\n  }\n\n  override initializeState(): void {\n    // intentionally empty, initialization is done in updateState\n    this.state._nextRequestId = 0;\n    this.state.lastRequestId = -1;\n    this.state.loadCounter = 0;\n  }\n\n  override updateState({changeFlags, props, oldProps}: UpdateParameters<this>): void {\n    const {viewport} = this.context;\n\n    // Check if data source has changed\n    if (changeFlags.dataChanged || props.serviceType !== oldProps.serviceType) {\n      this.state.imageSource = this._createImageSource(props);\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this._loadMetadata();\n      this.debounce(() => this.loadImage(viewport, 'image source changed'), 0);\n    } else if (!deepEqual(props.layers, oldProps.layers, 1)) {\n      this.debounce(() => this.loadImage(viewport, 'layers changed'), 0);\n    } else if (changeFlags.viewportChanged) {\n      this.debounce(() => this.loadImage(viewport, 'viewport changed'));\n    }\n  }\n\n  override finalizeState(): void {\n    // TODO - we could cancel outstanding requests\n  }\n\n  override renderLayers(): Layer {\n    // TODO - which bitmap layer is rendered should depend on the current viewport\n    // Currently Studio only uses one viewport\n    const {bounds, image, lastRequestParameters} = this.state;\n\n    return (\n      image &&\n      new BitmapLayer({\n        ...this.getSubLayerProps({id: 'bitmap'}),\n        _imageCoordinateSystem:\n          lastRequestParameters.srs === 'EPSG:4326'\n            ? COORDINATE_SYSTEM.LNGLAT\n            : COORDINATE_SYSTEM.CARTESIAN,\n        bounds,\n        image\n      })\n    );\n  }\n\n  async getFeatureInfoText(x: number, y: number): Promise<string | null> {\n    const {lastRequestParameters} = this.state;\n    if (lastRequestParameters) {\n      // @ts-expect-error Undocumented method\n      const featureInfo = await this.state.imageSource.getFeatureInfoText?.({\n        ...lastRequestParameters,\n        query_layers: lastRequestParameters.layers,\n        x,\n        y,\n        info_format: 'application/vnd.ogc.gml'\n      });\n      return featureInfo;\n    }\n    return '';\n  }\n\n  _createImageSource(props: WMSLayerProps): ImageSource {\n    if (props.data instanceof ImageSource) {\n      return props.data;\n    }\n\n    if (typeof props.data === 'string') {\n      return createImageSource({\n        url: props.data,\n        loadOptions: props.loadOptions,\n        type: props.serviceType\n      });\n    }\n\n    throw new Error('invalid image source in props.data');\n  }\n\n  /** Run a getMetadata on the image service */\n  async _loadMetadata(): Promise<void> {\n    const {imageSource} = this.state;\n    try {\n      this.state.loadCounter++;\n      const metadata = await imageSource.getMetadata();\n\n      // If a request takes a long time, it may no longer be expected\n      if (this.state.imageSource === imageSource) {\n        this.getCurrentLayer()?.props.onMetadataLoad(metadata);\n      }\n    } catch (error) {\n      this.getCurrentLayer()?.props.onMetadataLoadError(error as Error);\n    } finally {\n      this.state.loadCounter--;\n    }\n  }\n\n  /** Load an image */\n  async loadImage(viewport: Viewport, reason: string): Promise<void> {\n    const {layers, serviceType} = this.props;\n\n    // TODO - move to ImageSource?\n    if (serviceType === 'wms' && layers.length === 0) {\n      return;\n    }\n\n    const bounds = viewport.getBounds();\n    const {width, height} = viewport;\n    const requestId = this.getRequestId();\n    let {srs} = this.props;\n    if (srs === 'auto') {\n      // BitmapLayer only supports LNGLAT or CARTESIAN (Web-Mercator)\n      srs = viewport.resolution ? 'EPSG:4326' : 'EPSG:3857';\n    }\n    const requestParams = {\n      width,\n      height,\n      bbox: bounds,\n      layers,\n      srs\n    };\n    if (srs === 'EPSG:3857') {\n      const [minX, minY] = WGS84ToPseudoMercator([bounds[0], bounds[1]]);\n      const [maxX, maxY] = WGS84ToPseudoMercator([bounds[2], bounds[3]]);\n      requestParams.bbox = [minX, minY, maxX, maxY];\n    }\n\n    try {\n      this.state.loadCounter++;\n      this.props.onImageLoadStart(requestId);\n\n      const image = await this.state.imageSource.getImage(requestParams);\n\n      // If a request takes a long time, later requests may have already loaded.\n      if (this.state.lastRequestId < requestId) {\n        this.getCurrentLayer()?.props.onImageLoad(requestId);\n        // Not type safe...\n        this.setState({\n          image,\n          bounds,\n          lastRequestParameters: requestParams,\n          lastRequestId: requestId\n        });\n      }\n    } catch (error) {\n      this.raiseError(error as Error, 'Load image');\n      this.getCurrentLayer()?.props.onImageLoadError(requestId, error as Error);\n    } finally {\n      this.state.loadCounter--;\n    }\n  }\n\n  // HELPERS\n\n  /** Global counter for issuing unique request ids */\n  private getRequestId(): number {\n    return this.state._nextRequestId++;\n  }\n\n  /** Runs an action in the future, cancels it if the new action is issued before it executes */\n  private debounce(fn: Function, ms = 500): void {\n    clearTimeout(this.state._timeoutId);\n    this.state._timeoutId = setTimeout(() => fn(), ms);\n  }\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport {DefaultProps} from '@deck.gl/core';\nimport {ArcLayer, ArcLayerProps} from '@deck.gl/layers';\n\nconst defaultProps: DefaultProps<ArcLayerProps> = {\n  getHeight: {type: 'accessor', value: 0},\n  greatCircle: true\n};\n\n/** All properties supported by GreatCircleLayer. */\nexport type GreatCircleLayerProps<DataT = any> = ArcLayerProps<DataT>;\n\n// This layer has been merged into the core ArcLayer\n// Keeping for backward-compatibility\n/** @deprecated Use ArcLayer with `greatCircle: true` instead */\nexport default class GreatCircleLayer<DataT = any, ExtraProps extends {} = {}> extends ArcLayer<\n  DataT,\n  ExtraProps\n> {\n  static layerName = 'GreatCircleLayer';\n  static defaultProps = defaultProps;\n}\n", "import {CompositeLayer, Layer, LayersList, DefaultProps} from '@deck.gl/core';\nimport {PolygonLayer, PolygonLayerProps} from '@deck.gl/layers';\n\nconst defaultProps: DefaultProps<GeoCellLayerProps> = {\n  ...PolygonLayer.defaultProps\n};\n\n/** All properties supported by GeoCellLayer. */\nexport type GeoCellLayerProps<DataT = any> = PolygonLayerProps<DataT>;\n\nexport default class GeoCellLayer<DataT = any, ExtraProps extends {} = {}> extends CompositeLayer<\n  Required<GeoCellLayerProps<DataT>> & ExtraProps\n> {\n  static layerName = 'GeoCellLayer';\n  static defaultProps: DefaultProps = defaultProps;\n\n  /** Implement to generate props to create geometry. */\n  indexToBounds(): Partial<GeoCellLayer['props']> | null {\n    return null;\n  }\n\n  renderLayers(): Layer | null | LayersList {\n    // Rendering props underlying layer\n    const {\n      elevationScale,\n      extruded,\n      wireframe,\n      filled,\n      stroked,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified,\n      getElevation,\n      getFillColor,\n      getLineColor,\n      getLineWidth\n    } = this.props;\n\n    // Accessor props for underlying layers\n    const {updateTriggers, material, transitions} = this.props;\n\n    // Filled Polygon Layer\n    const CellLayer = this.getSubLayerClass('cell', PolygonLayer);\n    return new CellLayer(\n      {\n        filled,\n        wireframe,\n\n        extruded,\n        elevationScale,\n\n        stroked,\n        lineWidthUnits,\n        lineWidthScale,\n        lineWidthMinPixels,\n        lineWidthMaxPixels,\n        lineJointRounded,\n        lineMiterLimit,\n        lineDashJustified,\n\n        material,\n        transitions,\n\n        getElevation,\n        getFillColor,\n        getLineColor,\n        getLineWidth\n      },\n      this.getSubLayerProps({\n        id: 'cell',\n        updateTriggers: updateTriggers && {\n          getElevation: updateTriggers.getElevation,\n          getFillColor: updateTriggers.getFillColor,\n          getLineColor: updateTriggers.getLineColor,\n          getLineWidth: updateTriggers.getLineWidth\n        }\n      }),\n      this.indexToBounds()\n    );\n  }\n}\n", "/*\nAdapted from s2-geometry\n\nISC License (ISC)\n\nCopyright (c) 2012-2016, Jon Atkins <github@jonatkins.com>\nCopyright (c) 2016, AJ ONeal <aj@daplie.com>\n\nPermission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n*/\n\nimport Long from 'long';\n\n//\n// Functional Style\n//\nconst FACE_BITS = 3;\nconst MAX_LEVEL = 30;\nconst POS_BITS = 2 * MAX_LEVEL + 1; // 61 (60 bits of data, 1 bit lsb marker)\nconst RADIAN_TO_DEGREE = 180 / Math.PI;\n\nexport function IJToST(\n  ij: [number, number],\n  order: number,\n  offsets: [number, number]\n): [number, number] {\n  const maxSize = 1 << order;\n\n  return [(ij[0] + offsets[0]) / maxSize, (ij[1] + offsets[1]) / maxSize];\n}\n\nfunction singleSTtoUV(st: number): number {\n  if (st >= 0.5) {\n    return (1 / 3.0) * (4 * st * st - 1);\n  }\n  return (1 / 3.0) * (1 - 4 * (1 - st) * (1 - st));\n}\n\nexport function STToUV(st: [number, number]): [number, number] {\n  return [singleSTtoUV(st[0]), singleSTtoUV(st[1])];\n}\n\nexport function FaceUVToXYZ(face: number, [u, v]: [number, number]): [number, number, number] {\n  switch (face) {\n    case 0:\n      return [1, u, v];\n    case 1:\n      return [-u, 1, v];\n    case 2:\n      return [-u, -v, 1];\n    case 3:\n      return [-1, -v, -u];\n    case 4:\n      return [v, -1, -u];\n    case 5:\n      return [v, u, -1];\n    default:\n      throw new Error('Invalid face');\n  }\n}\n\nexport function XYZToLngLat([x, y, z]: [number, number, number]): [number, number] {\n  const lat = Math.atan2(z, Math.sqrt(x * x + y * y));\n  const lng = Math.atan2(y, x);\n\n  return [lng * RADIAN_TO_DEGREE, lat * RADIAN_TO_DEGREE];\n}\n\nexport function toHilbertQuadkey(idS: string): string {\n  let bin = Long.fromString(idS, true, 10).toString(2);\n\n  while (bin.length < FACE_BITS + POS_BITS) {\n    // eslint-disable-next-line prefer-template\n    bin = '0' + bin;\n  }\n\n  // MUST come AFTER binstr has been left-padded with '0's\n  const lsbIndex = bin.lastIndexOf('1');\n  // substr(start, len)\n  // substring(start, end) // includes start, does not include end\n  const faceB = bin.substring(0, 3);\n  // posB will always be a multiple of 2 (or it's invalid)\n  const posB = bin.substring(3, lsbIndex);\n  const levelN = posB.length / 2;\n\n  const faceS = Long.fromString(faceB, true, 2).toString(10);\n  let posS = Long.fromString(posB, true, 2).toString(4);\n\n  while (posS.length < levelN) {\n    // eslint-disable-next-line prefer-template\n    posS = '0' + posS;\n  }\n\n  return `${faceS}/${posS}`;\n}\n\nfunction rotateAndFlipQuadrant(n: number, point: [number, number], rx: number, ry: number): void {\n  if (ry === 0) {\n    if (rx === 1) {\n      point[0] = n - 1 - point[0];\n      point[1] = n - 1 - point[1];\n    }\n\n    const x = point[0];\n    point[0] = point[1];\n    point[1] = x;\n  }\n}\n\nexport function FromHilbertQuadKey(hilbertQuadkey: string): {\n  face: number;\n  ij: [number, number];\n  level: number;\n} {\n  const parts = hilbertQuadkey.split('/');\n  const face = parseInt(parts[0], 10);\n  const position = parts[1];\n  const maxLevel = position.length;\n  const point = [0, 0] as [number, number];\n  let level;\n\n  for (let i = maxLevel - 1; i >= 0; i--) {\n    level = maxLevel - i;\n    const bit = position[i];\n    let rx = 0;\n    let ry = 0;\n    if (bit === '1') {\n      ry = 1;\n    } else if (bit === '2') {\n      rx = 1;\n      ry = 1;\n    } else if (bit === '3') {\n      rx = 1;\n    }\n\n    const val = Math.pow(2, level - 1);\n    rotateAndFlipQuadrant(val, point, rx, ry);\n\n    point[0] += val * rx;\n    point[1] += val * ry;\n  }\n\n  if (face % 2 === 1) {\n    const t = point[0];\n    point[0] = point[1];\n    point[1] = t;\n  }\n\n  return {face, ij: point, level};\n}\n", "// s2-geometry is a pure JavaScript port of Google/Niantic's S2 Geometry library\n// which is perfect since it works in the browser.\nimport {\n  toHilbertQuadkey,\n  FromHilbertQuadKey,\n  IJToST,\n  STToUV,\n  FaceUVToXYZ,\n  XYZToLngLat\n} from './s2-geometry';\nimport Long from 'long';\n\n/**\n * Given an S2 token this function convert the token to 64 bit id\n   https://github.com/google/s2-geometry-library-java/blob/c04b68bf3197a9c34082327eeb3aec7ab7c85da1/src/com/google/common/geometry/S2CellId.java#L439\n * */\nfunction getIdFromToken(token: string): number {\n  // pad token with zeros to make the length 16\n  const paddedToken = token.padEnd(16, '0');\n  return Long.fromString(paddedToken, 16);\n}\n\nconst MAX_RESOLUTION = 100;\n\n/* Adapted from s2-geometry's S2Cell.getCornerLatLngs */\n/* eslint-disable max-statements */\nfunction getGeoBounds({\n  face,\n  ij,\n  level\n}: {\n  face: number;\n  ij: [number, number];\n  level: number;\n}): Float64Array {\n  const offsets = [\n    [0, 0],\n    [0, 1],\n    [1, 1],\n    [1, 0],\n    [0, 0]\n  ];\n\n  // The S2 cell edge is curved: http://s2geometry.io/\n  // This is more prominent at lower levels\n  // resolution is the number of segments to generate per edge.\n  // We exponentially reduce resolution as level increases so it doesn't affect perf\n  // when there are a large number of cells\n  const resolution = Math.max(1, Math.ceil(MAX_RESOLUTION * Math.pow(2, -level)));\n  const result = new Float64Array(4 * resolution * 2 + 2);\n  let ptIndex = 0;\n  let prevLng = 0;\n\n  for (let i = 0; i < 4; i++) {\n    const offset = offsets[i].slice(0) as [number, number];\n    const nextOffset = offsets[i + 1];\n    const stepI = (nextOffset[0] - offset[0]) / resolution;\n    const stepJ = (nextOffset[1] - offset[1]) / resolution;\n\n    for (let j = 0; j < resolution; j++) {\n      offset[0] += stepI;\n      offset[1] += stepJ;\n      // Cell can be represented by coordinates IJ, ST, UV, XYZ\n      // http://s2geometry.io/devguide/s2cell_hierarchy#coordinate-systems\n      const st = IJToST(ij, level, offset);\n      const uv = STToUV(st);\n      const xyz = FaceUVToXYZ(face, uv);\n      const lngLat = XYZToLngLat(xyz);\n\n      // Adjust longitude for Web Mercator projection\n      if (Math.abs(lngLat[1]) > 89.999) {\n        lngLat[0] = prevLng;\n      }\n      const deltaLng = lngLat[0] - prevLng;\n      lngLat[0] += deltaLng > 180 ? -360 : deltaLng < -180 ? 360 : 0;\n\n      result[ptIndex++] = lngLat[0];\n      result[ptIndex++] = lngLat[1];\n      prevLng = lngLat[0];\n    }\n  }\n  // close the loop\n  result[ptIndex++] = result[0];\n  result[ptIndex++] = result[1];\n  return result;\n}\n/* eslint-enable max-statements */\n\nexport function getS2QuadKey(token: string | number): string {\n  if (typeof token === 'string') {\n    if (token.indexOf('/') > 0) {\n      // is Hilbert quad key\n      return token;\n    }\n    // is S2 token\n    token = getIdFromToken(token);\n  }\n  // is Long id\n  return toHilbertQuadkey(token.toString());\n}\n\n/**\n * Get a polygon with corner coordinates for an s2 cell\n * @param {*} cell - This can be an S2 key or token\n * @return {Float64Array} - a simple polygon in flat array format: [lng0, lat0, lng1, lat1, ...]\n *   - the polygon is closed, i.e. last coordinate is a copy of the first coordinate\n */\nexport function getS2Polygon(token: string | number): Float64Array {\n  const key = getS2QuadKey(token);\n  const s2cell = FromHilbertQuadKey(key);\n\n  return getGeoBounds(s2cell);\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {AccessorFunction, DefaultProps} from '@deck.gl/core';\nimport GeoCellLayer, {GeoCellLayerProps} from '../geo-cell-layer/GeoCellLayer';\nimport {getS2Polygon} from './s2-utils';\n\nconst defaultProps: DefaultProps<S2LayerProps> = {\n  getS2Token: {type: 'accessor', value: d => d.token}\n};\n\n/** All properties supported by S2Layer. */\nexport type S2LayerProps<DataT = any> = _S2LayerProps<DataT> & GeoCellLayerProps<DataT>;\n\n/** Properties added by S2Layer. */\ntype _S2LayerProps<DataT> = {\n  /**\n   * Called for each data object to retrieve the quadkey string identifier.\n   *\n   * By default, it reads `token` property of data object.\n   */\n  getS2Token?: AccessorFunction<DataT, string>;\n};\n\n/** Render filled and/or stroked polygons based on the [S2](http://s2geometry.io/) geospatial indexing system. */\nexport default class S2Layer<DataT = any, ExtraProps extends {} = {}> extends GeoCellLayer<\n  DataT,\n  Required<_S2LayerProps<DataT>> & ExtraProps\n> {\n  static layerName = 'S2Layer';\n  static defaultProps = defaultProps;\n\n  indexToBounds(): Partial<GeoCellLayer['props']> | null {\n    const {data, getS2Token} = this.props;\n\n    return {\n      data,\n      _normalize: false,\n      positionFormat: 'XY',\n      getPolygon: (x: DataT, objectInfo) => getS2Polygon(getS2Token(x, objectInfo))\n    };\n  }\n}\n", "import {worldToLngLat} from '@math.gl/web-mercator';\n\nconst TILE_SIZE = 512;\n\nexport function quadkeyToWorldBounds(quadkey: string): [number[], number[]] {\n  let x = 0;\n  let y = 0;\n  let mask = 1 << quadkey.length;\n  const scale = mask / TILE_SIZE;\n\n  for (let i = 0; i < quadkey.length; i++) {\n    mask >>= 1;\n    const q = parseInt(quadkey[i]);\n    if (q % 2) x |= mask;\n    if (q > 1) y |= mask;\n  }\n  return [\n    [x / scale, TILE_SIZE - y / scale],\n    [(x + 0.99) / scale, TILE_SIZE - (y + 0.99) / scale]\n  ];\n}\n\nexport function getQuadkeyPolygon(quadkey: string): number[] {\n  const [topLeft, bottomRight] = quadkeyToWorldBounds(quadkey);\n  const [w, n] = worldToLngLat(topLeft);\n  const [e, s] = worldToLngLat(bottomRight);\n  return [e, n, e, s, w, s, w, n, e, n];\n}\n", "import {AccessorFunction, DefaultProps} from '@deck.gl/core';\nimport GeoCellLayer, {GeoCellLayerProps} from '../geo-cell-layer/GeoCellLayer';\nimport {getQuadkeyPolygon} from './quadkey-utils';\n\nconst defaultProps: DefaultProps<QuadkeyLayerProps> = {\n  getQuadkey: {type: 'accessor', value: d => d.quadkey}\n};\n\n/** All properties supported by QuadkeyLayer. */\nexport type QuadkeyLayerProps<DataT = any> = _QuadkeyLayerProps<DataT> & GeoCellLayerProps<DataT>;\n\n/** Properties added by QuadkeyLayer. */\ntype _QuadkeyLayerProps<DataT> = {\n  /**\n   * Called for each data object to retrieve the quadkey string identifier.\n   *\n   * By default, it reads `quadkey` property of data object.\n   */\n  getQuadkey?: AccessorFunction<DataT, string>;\n};\n\n/** Render filled and/or stroked polygons based on the [Quadkey](https://towardsdatascience.com/geospatial-indexing-with-quadkeys-d933dff01496) geospatial indexing system. */\nexport default class QuadkeyLayer<DataT = any, ExtraProps extends {} = {}> extends GeoCellLayer<\n  DataT,\n  Required<_QuadkeyLayerProps<DataT>> & ExtraProps\n> {\n  static layerName = 'QuadkeyLayer';\n  static defaultProps = defaultProps;\n\n  indexToBounds(): Partial<GeoCellLayer['props']> | null {\n    const {data, getQuadkey} = this.props;\n\n    return {\n      data,\n      _normalize: false,\n      positionFormat: 'XY',\n\n      getPolygon: (x: DataT, objectInfo) => getQuadkeyPolygon(getQuadkey(x, objectInfo))\n    };\n  }\n}\n", "/* eslint-env browser */\nimport {RequestScheduler} from '@loaders.gl/loader-utils';\nimport {TileBoundingBox, TileIndex, TileLoadProps} from './types';\n\nexport type TileLoadDataProps<DataT = any> = {\n  requestScheduler: RequestScheduler;\n  getData: (props: TileLoadProps) => Promise<DataT>;\n  onLoad: (tile: Tile2DHeader<DataT>) => void;\n  onError: (error: any, tile: Tile2DHeader<DataT>) => void;\n};\n\nexport class Tile2DHeader<DataT = any> {\n  index: TileIndex;\n  isVisible: boolean;\n  isSelected: boolean;\n  parent: Tile2DHeader | null;\n  children: Tile2DHeader[] | null;\n  content: DataT | null;\n  state?: number;\n  layers?: any[] | null; // Layer[] | null\n\n  id!: string; // assigned _always_ with result of `getTileId`\n  zoom!: number; // assigned _always_ with result of `getTileZoom`\n  userData?: Record<string, any>; // _may be_ assigned with result of `getTileMetadata`\n  boundingBox!: [min: number[], max: number[]]; // assigned _always_ with bbox from `getTileMetadata`\n\n  private _abortController: AbortController | null;\n  private _loader: Promise<void> | undefined;\n  private _loaderId: number;\n  private _isLoaded: boolean;\n  private _isCancelled: boolean;\n  private _needsReload: boolean;\n  private _bbox!: TileBoundingBox;\n\n  constructor(index: TileIndex) {\n    this.index = index;\n    this.isVisible = false;\n    this.isSelected = false;\n    this.parent = null;\n    this.children = [];\n\n    this.content = null;\n\n    this._loader = undefined;\n    this._abortController = null;\n    this._loaderId = 0;\n    this._isLoaded = false;\n    this._isCancelled = false;\n    this._needsReload = false;\n  }\n\n  /** @deprecated use `boundingBox` instead */\n  get bbox(): TileBoundingBox {\n    return this._bbox;\n  }\n\n  // TODO - remove in v9\n  set bbox(value: TileBoundingBox) {\n    // Only set once from `Tileset2D.getTileMetadata`\n    if (this._bbox) return;\n\n    this._bbox = value;\n    if ('west' in value) {\n      this.boundingBox = [\n        [value.west, value.south],\n        [value.east, value.north]\n      ];\n    } else {\n      this.boundingBox = [\n        [value.left, value.top],\n        [value.right, value.bottom]\n      ];\n    }\n  }\n\n  get data(): Promise<DataT | null> | DataT | null {\n    return this.isLoading && this._loader ? this._loader.then(() => this.data) : this.content;\n  }\n\n  get isLoaded(): boolean {\n    return this._isLoaded && !this._needsReload;\n  }\n\n  get isLoading(): boolean {\n    return Boolean(this._loader) && !this._isCancelled;\n  }\n\n  get needsReload(): boolean {\n    return this._needsReload || this._isCancelled;\n  }\n\n  get byteLength(): number {\n    const result = this.content ? (this.content as any).byteLength : 0;\n    if (!Number.isFinite(result)) {\n      // eslint-disable-next-line no-console\n      console.error('byteLength not defined in tile data');\n    }\n    return result;\n  }\n\n  /* eslint-disable max-statements */\n  private async _loadData({\n    getData,\n    requestScheduler,\n    onLoad,\n    onError\n  }: TileLoadDataProps<DataT>): Promise<void> {\n    const {index, id, bbox, userData, zoom} = this;\n    const loaderId = this._loaderId;\n\n    this._abortController = new AbortController();\n    const {signal} = this._abortController;\n\n    // @ts-expect-error (2345) Argument of type '(tile: any) => 1 | -1' is not assignable ...\n    const requestToken = await requestScheduler.scheduleRequest(this, tile => {\n      return tile.isSelected ? 1 : -1;\n    });\n\n    if (!requestToken) {\n      this._isCancelled = true;\n      return;\n    }\n    // A tile can be cancelled while being scheduled\n    if (this._isCancelled) {\n      requestToken.done();\n      return;\n    }\n\n    let tileData: DataT | null = null;\n    let error;\n    try {\n      tileData = await getData({index, id, bbox, userData, zoom, signal});\n    } catch (err) {\n      error = err || true;\n    } finally {\n      requestToken.done();\n    }\n\n    // If loadData has been called with a newer version, discard the result from this operation\n    if (loaderId !== this._loaderId) {\n      return;\n    }\n    // Clear the `isLoading` flag\n    this._loader = undefined;\n    // Rewrite tile content with the result of getTileData if successful, or `null` in case of\n    // error or cancellation\n    this.content = tileData;\n    // If cancelled, do not invoke the callbacks\n    // Consider it loaded if we tried to cancel but `getTileData` still returned data\n    if (this._isCancelled && !tileData) {\n      this._isLoaded = false;\n      return;\n    }\n    this._isLoaded = true;\n    this._isCancelled = false;\n\n    if (error) {\n      onError(error, this);\n    } else {\n      onLoad(this);\n    }\n  }\n\n  loadData(opts: TileLoadDataProps): Promise<void> {\n    this._isLoaded = false;\n    this._isCancelled = false;\n    this._needsReload = false;\n    this._loaderId++;\n    this._loader = this._loadData(opts);\n    return this._loader;\n  }\n\n  setNeedsReload(): void {\n    if (this.isLoading) {\n      this.abort();\n      this._loader = undefined;\n    }\n    this._needsReload = true;\n  }\n\n  abort(): void {\n    if (this.isLoaded) {\n      return;\n    }\n\n    this._isCancelled = true;\n    this._abortController?.abort();\n  }\n}\n", "import {Viewport, WebMercatorViewport, _GlobeViewport} from '@deck.gl/core';\n\nimport {\n  CullingVolume,\n  Plane,\n  AxisAlignedBoundingBox,\n  makeOrientedBoundingBoxFromPoints\n} from '@math.gl/culling';\nimport {lngLatToWorld} from '@math.gl/web-mercator';\nimport {Bounds, TileIndex, ZRange} from './types';\nimport {osmTile2lngLat} from './utils';\n\nconst TILE_SIZE = 512;\n// number of world copies to check\nconst MAX_MAPS = 3;\n// for calculating bounding volume of a tile in a non-web-mercator viewport\nconst REF_POINTS_5 = [\n  [0.5, 0.5],\n  [0, 0],\n  [0, 1],\n  [1, 0],\n  [1, 1]\n]; // 4 corners and center\nconst REF_POINTS_9 = REF_POINTS_5.concat([\n  [0, 0.5],\n  [0.5, 0],\n  [1, 0.5],\n  [0.5, 1]\n]); // 4 corners, center and 4 mid points\nconst REF_POINTS_11 = REF_POINTS_9.concat([\n  [0.25, 0.5],\n  [0.75, 0.5]\n]); // 2 additional points on equator for top tile\n\nclass OSMNode {\n  x: number;\n  y: number;\n  z: number;\n\n  private childVisible?: boolean;\n  private selected?: boolean;\n\n  private _children?: OSMNode[];\n\n  constructor(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n\n  get children() {\n    if (!this._children) {\n      const x = this.x * 2;\n      const y = this.y * 2;\n      const z = this.z + 1;\n      this._children = [\n        new OSMNode(x, y, z),\n        new OSMNode(x, y + 1, z),\n        new OSMNode(x + 1, y, z),\n        new OSMNode(x + 1, y + 1, z)\n      ];\n    }\n    return this._children;\n  }\n\n  // eslint-disable-next-line complexity\n  update(params: {\n    viewport: Viewport;\n    project: ((xyz: number[]) => number[]) | null;\n    cullingVolume: CullingVolume;\n    elevationBounds: ZRange;\n    minZ: number;\n    maxZ: number;\n    bounds?: Bounds;\n    offset: number;\n  }) {\n    const {viewport, cullingVolume, elevationBounds, minZ, maxZ, bounds, offset, project} = params;\n    const boundingVolume = this.getBoundingVolume(elevationBounds, offset, project);\n\n    // First, check if this tile is visible\n    if (bounds && !this.insideBounds(bounds)) {\n      return false;\n    }\n\n    const isInside = cullingVolume.computeVisibility(boundingVolume);\n    if (isInside < 0) {\n      return false;\n    }\n\n    // Avoid loading overlapping tiles - if a descendant is requested, do not request the ancester\n    if (!this.childVisible) {\n      let {z} = this;\n      if (z < maxZ && z >= minZ) {\n        // Adjust LOD\n        // If the tile is far enough from the camera, accept a lower zoom level\n        const distance =\n          (boundingVolume.distanceTo(viewport.cameraPosition) * viewport.scale) / viewport.height;\n        z += Math.floor(Math.log2(distance));\n      }\n      if (z >= maxZ) {\n        // LOD is acceptable\n        this.selected = true;\n        return true;\n      }\n    }\n\n    // LOD is not enough, recursively test child tiles\n    this.selected = false;\n    this.childVisible = true;\n    for (const child of this.children) {\n      child.update(params);\n    }\n    return true;\n  }\n\n  getSelected(result: OSMNode[] = []): OSMNode[] {\n    if (this.selected) {\n      result.push(this);\n    }\n    if (this._children) {\n      for (const node of this._children) {\n        node.getSelected(result);\n      }\n    }\n    return result;\n  }\n\n  insideBounds([minX, minY, maxX, maxY]: Bounds): boolean {\n    const scale = Math.pow(2, this.z);\n    const extent = TILE_SIZE / scale;\n\n    return (\n      this.x * extent < maxX &&\n      this.y * extent < maxY &&\n      (this.x + 1) * extent > minX &&\n      (this.y + 1) * extent > minY\n    );\n  }\n\n  getBoundingVolume(\n    zRange: ZRange,\n    worldOffset: number,\n    project: ((xyz: number[]) => number[]) | null\n  ) {\n    if (project) {\n      // Custom projection\n      // Estimate bounding box from sample points\n      // At low zoom level we need more samples to calculate the bounding volume correctly\n      const refPoints = this.z < 1 ? REF_POINTS_11 : this.z < 2 ? REF_POINTS_9 : REF_POINTS_5;\n\n      // Convert from tile-relative coordinates to common space\n      const refPointPositions: number[][] = [];\n      for (const p of refPoints) {\n        const lngLat: number[] = osmTile2lngLat(this.x + p[0], this.y + p[1], this.z);\n        lngLat[2] = zRange[0];\n        refPointPositions.push(project(lngLat));\n\n        if (zRange[0] !== zRange[1]) {\n          // Account for the elevation volume\n          lngLat[2] = zRange[1];\n          refPointPositions.push(project(lngLat));\n        }\n      }\n\n      return makeOrientedBoundingBoxFromPoints(refPointPositions);\n    }\n\n    // Use WebMercator projection\n    const scale = Math.pow(2, this.z);\n    const extent = TILE_SIZE / scale;\n    const originX = this.x * extent + worldOffset * TILE_SIZE;\n    // deck's common space is y-flipped\n    const originY = TILE_SIZE - (this.y + 1) * extent;\n\n    return new AxisAlignedBoundingBox(\n      [originX, originY, zRange[0]],\n      [originX + extent, originY + extent, zRange[1]]\n    );\n  }\n}\n\n// eslint-disable-next-line complexity\nexport function getOSMTileIndices(\n  viewport: Viewport,\n  maxZ: number,\n  zRange: ZRange | undefined,\n  bounds?: Bounds\n): TileIndex[] {\n  const project: ((xyz: number[]) => number[]) | null =\n    viewport instanceof _GlobeViewport && viewport.resolution\n      ? // eslint-disable-next-line @typescript-eslint/unbound-method\n        viewport.projectPosition\n      : null;\n\n  // Get the culling volume of the current camera\n  const planes: Plane[] = Object.values(viewport.getFrustumPlanes()).map(\n    ({normal, distance}) => new Plane(normal.clone().negate(), distance)\n  );\n  const cullingVolume = new CullingVolume(planes);\n\n  // Project zRange from meters to common space\n  const unitsPerMeter = viewport.distanceScales.unitsPerMeter[2];\n  const elevationMin = (zRange && zRange[0] * unitsPerMeter) || 0;\n  const elevationMax = (zRange && zRange[1] * unitsPerMeter) || 0;\n\n  // Always load at the current zoom level if pitch is small\n  const minZ = viewport instanceof WebMercatorViewport && viewport.pitch <= 60 ? maxZ : 0;\n\n  // Map extent to OSM position\n  if (bounds) {\n    const [minLng, minLat, maxLng, maxLat] = bounds;\n    const topLeft = lngLatToWorld([minLng, maxLat]);\n    const bottomRight = lngLatToWorld([maxLng, minLat]);\n    bounds = [topLeft[0], TILE_SIZE - topLeft[1], bottomRight[0], TILE_SIZE - bottomRight[1]];\n  }\n\n  const root = new OSMNode(0, 0, 0);\n  const traversalParams = {\n    viewport,\n    project,\n    cullingVolume,\n    elevationBounds: [elevationMin, elevationMax] as ZRange,\n    minZ,\n    maxZ,\n    bounds,\n    // num. of worlds from the center. For repeated maps\n    offset: 0\n  };\n\n  root.update(traversalParams);\n\n  if (\n    viewport instanceof WebMercatorViewport &&\n    viewport.subViewports &&\n    viewport.subViewports.length > 1\n  ) {\n    // Check worlds in repeated maps\n    traversalParams.offset = -1;\n    while (root.update(traversalParams)) {\n      if (--traversalParams.offset < -MAX_MAPS) {\n        break;\n      }\n    }\n    traversalParams.offset = 1;\n    while (root.update(traversalParams)) {\n      if (++traversalParams.offset > MAX_MAPS) {\n        break;\n      }\n    }\n  }\n\n  return root.getSelected();\n}\n", "import {Viewport} from '@deck.gl/core';\nimport {Matrix4} from '@math.gl/core';\nimport {getOSMTileIndices} from './tile-2d-traversal';\nimport {Bounds, GeoBoundingBox, TileBoundingBox, TileIndex, ZRange} from './types';\n\nconst TILE_SIZE = 512;\nconst DEFAULT_EXTENT: Bounds = [-Infinity, -Infinity, Infinity, Infinity];\n\nexport type URLTemplate = string | string[] | null;\n\nexport const urlType = {\n  type: 'object' as const,\n  value: null as URLTemplate,\n  validate: (value, propType) =>\n    (propType.optional && value === null) ||\n    typeof value === 'string' ||\n    (Array.isArray(value) && value.every(url => typeof url === 'string')),\n  equal: (value1, value2) => {\n    if (value1 === value2) {\n      return true;\n    }\n    if (!Array.isArray(value1) || !Array.isArray(value2)) {\n      return false;\n    }\n    const len = value1.length;\n    if (len !== value2.length) {\n      return false;\n    }\n    for (let i = 0; i < len; i++) {\n      if (value1[i] !== value2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n};\n\nfunction transformBox(bbox: Bounds, modelMatrix: Matrix4): Bounds {\n  const transformedCoords = [\n    // top-left\n    modelMatrix.transformAsPoint([bbox[0], bbox[1]]),\n    // top-right\n    modelMatrix.transformAsPoint([bbox[2], bbox[1]]),\n    // bottom-left\n    modelMatrix.transformAsPoint([bbox[0], bbox[3]]),\n    // bottom-right\n    modelMatrix.transformAsPoint([bbox[2], bbox[3]])\n  ];\n  const transformedBox: Bounds = [\n    // Minimum x coord\n    Math.min(...transformedCoords.map(i => i[0])),\n    // Minimum y coord\n    Math.min(...transformedCoords.map(i => i[1])),\n    // Max x coord\n    Math.max(...transformedCoords.map(i => i[0])),\n    // Max y coord\n    Math.max(...transformedCoords.map(i => i[1]))\n  ];\n  return transformedBox;\n}\n\nfunction stringHash(s: string): number {\n  return Math.abs(s.split('').reduce((a, b) => ((a << 5) - a + b.charCodeAt(0)) | 0, 0));\n}\n\nexport function getURLFromTemplate(\n  template: URLTemplate,\n  tile: {\n    index: TileIndex;\n    id: string;\n  }\n): string | null {\n  if (!template || !template.length) {\n    return null;\n  }\n  const {index, id} = tile;\n\n  if (Array.isArray(template)) {\n    const i = stringHash(id) % template.length;\n    template = template[i];\n  }\n\n  let url = template;\n  for (const key of Object.keys(index)) {\n    const regex = new RegExp(`{${key}}`, 'g');\n    url = url.replace(regex, String(index[key]));\n  }\n\n  // Back-compatible support for {-y}\n  if (Number.isInteger(index.y) && Number.isInteger(index.z)) {\n    url = url.replace(/\\{-y\\}/g, String(Math.pow(2, index.z) - index.y - 1));\n  }\n  return url;\n}\n\n/**\n * gets the bounding box of a viewport\n */\nfunction getBoundingBox(viewport: Viewport, zRange: number[] | null, extent: Bounds): Bounds {\n  let bounds;\n  if (zRange && zRange.length === 2) {\n    const [minZ, maxZ] = zRange;\n    const bounds0 = viewport.getBounds({z: minZ});\n    const bounds1 = viewport.getBounds({z: maxZ});\n    bounds = [\n      Math.min(bounds0[0], bounds1[0]),\n      Math.min(bounds0[1], bounds1[1]),\n      Math.max(bounds0[2], bounds1[2]),\n      Math.max(bounds0[3], bounds1[3])\n    ];\n  } else {\n    bounds = viewport.getBounds();\n  }\n  if (!viewport.isGeospatial) {\n    return [\n      // Top corner should not be more then bottom corner in either direction\n      Math.max(Math.min(bounds[0], extent[2]), extent[0]),\n      Math.max(Math.min(bounds[1], extent[3]), extent[1]),\n      // Bottom corner should not be less then top corner in either direction\n      Math.min(Math.max(bounds[2], extent[0]), extent[2]),\n      Math.min(Math.max(bounds[3], extent[1]), extent[3])\n    ];\n  }\n  return [\n    Math.max(bounds[0], extent[0]),\n    Math.max(bounds[1], extent[1]),\n    Math.min(bounds[2], extent[2]),\n    Math.min(bounds[3], extent[3])\n  ];\n}\n\n/** Get culling bounds in world space */\nexport function getCullBounds({\n  viewport,\n  z = 0,\n  cullRect\n}: {\n  /** Current viewport */\n  viewport: Viewport;\n  /** Current z range */\n  z: ZRange | number | undefined;\n  /** Culling rectangle in screen space */\n  cullRect: {x: number; y: number; width: number; height: number};\n}): [number, number, number, number][] {\n  const subViewports = viewport.subViewports || [viewport];\n  return subViewports.map(v => getCullBoundsInViewport(v, z, cullRect));\n}\n\nfunction getCullBoundsInViewport(\n  /** Current viewport */\n  viewport: Viewport,\n  /** At altitude */\n  z: ZRange | number,\n  /** Culling rectangle in screen space */\n  cullRect: {x: number; y: number; width: number; height: number}\n): [number, number, number, number] {\n  if (!Array.isArray(z)) {\n    const x = cullRect.x - viewport.x;\n    const y = cullRect.y - viewport.y;\n    const {width, height} = cullRect;\n\n    const unprojectOption = {targetZ: z};\n\n    const topLeft = viewport.unproject([x, y], unprojectOption);\n    const topRight = viewport.unproject([x + width, y], unprojectOption);\n    const bottomLeft = viewport.unproject([x, y + height], unprojectOption);\n    const bottomRight = viewport.unproject([x + width, y + height], unprojectOption);\n\n    return [\n      Math.min(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]),\n      Math.min(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1]),\n      Math.max(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]),\n      Math.max(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1])\n    ];\n  }\n\n  const bounds0 = getCullBoundsInViewport(viewport, z[0], cullRect);\n  const bounds1 = getCullBoundsInViewport(viewport, z[1], cullRect);\n\n  return [\n    Math.min(bounds0[0], bounds1[0]),\n    Math.min(bounds0[1], bounds1[1]),\n    Math.max(bounds0[2], bounds1[2]),\n    Math.max(bounds0[3], bounds1[3])\n  ];\n}\n\nfunction getIndexingCoords(bbox: Bounds, scale: number, modelMatrixInverse?: Matrix4): Bounds {\n  if (modelMatrixInverse) {\n    const transformedTileIndex = transformBox(bbox, modelMatrixInverse).map(\n      i => (i * scale) / TILE_SIZE\n    );\n    return transformedTileIndex as Bounds;\n  }\n  return bbox.map(i => (i * scale) / TILE_SIZE) as Bounds;\n}\n\nfunction getScale(z: number, tileSize: number): number {\n  return (Math.pow(2, z) * TILE_SIZE) / tileSize;\n}\n\n// https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames#Lon..2Flat._to_tile_numbers_2\nexport function osmTile2lngLat(x: number, y: number, z: number): [number, number] {\n  const scale = getScale(z, TILE_SIZE);\n  const lng = (x / scale) * 360 - 180;\n  const n = Math.PI - (2 * Math.PI * y) / scale;\n  const lat = (180 / Math.PI) * Math.atan(0.5 * (Math.exp(n) - Math.exp(-n)));\n  return [lng, lat];\n}\n\nfunction tile2XY(x: number, y: number, z: number, tileSize: number): [number, number] {\n  const scale = getScale(z, tileSize);\n  return [(x / scale) * TILE_SIZE, (y / scale) * TILE_SIZE];\n}\nexport function tileToBoundingBox(\n  viewport: Viewport,\n  x: number,\n  y: number,\n  z: number,\n  tileSize: number = TILE_SIZE\n): TileBoundingBox {\n  if (viewport.isGeospatial) {\n    const [west, north] = osmTile2lngLat(x, y, z);\n    const [east, south] = osmTile2lngLat(x + 1, y + 1, z);\n    return {west, north, east, south};\n  }\n  const [left, top] = tile2XY(x, y, z, tileSize);\n  const [right, bottom] = tile2XY(x + 1, y + 1, z, tileSize);\n  return {left, top, right, bottom};\n}\n\nfunction getIdentityTileIndices(\n  viewport: Viewport,\n  z: number,\n  tileSize: number,\n  extent: Bounds,\n  modelMatrixInverse?: Matrix4\n) {\n  const bbox = getBoundingBox(viewport, null, extent);\n  const scale = getScale(z, tileSize);\n  const [minX, minY, maxX, maxY] = getIndexingCoords(bbox, scale, modelMatrixInverse);\n  const indices: TileIndex[] = [];\n\n  /*\n      |  TILE  |  TILE  |  TILE  |\n        |(minX)            |(maxX)\n   */\n  for (let x = Math.floor(minX); x < maxX; x++) {\n    for (let y = Math.floor(minY); y < maxY; y++) {\n      indices.push({x, y, z});\n    }\n  }\n  return indices;\n}\n\n/**\n * Returns all tile indices in the current viewport. If the current zoom level is smaller\n * than minZoom, return an empty array. If the current zoom level is greater than maxZoom,\n * return tiles that are on maxZoom.\n */\n// eslint-disable-next-line complexity\nexport function getTileIndices({\n  viewport,\n  maxZoom,\n  minZoom,\n  zRange,\n  extent,\n  tileSize = TILE_SIZE,\n  modelMatrix,\n  modelMatrixInverse,\n  zoomOffset = 0\n}: {\n  viewport: Viewport;\n  maxZoom?: number;\n  minZoom?: number;\n  zRange: ZRange | undefined;\n  extent?: Bounds;\n  tileSize?: number;\n  modelMatrix?: Matrix4;\n  modelMatrixInverse?: Matrix4;\n  zoomOffset?: number;\n}) {\n  let z = viewport.isGeospatial\n    ? Math.round(viewport.zoom + Math.log2(TILE_SIZE / tileSize)) + zoomOffset\n    : Math.ceil(viewport.zoom) + zoomOffset;\n  if (typeof minZoom === 'number' && Number.isFinite(minZoom) && z < minZoom) {\n    if (!extent) {\n      return [];\n    }\n    z = minZoom;\n  }\n  if (typeof maxZoom === 'number' && Number.isFinite(maxZoom) && z > maxZoom) {\n    z = maxZoom;\n  }\n  let transformedExtent = extent;\n  if (modelMatrix && modelMatrixInverse && extent && !viewport.isGeospatial) {\n    transformedExtent = transformBox(extent, modelMatrix);\n  }\n  return viewport.isGeospatial\n    ? getOSMTileIndices(viewport, z, zRange, extent)\n    : getIdentityTileIndices(\n        viewport,\n        z,\n        tileSize,\n        transformedExtent || DEFAULT_EXTENT,\n        modelMatrixInverse\n      );\n}\n\n/**\n * Returns true if s is a valid URL template\n */\nexport function isURLTemplate(s: string): boolean {\n  return /(?=.*{z})(?=.*{x})(?=.*({y}|{-y}))/.test(s);\n}\n\nexport function isGeoBoundingBox(v: any): v is GeoBoundingBox {\n  return (\n    Number.isFinite(v.west) &&\n    Number.isFinite(v.north) &&\n    Number.isFinite(v.east) &&\n    Number.isFinite(v.south)\n  );\n}\n", "// deck.gl, MIT license\n// @note - this is a duplicate of the deck.gl core export (because Tileset2D should be deck.gl independent)\n\n/**\n * Speed up consecutive function calls by caching the result of calls with identical input\n * https://en.wikipedia.org/wiki/Memoization\n * @param compute - the function to be memoized\n */\nexport function memoize<In, Out>(compute: (args: In) => Out): (args: In) => Out {\n  let cachedArgs: any = {};\n  let cachedResult: Out;\n\n  return (args: In) => {\n    for (const key in args) {\n      if (!isEqual(args[key], cachedArgs[key])) {\n        cachedResult = compute(args);\n        cachedArgs = args;\n        break;\n      }\n    }\n    return cachedResult;\n  };\n}\n\nfunction isEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n  if (Array.isArray(a)) {\n    // Special treatment for arrays: compare 1-level deep\n    // This is to support equality of matrix/coordinate props\n    const len = a.length;\n    if (!b || b.length !== len) {\n      return false;\n    }\n\n    for (let i = 0; i < len; i++) {\n      if (a[i] !== b[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n}\n", "import {Viewport} from '@deck.gl/core';\n\nimport {RequestScheduler} from '@loaders.gl/loader-utils';\nimport {Matrix4, equals} from '@math.gl/core';\n\nimport {Tile2DHeader} from './tile-2d-header';\n\nimport {getTileIndices, tileToBoundingBox, getCullBounds} from './utils';\nimport {Bounds, TileIndex, ZRange} from './types';\nimport {TileLoadProps} from './types';\nimport {memoize} from './memoize';\n\n// bit masks\nconst TILE_STATE_VISITED = 1;\nconst TILE_STATE_VISIBLE = 2;\n/*\n   show cached parent tile if children are loading\n   +-----------+       +-----+            +-----+-----+\n   |           |       |     |            |     |     |\n   |           |       |     |            |     |     |\n   |           |  -->  +-----+-----+  ->  +-----+-----+\n   |           |             |     |      |     |     |\n   |           |             |     |      |     |     |\n   +-----------+             +-----+      +-----+-----+\n\n   show cached children tiles when parent is loading\n   +-------+----       +------------\n   |       |           |\n   |       |           |\n   |       |           |\n   +-------+----  -->  |\n   |       |           |\n */\n\nexport const STRATEGY_NEVER = 'never';\nexport const STRATEGY_REPLACE = 'no-overlap';\nexport const STRATEGY_DEFAULT = 'best-available';\n\nexport type RefinementStrategyFunction = (tiles: Tile2DHeader[]) => void;\nexport type RefinementStrategy =\n  | 'never'\n  | 'no-overlap'\n  | 'best-available'\n  | RefinementStrategyFunction;\n\nconst DEFAULT_CACHE_SCALE = 5;\n\nconst STRATEGIES = {\n  [STRATEGY_DEFAULT]: updateTileStateDefault,\n  [STRATEGY_REPLACE]: updateTileStateReplace,\n  [STRATEGY_NEVER]: () => {}\n};\n\nexport type Tileset2DProps<DataT = any> = {\n  /** `getTileData` is called to retrieve the data of each tile. */\n  getTileData: (props: TileLoadProps) => Promise<DataT> | DataT;\n\n  /** The bounding box of the layer's data. */\n  extent?: number[] | null;\n  /** The pixel dimension of the tiles, usually a power of 2. */\n  tileSize?: number;\n  /** The max zoom level of the layer's data. @default null */\n  maxZoom?: number | null;\n  /** The min zoom level of the layer's data. @default 0 */\n  minZoom?: number | null;\n  /** The maximum number of tiles that can be cached. */\n  maxCacheSize?: number | null;\n  /** The maximum memory used for caching tiles. @default null */\n  maxCacheByteSize?: number | null;\n  /** How the tile layer refines the visibility of tiles. @default 'best-available' */\n  refinementStrategy?: RefinementStrategy;\n  /** Range of minimum and maximum heights in the tile. */\n  zRange?: ZRange | null;\n  /** The maximum number of concurrent getTileData calls. @default 6 */\n  maxRequests?: number;\n  /** Changes the zoom level at which the tiles are fetched. Needs to be an integer. @default 0 */\n  zoomOffset?: number;\n\n  /** Called when a tile successfully loads. */\n  onTileLoad?: (tile: Tile2DHeader<DataT>) => void;\n  /** Called when a tile is cleared from cache. */\n  onTileUnload?: (tile: Tile2DHeader<DataT>) => void;\n  /** Called when a tile failed to load. */\n  onTileError?: (err: any, tile: Tile2DHeader<DataT>) => void;\n\n  // onTileLoad: (tile: Tile2DHeader) => void;\n  // onTileUnload: (tile: Tile2DHeader) => void;\n  // onTileError: (error: any, tile: Tile2DHeader) => void;\n  /** Called when all tiles in the current viewport are loaded. */\n  // sonViewportLoad?: ((tiles: Tile2DHeader<DataT>[]) => void) | null;\n};\n\nexport const DEFAULT_TILESET2D_PROPS: Omit<Required<Tileset2DProps>, 'getTileData'> = {\n  extent: null,\n  tileSize: 512,\n\n  maxZoom: null,\n  minZoom: null,\n  maxCacheSize: null,\n  maxCacheByteSize: null,\n  refinementStrategy: 'best-available',\n  zRange: null,\n  maxRequests: 6,\n  zoomOffset: 0,\n\n  // onTileLoad: (tile: Tile2DHeader) => void,  // onTileUnload: (tile: Tile2DHeader) => void,  // onTileError: (error: any, tile: Tile2DHeader) => void,  /** Called when all tiles in the current viewport are loaded. */\n  // onViewportLoad: ((tiles: Tile2DHeader<DataT>[]) => void) | null,\n  onTileLoad: () => {},\n  onTileUnload: () => {},\n  onTileError: () => {}\n};\n\n/**\n * Manages loading and purging of tile data. This class caches recently visited tiles\n * and only creates new tiles if they are present.\n */\nexport class Tileset2D {\n  private opts: Required<Tileset2DProps>;\n  private _requestScheduler: RequestScheduler;\n  private _cache: Map<string, Tile2DHeader>;\n  private _dirty: boolean;\n  private _tiles: Tile2DHeader[];\n\n  private _cacheByteSize: number;\n  private _viewport: Viewport | null;\n  private _zRange?: ZRange;\n  private _selectedTiles: Tile2DHeader[] | null;\n  private _frameNumber: number;\n  private _modelMatrix: Matrix4;\n  private _modelMatrixInverse: Matrix4;\n\n  private _maxZoom?: number;\n  private _minZoom?: number;\n\n  private onTileLoad: (tile: Tile2DHeader) => void;\n\n  /**\n   * Takes in a function that returns tile data, a cache size, and a max and a min zoom level.\n   * Cache size defaults to 5 * number of tiles in the current viewport\n   */\n  constructor(opts: Tileset2DProps) {\n    this.opts = {...DEFAULT_TILESET2D_PROPS, ...opts};\n\n    this.onTileLoad = tile => {\n      this.opts.onTileLoad?.(tile);\n      if (this.opts.maxCacheByteSize) {\n        this._cacheByteSize += tile.byteLength;\n        this._resizeCache();\n      }\n    };\n\n    this._requestScheduler = new RequestScheduler({\n      maxRequests: opts.maxRequests,\n      throttleRequests: Boolean(opts.maxRequests && opts.maxRequests > 0)\n    });\n\n    // Maps tile id in string {z}-{x}-{y} to a Tile object\n    this._cache = new Map();\n    this._tiles = [];\n    this._dirty = false;\n    this._cacheByteSize = 0;\n\n    // Cache the last processed viewport\n    this._viewport = null;\n    this._selectedTiles = null;\n    this._frameNumber = 0;\n\n    this._modelMatrix = new Matrix4();\n    this._modelMatrixInverse = new Matrix4();\n\n    this.setOptions(opts);\n  }\n\n  /* Public API */\n  get tiles() {\n    return this._tiles;\n  }\n\n  get selectedTiles(): Tile2DHeader[] | null {\n    return this._selectedTiles;\n  }\n\n  get isLoaded(): boolean {\n    return this._selectedTiles !== null && this._selectedTiles.every(tile => tile.isLoaded);\n  }\n\n  get needsReload(): boolean {\n    return this._selectedTiles !== null && this._selectedTiles.some(tile => tile.needsReload);\n  }\n\n  setOptions(opts: Tileset2DProps): void {\n    Object.assign(this.opts, opts);\n    if (Number.isFinite(opts.maxZoom)) {\n      this._maxZoom = Math.floor(opts.maxZoom as number);\n    }\n    if (Number.isFinite(opts.minZoom)) {\n      this._minZoom = Math.ceil(opts.minZoom as number);\n    }\n  }\n\n  // Clean up any outstanding tile requests.\n  finalize(): void {\n    for (const tile of this._cache.values()) {\n      if (tile.isLoading) {\n        tile.abort();\n      }\n    }\n    this._cache.clear();\n    this._tiles = [];\n    this._selectedTiles = null;\n  }\n\n  reloadAll(): void {\n    for (const id of this._cache.keys()) {\n      const tile = this._cache.get(id) as Tile2DHeader;\n      if (!this._selectedTiles || !this._selectedTiles.includes(tile)) {\n        this._cache.delete(id);\n      } else {\n        tile.setNeedsReload();\n      }\n    }\n  }\n\n  /**\n   * Update the cache with the given viewport and model matrix and triggers callback onUpdate.\n   */\n  update(\n    viewport: Viewport,\n    {zRange, modelMatrix}: {zRange?: ZRange; modelMatrix?: Matrix4} = {}\n  ): number {\n    const modelMatrixAsMatrix4 = new Matrix4(modelMatrix);\n    const isModelMatrixNew = !modelMatrixAsMatrix4.equals(this._modelMatrix);\n    if (\n      !this._viewport ||\n      !viewport.equals(this._viewport) ||\n      !equals(this._zRange, zRange) ||\n      isModelMatrixNew\n    ) {\n      if (isModelMatrixNew) {\n        this._modelMatrixInverse = modelMatrixAsMatrix4.clone().invert();\n        this._modelMatrix = modelMatrixAsMatrix4;\n      }\n      this._viewport = viewport;\n      this._zRange = zRange;\n      const tileIndices = this.getTileIndices({\n        viewport,\n        maxZoom: this._maxZoom,\n        minZoom: this._minZoom,\n        zRange,\n        modelMatrix: this._modelMatrix,\n        modelMatrixInverse: this._modelMatrixInverse\n      });\n      this._selectedTiles = tileIndices.map(index => this._getTile(index, true));\n\n      if (this._dirty) {\n        // Some new tiles are added\n        this._rebuildTree();\n      }\n      // Check for needed reloads explicitly even if the view/matrix has not changed.\n    } else if (this.needsReload) {\n      this._selectedTiles = this._selectedTiles!.map(tile => this._getTile(tile.index, true));\n    }\n\n    // Update tile states\n    const changed = this.updateTileStates();\n    this._pruneRequests();\n\n    if (this._dirty) {\n      // cache size is either the user defined maxSize or 5 * number of current tiles in the viewport.\n      this._resizeCache();\n    }\n\n    if (changed) {\n      this._frameNumber++;\n    }\n\n    return this._frameNumber;\n  }\n\n  // eslint-disable-next-line complexity\n  isTileVisible(\n    tile: Tile2DHeader,\n    cullRect?: {x: number; y: number; width: number; height: number}\n  ): boolean {\n    if (!tile.isVisible) {\n      return false;\n    }\n\n    if (cullRect && this._viewport) {\n      const boundsArr = this._getCullBounds({\n        viewport: this._viewport,\n        z: this._zRange,\n        cullRect\n      });\n      const {bbox} = tile;\n      for (const [minX, minY, maxX, maxY] of boundsArr) {\n        let overlaps;\n        if ('west' in bbox) {\n          overlaps = bbox.west < maxX && bbox.east > minX && bbox.south < maxY && bbox.north > minY;\n        } else {\n          // top/bottom could be swapped depending on the indexing system\n          const y0 = Math.min(bbox.top, bbox.bottom);\n          const y1 = Math.max(bbox.top, bbox.bottom);\n          overlaps = bbox.left < maxX && bbox.right > minX && y0 < maxY && y1 > minY;\n        }\n        if (overlaps) {\n          return true;\n        }\n      }\n      return false;\n    }\n    return true;\n  }\n\n  /* Public interface for subclassing */\n\n  /** Returns array of tile indices in the current viewport */\n  getTileIndices({\n    viewport,\n    maxZoom,\n    minZoom,\n    zRange,\n    modelMatrix,\n    modelMatrixInverse\n  }: {\n    viewport: Viewport;\n    maxZoom?: number;\n    minZoom?: number;\n    zRange: ZRange | undefined;\n    tileSize?: number;\n    modelMatrix?: Matrix4;\n    modelMatrixInverse?: Matrix4;\n    zoomOffset?: number;\n  }): TileIndex[] {\n    const {tileSize, extent, zoomOffset} = this.opts;\n    return getTileIndices({\n      viewport,\n      maxZoom,\n      minZoom,\n      zRange,\n      tileSize,\n      extent: extent as Bounds | undefined,\n      modelMatrix,\n      modelMatrixInverse,\n      zoomOffset\n    });\n  }\n\n  /** Returns unique string key for a tile index */\n  getTileId(index: TileIndex) {\n    return `${index.x}-${index.y}-${index.z}`;\n  }\n\n  /** Returns a zoom level for a tile index */\n  getTileZoom(index: TileIndex) {\n    return index.z;\n  }\n\n  /** Returns additional metadata to add to tile, bbox by default */\n  getTileMetadata(index: TileIndex): Record<string, any> {\n    const {tileSize} = this.opts;\n    // @ts-expect-error\n    return {bbox: tileToBoundingBox(this._viewport, index.x, index.y, index.z, tileSize)};\n  }\n\n  /** Returns index of the parent tile */\n  getParentIndex(index: TileIndex) {\n    const x = Math.floor(index.x / 2);\n    const y = Math.floor(index.y / 2);\n    const z = index.z - 1;\n    return {x, y, z};\n  }\n\n  // Returns true if any tile's visibility changed\n  private updateTileStates() {\n    const refinementStrategy = this.opts.refinementStrategy || STRATEGY_DEFAULT;\n\n    const visibilities = new Array(this._cache.size);\n    let i = 0;\n    // Reset state\n    for (const tile of this._cache.values()) {\n      // save previous state\n      visibilities[i++] = tile.isVisible;\n      tile.isSelected = false;\n      tile.isVisible = false;\n    }\n    // @ts-expect-error called only when _selectedTiles is already defined\n    for (const tile of this._selectedTiles) {\n      tile.isSelected = true;\n      tile.isVisible = true;\n    }\n\n    // Strategy-specific state logic\n    (typeof refinementStrategy === 'function'\n      ? refinementStrategy\n      : STRATEGIES[refinementStrategy])(Array.from(this._cache.values()));\n\n    i = 0;\n    // Check if any visibility has changed\n    for (const tile of this._cache.values()) {\n      if (visibilities[i++] !== tile.isVisible) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /* Private methods */\n\n  private _getCullBounds = memoize(getCullBounds);\n\n  private _pruneRequests(): void {\n    const {maxRequests = 0} = this.opts;\n\n    const abortCandidates: Tile2DHeader[] = [];\n    let ongoingRequestCount = 0;\n    for (const tile of this._cache.values()) {\n      // Keep track of all the ongoing requests\n      if (tile.isLoading) {\n        ongoingRequestCount++;\n        if (!tile.isSelected && !tile.isVisible) {\n          abortCandidates.push(tile);\n        }\n      }\n    }\n\n    while (maxRequests > 0 && ongoingRequestCount > maxRequests && abortCandidates.length > 0) {\n      // There are too many ongoing requests, so abort some that are unselected\n      const tile = abortCandidates.shift()!;\n      tile.abort();\n      ongoingRequestCount--;\n    }\n  }\n\n  // This needs to be called every time some tiles have been added/removed from cache\n  private _rebuildTree() {\n    const {_cache} = this;\n\n    // Reset states\n    for (const tile of _cache.values()) {\n      tile.parent = null;\n      if (tile.children) {\n        tile.children.length = 0;\n      }\n    }\n\n    // Rebuild tree\n    for (const tile of _cache.values()) {\n      const parent = this._getNearestAncestor(tile);\n      tile.parent = parent;\n      if (parent?.children) {\n        parent.children.push(tile);\n      }\n    }\n  }\n\n  /**\n   * Clear tiles that are not visible when the cache is full\n   */\n  /* eslint-disable complexity */\n  private _resizeCache() {\n    const {_cache, opts} = this;\n\n    const maxCacheSize =\n      opts.maxCacheSize ||\n      // @ts-expect-error called only when selectedTiles is initialized\n      (opts.maxCacheByteSize ? Infinity : DEFAULT_CACHE_SCALE * this.selectedTiles.length);\n    const maxCacheByteSize = opts.maxCacheByteSize || Infinity;\n\n    const overflown = _cache.size > maxCacheSize || this._cacheByteSize > maxCacheByteSize;\n\n    if (overflown) {\n      for (const [id, tile] of _cache) {\n        if (!tile.isVisible && !tile.isSelected) {\n          // delete tile\n          this._cacheByteSize -= opts.maxCacheByteSize ? tile.byteLength : 0;\n          _cache.delete(id);\n          this.opts.onTileUnload?.(tile);\n        }\n        if (_cache.size <= maxCacheSize && this._cacheByteSize <= maxCacheByteSize) {\n          break;\n        }\n      }\n      this._rebuildTree();\n      this._dirty = true;\n    }\n    if (this._dirty) {\n      // sort by zoom level so that smaller tiles are displayed on top\n      this._tiles = Array.from(this._cache.values()).sort((t1, t2) => t1.zoom - t2.zoom);\n\n      this._dirty = false;\n    }\n  }\n  /* eslint-enable complexity */\n\n  private _getTile(index: TileIndex, create: true): Tile2DHeader;\n  private _getTile(index: TileIndex, create?: false): Tile2DHeader | undefined;\n  private _getTile(index: TileIndex, create?: boolean): Tile2DHeader | undefined {\n    const id = this.getTileId(index);\n    let tile = this._cache.get(id);\n    let needsReload = false;\n\n    if (!tile && create) {\n      tile = new Tile2DHeader(index);\n      Object.assign(tile, this.getTileMetadata(tile.index));\n      Object.assign(tile, {id, zoom: this.getTileZoom(tile.index)});\n      needsReload = true;\n      this._cache.set(id, tile);\n      this._dirty = true;\n    } else if (tile && tile.needsReload) {\n      needsReload = true;\n    }\n    if (tile && needsReload) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      tile.loadData({\n        getData: this.opts.getTileData,\n        requestScheduler: this._requestScheduler,\n        onLoad: this.onTileLoad,\n        onError: this.opts.onTileError\n      });\n    }\n\n    return tile;\n  }\n\n  _getNearestAncestor(tile: Tile2DHeader): Tile2DHeader | null {\n    const {_minZoom = 0} = this;\n\n    let index = tile.index;\n    while (this.getTileZoom(index) > _minZoom) {\n      index = this.getParentIndex(index);\n      const parent = this._getTile(index);\n      if (parent) {\n        return parent;\n      }\n    }\n    return null;\n  }\n}\n\n/* -- Refinement strategies --*/\n/* eslint-disable max-depth */\n\n// For all the selected && pending tiles:\n// - pick the closest ancestor as placeholder\n// - if no ancestor is visible, pick the closest children as placeholder\nfunction updateTileStateDefault(allTiles: Tile2DHeader[]) {\n  for (const tile of allTiles) {\n    tile.state = 0;\n  }\n  for (const tile of allTiles) {\n    if (tile.isSelected && !getPlaceholderInAncestors(tile)) {\n      getPlaceholderInChildren(tile);\n    }\n  }\n  for (const tile of allTiles) {\n    tile.isVisible = Boolean(tile.state! & TILE_STATE_VISIBLE);\n  }\n}\n\n// Until a selected tile and all its selected siblings are loaded, use the closest ancestor as placeholder\nfunction updateTileStateReplace(allTiles: Tile2DHeader[]) {\n  for (const tile of allTiles) {\n    tile.state = 0;\n  }\n  for (const tile of allTiles) {\n    if (tile.isSelected) {\n      getPlaceholderInAncestors(tile);\n    }\n  }\n  // Always process parents first\n  const sortedTiles = Array.from(allTiles).sort((t1, t2) => t1.zoom - t2.zoom);\n  for (const tile of sortedTiles) {\n    tile.isVisible = Boolean(tile.state! & TILE_STATE_VISIBLE);\n\n    if (tile.children && (tile.isVisible || tile.state! & TILE_STATE_VISITED)) {\n      // If the tile is rendered, or if the tile has been explicitly hidden, hide all of its children\n      for (const child of tile.children) {\n        child.state = TILE_STATE_VISITED;\n      }\n    } else if (tile.isSelected) {\n      getPlaceholderInChildren(tile);\n    }\n  }\n}\n\n// Walk up the tree until we find one ancestor that is loaded. Returns true if successful.\nfunction getPlaceholderInAncestors(startTile: Tile2DHeader) {\n  let tile: Tile2DHeader | null = startTile;\n  while (tile) {\n    if (tile.isLoaded || tile.content) {\n      tile.state! |= TILE_STATE_VISIBLE;\n      return true;\n    }\n    tile = tile.parent;\n  }\n  return false;\n}\n\n// Recursively set children as placeholder\nfunction getPlaceholderInChildren(tile) {\n  for (const child of tile.children) {\n    if (child.isLoaded || child.content) {\n      child.state |= TILE_STATE_VISIBLE;\n    } else {\n      getPlaceholderInChildren(child);\n    }\n  }\n}\n", "// deck.gl, MIT license\n\nexport type {\n  TileLoadProps,\n  Bounds,\n  ZRange,\n  GeoBoundingBox,\n  NonGeoBoundingBox,\n  TileBoundingBox\n} from './types';\n\nexport type {Tileset2DProps, RefinementStrategy} from './tileset-2d';\nexport {Tileset2D, STRATEGY_DEFAULT} from './tileset-2d';\n\nexport {Tile2DHeader} from './tile-2d-header';\n\nexport type {URLTemplate} from './utils';\nexport {\n  isGeoBoundingBox,\n  isURLTemplate,\n  urlType,\n  getURLFromTemplate,\n  getTileIndices,\n  tileToBoundingBox\n} from './utils';\n", "import {\n  CompositeLayer,\n  CompositeLayerProps,\n  Layer,\n  LayerProps,\n  UpdateParameters,\n  PickingInfo,\n  GetPickingInfoParams,\n  DefaultProps,\n  FilterContext,\n  _flatten as flatten\n} from '@deck.gl/core';\nimport {GeoJsonLayer} from '@deck.gl/layers';\nimport {LayersList} from '@deck.gl/core';\n\nimport type {TileLoadProps, ZRange} from '../tileset-2d';\nimport {\n  Tileset2D,\n  Tile2DHeader,\n  RefinementStrategy,\n  STRATEGY_DEFAULT,\n  Tileset2DProps\n} from '../tileset-2d';\nimport {urlType, URLTemplate, getURLFromTemplate} from '../tileset-2d';\n\nconst defaultProps: DefaultProps<TileLayerProps> = {\n  TilesetClass: Tileset2D,\n  data: {type: 'data', value: []},\n  dataComparator: urlType.equal,\n  renderSubLayers: {type: 'function', value: props => new GeoJsonLayer(props)},\n  getTileData: {type: 'function', optional: true, value: null},\n  // TODO - change to onViewportLoad to align with Tile3DLayer\n  onViewportLoad: {type: 'function', optional: true, value: null},\n  onTileLoad: {type: 'function', value: tile => {}},\n  onTileUnload: {type: 'function', value: tile => {}},\n  // eslint-disable-next-line\n  onTileError: {type: 'function', value: err => console.error(err)},\n  extent: {type: 'array', optional: true, value: null, compare: true},\n  tileSize: 512,\n  maxZoom: null,\n  minZoom: 0,\n  maxCacheSize: null,\n  maxCacheByteSize: null,\n  refinementStrategy: STRATEGY_DEFAULT,\n  zRange: null,\n  maxRequests: 6,\n  zoomOffset: 0\n};\n\n/** All props supported by the TileLayer */\nexport type TileLayerProps<DataT = any> = CompositeLayerProps & _TileLayerProps<DataT>;\n\n/** Props added by the TileLayer */\ntype _TileLayerProps<DataT> = {\n  data: URLTemplate;\n  /**\n   * Optionally implement a custom indexing scheme.\n   */\n  TilesetClass?: typeof Tileset2D;\n  /**\n   * Renders one or an array of Layer instances.\n   */\n  renderSubLayers?: (\n    props: TileLayerProps<DataT> & {\n      id: string;\n      data: DataT;\n      _offset: number;\n      tile: Tile2DHeader<DataT>;\n    }\n  ) => Layer | null | LayersList;\n  /**\n   * If supplied, `getTileData` is called to retrieve the data of each tile.\n   */\n  getTileData?: ((props: TileLoadProps) => Promise<DataT> | DataT) | null;\n\n  /** Called when all tiles in the current viewport are loaded. */\n  onViewportLoad?: ((tiles: Tile2DHeader<DataT>[]) => void) | null;\n\n  /** Called when a tile successfully loads. */\n  onTileLoad?: (tile: Tile2DHeader<DataT>) => void;\n\n  /** Called when a tile is cleared from cache. */\n  onTileUnload?: (tile: Tile2DHeader<DataT>) => void;\n\n  /** Called when a tile failed to load. */\n  onTileError?: (err: any, tile?) => void;\n\n  /** The bounding box of the layer's data. */\n  extent?: number[] | null;\n\n  /** The pixel dimension of the tiles, usually a power of 2. */\n  tileSize?: number;\n\n  /** The max zoom level of the layer's data.\n   * @default null\n   */\n  maxZoom?: number | null;\n\n  /** The min zoom level of the layer's data.\n   * @default 0\n   */\n  minZoom?: number | null;\n\n  /** The maximum number of tiles that can be cached. */\n  maxCacheSize?: number | null;\n\n  /**\n   * The maximum memory used for caching tiles.\n   *\n   * @default null\n   */\n  maxCacheByteSize?: number | null;\n\n  /**\n   * How the tile layer refines the visibility of tiles.\n   *\n   * @default 'best-available'\n   */\n  refinementStrategy?: RefinementStrategy;\n\n  /** Range of minimum and maximum heights in the tile. */\n  zRange?: ZRange | null;\n\n  /**\n   * The maximum number of concurrent getTileData calls.\n   *\n   * @default 6\n   */\n  maxRequests?: number;\n\n  /**\n   * This offset changes the zoom level at which the tiles are fetched.\n   *\n   * Needs to be an integer.\n   *\n   * @default 0\n   */\n  zoomOffset?: number;\n};\n\nexport type TiledPickingInfo<DataT = any> = PickingInfo & {\n  tile?: Tile2DHeader<DataT>;\n};\n\n/**\n * The TileLayer is a composite layer that makes it possible to visualize very large datasets.\n *\n * Instead of fetching the entire dataset, it only loads and renders what's visible in the current viewport.\n */\nexport default class TileLayer<DataT = any, ExtraPropsT extends {} = {}> extends CompositeLayer<\n  ExtraPropsT & Required<_TileLayerProps<DataT>>\n> {\n  static defaultProps: DefaultProps = defaultProps;\n  static layerName = 'TileLayer';\n\n  initializeState() {\n    this.state = {\n      tileset: null,\n      isLoaded: false\n    };\n  }\n\n  finalizeState() {\n    this.state?.tileset?.finalize();\n  }\n\n  get isLoaded(): boolean {\n    return this.state?.tileset?.selectedTiles.every(\n      tile => tile.isLoaded && tile.layers && tile.layers.every(layer => layer.isLoaded)\n    );\n  }\n\n  shouldUpdateState({changeFlags}): boolean {\n    return changeFlags.somethingChanged;\n  }\n\n  updateState({changeFlags}: UpdateParameters<this>) {\n    let {tileset} = this.state;\n    const propsChanged = changeFlags.propsOrDataChanged || changeFlags.updateTriggersChanged;\n    const dataChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getTileData));\n\n    if (!tileset) {\n      tileset = new this.props.TilesetClass(this._getTilesetOptions());\n      this.setState({tileset});\n    } else if (propsChanged) {\n      tileset.setOptions(this._getTilesetOptions());\n\n      if (dataChanged) {\n        // reload all tiles\n        // use cached layers until new content is loaded\n        tileset.reloadAll();\n      } else {\n        // some render options changed, regenerate sub layers now\n        this.state.tileset.tiles.forEach(tile => {\n          tile.layers = null;\n        });\n      }\n    }\n\n    this._updateTileset();\n  }\n\n  _getTilesetOptions(): Tileset2DProps {\n    const {\n      tileSize,\n      maxCacheSize,\n      maxCacheByteSize,\n      refinementStrategy,\n      extent,\n      maxZoom,\n      minZoom,\n      maxRequests,\n      zoomOffset\n    } = this.props;\n\n    return {\n      maxCacheSize,\n      maxCacheByteSize,\n      maxZoom,\n      minZoom,\n      tileSize,\n      refinementStrategy,\n      extent,\n      maxRequests,\n      zoomOffset,\n\n      getTileData: this.getTileData.bind(this),\n      onTileLoad: this._onTileLoad.bind(this),\n      onTileError: this._onTileError.bind(this),\n      onTileUnload: this._onTileUnload.bind(this)\n    };\n  }\n\n  private _updateTileset(): void {\n    const {tileset} = this.state;\n    const {zRange, modelMatrix} = this.props;\n    const frameNumber = tileset.update(this.context.viewport, {zRange, modelMatrix});\n    const {isLoaded} = tileset;\n\n    const loadingStateChanged = this.state.isLoaded !== isLoaded;\n    const tilesetChanged = this.state.frameNumber !== frameNumber;\n\n    if (isLoaded && (loadingStateChanged || tilesetChanged)) {\n      this._onViewportLoad();\n    }\n\n    if (tilesetChanged) {\n      // Save the tileset frame number - trigger a rerender\n      this.setState({frameNumber});\n    }\n    // Save the loaded state - should not trigger a rerender\n    this.state.isLoaded = isLoaded;\n  }\n\n  _onViewportLoad(): void {\n    const {tileset} = this.state;\n    const {onViewportLoad} = this.props;\n\n    if (onViewportLoad) {\n      onViewportLoad(tileset.selectedTiles);\n    }\n  }\n\n  _onTileLoad(tile: Tile2DHeader<DataT>): void {\n    this.props.onTileLoad(tile);\n    tile.layers = null;\n\n    this.setNeedsUpdate();\n  }\n\n  _onTileError(error: any, tile: Tile2DHeader<DataT>) {\n    this.props.onTileError(error);\n    tile.layers = null;\n\n    this.setNeedsUpdate();\n  }\n\n  _onTileUnload(tile: Tile2DHeader<DataT>) {\n    this.props.onTileUnload(tile);\n  }\n\n  // Methods for subclass to override\n\n  getTileData(tile: TileLoadProps): Promise<DataT> | DataT | null {\n    const {data, getTileData, fetch} = this.props;\n    const {signal} = tile;\n\n    tile.url =\n      typeof data === 'string' || Array.isArray(data) ? getURLFromTemplate(data, tile) : null;\n\n    if (getTileData) {\n      return getTileData(tile);\n    }\n    if (fetch && tile.url) {\n      return fetch(tile.url, {propName: 'data', layer: this, signal});\n    }\n    return null;\n  }\n\n  renderSubLayers(\n    props: TileLayer['props'] & {\n      id: string;\n      data: DataT;\n      _offset: number;\n      tile: Tile2DHeader<DataT>;\n    }\n  ): Layer | null | LayersList {\n    return this.props.renderSubLayers(props);\n  }\n\n  getSubLayerPropsByTile(tile: Tile2DHeader): Partial<LayerProps> | null {\n    return null;\n  }\n\n  getPickingInfo({info, sourceLayer}: GetPickingInfoParams): TiledPickingInfo<DataT> {\n    const sourceTile = (sourceLayer as any).props.tile;\n    if (info.picked) {\n      (info as any).tile = sourceTile;\n    }\n    (info as any).sourceTile = sourceTile;\n    return info;\n  }\n\n  protected _updateAutoHighlight(info: PickingInfo): void {\n    const sourceTile = (info as any).sourceTile as Tile2DHeader;\n    if (sourceTile && sourceTile.layers) {\n      for (const layer of sourceTile.layers) {\n        layer.updateAutoHighlight(info);\n      }\n    }\n  }\n\n  renderLayers(): Layer | null | LayersList {\n    return this.state.tileset.tiles.map((tile: Tile2DHeader) => {\n      const subLayerProps = this.getSubLayerPropsByTile(tile);\n      // cache the rendered layer in the tile\n      if (!tile.isLoaded && !tile.content) {\n        // nothing to show\n      } else if (!tile.layers) {\n        const layers = this.renderSubLayers({\n          ...this.props,\n          id: `${this.id}-${tile.id}`,\n          data: tile.content,\n          _offset: 0,\n          tile\n        });\n        tile.layers = (flatten(layers, Boolean) as Layer<{tile?: Tile2DHeader}>[]).map(layer =>\n          layer.clone({\n            tile,\n            ...subLayerProps\n          })\n        );\n      } else if (\n        subLayerProps &&\n        tile.layers[0] &&\n        Object.keys(subLayerProps).some(\n          propName => tile.layers![0].props[propName] !== subLayerProps[propName]\n        )\n      ) {\n        tile.layers = tile.layers.map(layer => layer.clone(subLayerProps));\n      }\n      return tile.layers;\n    });\n  }\n\n  filterSubLayer({layer, cullRect}: FilterContext) {\n    const {tile} = (layer as Layer<{tile: Tile2DHeader}>).props;\n    return this.state.tileset.isTileVisible(tile, cullRect);\n  }\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport type {NumericArray} from '@math.gl/core';\nimport {AccessorFunction, DefaultProps} from '@deck.gl/core';\nimport {PathLayer, PathLayerProps} from '@deck.gl/layers';\n\nconst defaultProps: DefaultProps<TripsLayerProps> = {\n  fadeTrail: true,\n  trailLength: {type: 'number', value: 120, min: 0},\n  currentTime: {type: 'number', value: 0, min: 0},\n  getTimestamps: {type: 'accessor', value: d => d.timestamps}\n};\n\n/** All properties supported by TripsLayer. */\nexport type TripsLayerProps<DataT = any> = _TripsLayerProps<DataT> & PathLayerProps<DataT>;\n\n/** Properties added by TripsLayer. */\ntype _TripsLayerProps<DataT = any> = {\n  /**\n   * Whether or not the path fades out.\n   * @default true\n   */\n  fadeTrail?: boolean;\n  /**\n   * Trail length.\n   * @default 120\n   */\n  trailLength?: number;\n  /**\n   * The current time of the frame.\n   * @default 0\n   */\n  currentTime?: number;\n  /**\n   * Timestamp accessor.\n   */\n  getTimestamps?: AccessorFunction<DataT, NumericArray>;\n};\n\n/** Render animated paths that represent vehicle trips. */\nexport default class TripsLayer<DataT = any, ExtraProps extends {} = {}> extends PathLayer<\n  DataT,\n  Required<_TripsLayerProps> & ExtraProps\n> {\n  static layerName = 'TripsLayer';\n  static defaultProps = defaultProps;\n\n  getShaders() {\n    const shaders = super.getShaders();\n    shaders.inject = {\n      'vs:#decl': `\\\nuniform float trailLength;\nattribute float instanceTimestamps;\nattribute float instanceNextTimestamps;\nvarying float vTime;\n`,\n      // Timestamp of the vertex\n      'vs:#main-end': `\\\nvTime = instanceTimestamps + (instanceNextTimestamps - instanceTimestamps) * vPathPosition.y / vPathLength;\n`,\n      'fs:#decl': `\\\nuniform bool fadeTrail;\nuniform float trailLength;\nuniform float currentTime;\nvarying float vTime;\n`,\n      // Drop the segments outside of the time window\n      'fs:#main-start': `\\\nif(vTime > currentTime || (fadeTrail && (vTime < currentTime - trailLength))) {\n  discard;\n}\n`,\n      // Fade the color (currentTime - 100%, end of trail - 0%)\n      'fs:DECKGL_FILTER_COLOR': `\\\nif(fadeTrail) {\n  color.a *= 1.0 - (currentTime - vTime) / trailLength;\n}\n`\n    };\n    return shaders;\n  }\n\n  initializeState() {\n    super.initializeState();\n\n    const attributeManager = this.getAttributeManager();\n    attributeManager!.addInstanced({\n      timestamps: {\n        size: 1,\n        accessor: 'getTimestamps',\n        shaderAttributes: {\n          instanceTimestamps: {\n            vertexOffset: 0\n          },\n          instanceNextTimestamps: {\n            vertexOffset: 1\n          }\n        }\n      }\n    });\n  }\n\n  draw(params) {\n    const {fadeTrail, trailLength, currentTime} = this.props;\n\n    params.uniforms = {\n      ...params.uniforms,\n      fadeTrail,\n      trailLength,\n      currentTime\n    };\n\n    super.draw(params);\n  }\n}\n", "import {\n  h3ToGeoBoundary,\n  h3GetResolution,\n  h3ToGeo,\n  geoToH3,\n  h3IsPentagon,\n  h3Distance,\n  edgeLength,\n  H3Index\n} from 'h3-js';\nimport {lerp} from '@math.gl/core';\nimport {\n  AccessorFunction,\n  CompositeLayer,\n  createIterable,\n  Layer,\n  LayersList,\n  UpdateParameters,\n  WebMercatorViewport,\n  DefaultProps\n} from '@deck.gl/core';\nimport {ColumnLayer, PolygonLayer, PolygonLayerProps} from '@deck.gl/layers';\n\n// There is a cost to updating the instanced geometries when using highPrecision: false\n// This constant defines the distance between two hexagons that leads to \"significant\n// distortion.\" Smaller value makes the column layer more sensitive to viewport change.\nconst UPDATE_THRESHOLD_KM = 10;\n\n// normalize longitudes w.r.t center (refLng), when not provided first vertex\nexport function normalizeLongitudes(vertices: number[][], refLng?: number): void {\n  refLng = refLng === undefined ? vertices[0][0] : refLng;\n  for (const pt of vertices) {\n    const deltaLng = pt[0] - refLng;\n    if (deltaLng > 180) {\n      pt[0] -= 360;\n    } else if (deltaLng < -180) {\n      pt[0] += 360;\n    }\n  }\n}\n\n// scale polygon vertices w.r.t center (hexId)\nexport function scalePolygon(hexId: H3Index, vertices: number[][], factor: number): void {\n  const [lat, lng] = h3ToGeo(hexId);\n  const actualCount = vertices.length;\n\n  // normalize with respect to center\n  normalizeLongitudes(vertices, lng);\n\n  // `h3ToGeoBoundary` returns same array object for first and last vertex (closed polygon),\n  // if so skip scaling the last vertex\n  const vertexCount = vertices[0] === vertices[actualCount - 1] ? actualCount - 1 : actualCount;\n  for (let i = 0; i < vertexCount; i++) {\n    vertices[i][0] = lerp(lng, vertices[i][0], factor);\n    vertices[i][1] = lerp(lat, vertices[i][1], factor);\n  }\n}\n\nfunction getHexagonCentroid(getHexagon, object, objectInfo) {\n  const hexagonId = getHexagon(object, objectInfo);\n  const [lat, lng] = h3ToGeo(hexagonId);\n  return [lng, lat];\n}\n\nfunction h3ToPolygon(hexId: H3Index, coverage: number = 1): number[][] {\n  const vertices = h3ToGeoBoundary(hexId, true);\n\n  if (coverage !== 1) {\n    // scale and normalize vertices w.r.t to center\n    scalePolygon(hexId, vertices, coverage);\n  } else {\n    // normalize w.r.t to start vertex\n    normalizeLongitudes(vertices);\n  }\n\n  return vertices;\n}\n\nfunction flattenPolygon(vertices: number[][]): Float64Array {\n  const positions = new Float64Array(vertices.length * 2);\n  let i = 0;\n  for (const pt of vertices) {\n    positions[i++] = pt[0];\n    positions[i++] = pt[1];\n  }\n  return positions;\n}\n\nfunction mergeTriggers(getHexagon, coverage) {\n  let trigger;\n  if (getHexagon === undefined || getHexagon === null) {\n    trigger = coverage;\n  } else if (typeof getHexagon === 'object') {\n    trigger = {...getHexagon, coverage};\n  } else {\n    trigger = {getHexagon, coverage};\n  }\n  return trigger;\n}\n\nconst defaultProps: DefaultProps<H3HexagonLayerProps> = {\n  ...PolygonLayer.defaultProps,\n  highPrecision: 'auto',\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  centerHexagon: null,\n  getHexagon: {type: 'accessor', value: x => x.hexagon},\n  extruded: true\n};\n\n/** All properties supported by H3HexagonLayer */\nexport type H3HexagonLayerProps<DataT = any> = _H3HexagonLayerProps<DataT> &\n  PolygonLayerProps<DataT>;\n\n/** Props added by the H3HexagonLayer */\ntype _H3HexagonLayerProps<DataT> = {\n  /**\n   * Whether or not draw hexagons with high precision.\n   * @default 'auto'\n   */\n  highPrecision?: boolean | 'auto';\n  /**\n   * Coverage of hexagon in cell.\n   * @default 1\n   */\n  coverage?: number;\n  /**\n   * Center hexagon that best represents the shape of the set. If not specified, the hexagon closest to the center of the viewport is used.\n   */\n  centerHexagon?: H3Index | null;\n  /**\n   * Called for each data object to retrieve the quadkey string identifier.\n   *\n   * By default, it reads `hexagon` property of data object.\n   */\n  getHexagon?: AccessorFunction<DataT, string>;\n  /**\n   * Whether to extrude polygons.\n   * @default true\n   */\n  extruded?: boolean;\n};\n\n/**\n * Render hexagons from the [H3](https://h3geo.org/) geospatial indexing system.\n */\nexport default class H3HexagonLayer<\n  DataT = any,\n  ExtraPropsT extends {} = {}\n> extends CompositeLayer<ExtraPropsT & Required<H3HexagonLayerProps<DataT>>> {\n  static defaultProps = defaultProps;\n  static layerName = 'H3HexagonLayer';\n\n  // See `main/bundle.ts`\n  static _checkH3Lib = () => {};\n\n  initializeState() {\n    H3HexagonLayer._checkH3Lib();\n    this.state = {\n      edgeLengthKM: 0,\n      resolution: -1\n    };\n  }\n\n  state!: {\n    centerHex?: H3Index;\n    edgeLengthKM: number;\n    hasMultipleRes?: boolean;\n    hasPentagon?: boolean;\n    resolution: number;\n    vertices?: number[][];\n  };\n\n  shouldUpdateState({changeFlags}: UpdateParameters<this>): boolean {\n    return this._shouldUseHighPrecision()\n      ? changeFlags.propsOrDataChanged\n      : changeFlags.somethingChanged;\n  }\n\n  updateState({props, changeFlags}: UpdateParameters<this>): void {\n    if (\n      props.highPrecision !== true &&\n      (changeFlags.dataChanged ||\n        (changeFlags.updateTriggersChanged && changeFlags.updateTriggersChanged.getHexagon))\n    ) {\n      const dataProps = this._calculateH3DataProps();\n      this.setState(dataProps);\n    }\n\n    this._updateVertices(this.context.viewport as WebMercatorViewport);\n  }\n\n  private _calculateH3DataProps() {\n    let resolution = -1;\n    let hasPentagon = false;\n    let hasMultipleRes = false;\n\n    const {iterable, objectInfo} = createIterable(this.props.data);\n    for (const object of iterable) {\n      objectInfo.index++;\n      const hexId = this.props.getHexagon(object, objectInfo);\n      // Take the resolution of the first hex\n      const hexResolution = h3GetResolution(hexId);\n      if (resolution < 0) {\n        resolution = hexResolution;\n        if (!this.props.highPrecision) break;\n      } else if (resolution !== hexResolution) {\n        hasMultipleRes = true;\n        break;\n      }\n      if (h3IsPentagon(hexId)) {\n        hasPentagon = true;\n        break;\n      }\n    }\n\n    return {\n      resolution,\n      edgeLengthKM: resolution >= 0 ? edgeLength(resolution, 'km') : 0,\n      hasMultipleRes,\n      hasPentagon\n    };\n  }\n\n  private _shouldUseHighPrecision(): boolean {\n    if (this.props.highPrecision === 'auto') {\n      const {resolution, hasPentagon, hasMultipleRes} = this.state;\n      const {viewport} = this.context;\n      return (\n        Boolean(viewport?.resolution) ||\n        hasMultipleRes ||\n        hasPentagon ||\n        (resolution >= 0 && resolution <= 5)\n      );\n    }\n\n    return this.props.highPrecision;\n  }\n\n  private _updateVertices(viewport: WebMercatorViewport): void {\n    if (this._shouldUseHighPrecision()) {\n      return;\n    }\n    const {resolution, edgeLengthKM, centerHex} = this.state;\n    if (resolution < 0) {\n      return;\n    }\n    const hex =\n      this.props.centerHexagon || geoToH3(viewport.latitude, viewport.longitude, resolution);\n    if (centerHex === hex) {\n      return;\n    }\n    if (centerHex) {\n      const distance = h3Distance(centerHex, hex);\n      // h3Distance returns a negative number if the distance could not be computed\n      // due to the two indexes very far apart or on opposite sides of a pentagon.\n      if (distance >= 0 && distance * edgeLengthKM < UPDATE_THRESHOLD_KM) {\n        return;\n      }\n    }\n\n    const {unitsPerMeter} = viewport.distanceScales;\n\n    let vertices = h3ToPolygon(hex);\n    const [centerLat, centerLng] = h3ToGeo(hex);\n\n    const [centerX, centerY] = viewport.projectFlat([centerLng, centerLat]);\n    vertices = vertices.map(p => {\n      const worldPosition = viewport.projectFlat(p);\n      return [\n        (worldPosition[0] - centerX) / unitsPerMeter[0],\n        (worldPosition[1] - centerY) / unitsPerMeter[1]\n      ];\n    });\n\n    this.setState({centerHex: hex, vertices});\n  }\n\n  renderLayers(): Layer | null | LayersList {\n    return this._shouldUseHighPrecision() ? this._renderPolygonLayer() : this._renderColumnLayer();\n  }\n\n  private _getForwardProps() {\n    const {\n      elevationScale,\n      material,\n      coverage,\n      extruded,\n      wireframe,\n      stroked,\n      filled,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      getFillColor,\n      getElevation,\n      getLineColor,\n      getLineWidth,\n      transitions,\n      updateTriggers\n    } = this.props;\n\n    return {\n      elevationScale,\n      extruded,\n      coverage,\n      wireframe,\n      stroked,\n      filled,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      material,\n      getElevation,\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      transitions,\n      updateTriggers: {\n        getFillColor: updateTriggers.getFillColor,\n        getElevation: updateTriggers.getElevation,\n        getLineColor: updateTriggers.getLineColor,\n        getLineWidth: updateTriggers.getLineWidth\n      } as {\n        getFillColor: any;\n        getElevation: any;\n        getLineColor: any;\n        getLineWidth: any;\n        getPolygon?: any;\n        getPosition?: any;\n      }\n    };\n  }\n\n  private _renderPolygonLayer(): PolygonLayer {\n    const {data, getHexagon, updateTriggers, coverage} = this.props;\n\n    const SubLayerClass = this.getSubLayerClass('hexagon-cell-hifi', PolygonLayer);\n    const forwardProps = this._getForwardProps();\n    forwardProps.updateTriggers.getPolygon = mergeTriggers(updateTriggers.getHexagon, coverage);\n\n    return new SubLayerClass(\n      forwardProps,\n      this.getSubLayerProps({\n        id: 'hexagon-cell-hifi',\n        updateTriggers: forwardProps.updateTriggers\n      }),\n      {\n        data,\n        _normalize: false,\n        _windingOrder: 'CCW',\n        positionFormat: 'XY',\n        getPolygon: (object, objectInfo) => {\n          const hexagonId = getHexagon(object, objectInfo);\n          return flattenPolygon(h3ToPolygon(hexagonId, coverage));\n        }\n      }\n    );\n  }\n\n  private _renderColumnLayer(): ColumnLayer {\n    const {data, getHexagon, updateTriggers} = this.props;\n\n    const SubLayerClass = this.getSubLayerClass('hexagon-cell', ColumnLayer);\n    const forwardProps = this._getForwardProps();\n    forwardProps.updateTriggers.getPosition = updateTriggers.getHexagon;\n\n    return new SubLayerClass(\n      forwardProps,\n      this.getSubLayerProps({\n        id: 'hexagon-cell',\n        flatShading: true,\n        updateTriggers: forwardProps.updateTriggers\n      }),\n      {\n        data,\n        diskResolution: 6, // generate an extruded hexagon as the base geometry\n        radius: 1,\n        vertices: this.state.vertices,\n        getPosition: getHexagonCentroid.bind(null, getHexagon)\n      }\n    );\n  }\n}\n", "import {h3SetToMultiPolygon, H3IndexInput} from 'h3-js';\n\nimport {AccessorFunction, createIterable, UpdateParameters, DefaultProps} from '@deck.gl/core';\nimport {default as H3HexagonLayer} from './h3-hexagon-layer';\nimport GeoCellLayer, {GeoCellLayerProps} from '../geo-cell-layer/GeoCellLayer';\n\nconst defaultProps: DefaultProps<H3ClusterLayerProps> = {\n  getHexagons: {type: 'accessor', value: d => d.hexagons}\n};\n\n/** All properties supported by H3ClusterLayer. */\nexport type H3ClusterLayerProps<DataT = any> = _H3ClusterLayerProps<DataT> &\n  GeoCellLayerProps<DataT>;\n\n/** Properties added by H3ClusterLayer. */\ntype _H3ClusterLayerProps<DataT> = {\n  /**\n   * Called for each data object to retrieve the hexagon identifiers.\n   *\n   * By default, it reads `hexagons` property of data object.\n   */\n  getHexagons?: AccessorFunction<DataT, H3IndexInput[]>;\n};\n\nexport default class H3ClusterLayer<DataT = any, ExtraProps extends {} = {}> extends GeoCellLayer<\n  DataT,\n  Required<_H3ClusterLayerProps<DataT>> & ExtraProps\n> {\n  static layerName = 'H3ClusterLayer';\n  static defaultProps = defaultProps;\n\n  initializeState(): void {\n    H3HexagonLayer._checkH3Lib();\n  }\n\n  updateState({props, changeFlags}: UpdateParameters<this>): void {\n    if (\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged && changeFlags.updateTriggersChanged.getHexagons)\n    ) {\n      const {data, getHexagons} = props;\n      const polygons: {polygon: number[][][]}[] = [];\n\n      const {iterable, objectInfo} = createIterable(data);\n      for (const object of iterable) {\n        objectInfo.index++;\n        const hexagons = getHexagons(object, objectInfo);\n        const multiPolygon = h3SetToMultiPolygon(hexagons, true);\n\n        for (const polygon of multiPolygon) {\n          polygons.push(this.getSubLayerRow({polygon}, object, objectInfo.index));\n        }\n      }\n\n      this.setState({polygons});\n    }\n  }\n\n  indexToBounds(): Partial<GeoCellLayer['props']> {\n    const {getElevation, getFillColor, getLineColor, getLineWidth} = this.props;\n\n    return {\n      data: this.state.polygons,\n      getPolygon: d => d.polygon,\n\n      getElevation: this.getSubLayerAccessor(getElevation),\n      getFillColor: this.getSubLayerAccessor(getFillColor),\n      getLineColor: this.getSubLayerAccessor(getLineColor),\n      getLineWidth: this.getSubLayerAccessor(getLineWidth)\n    };\n  }\n}\n", "import {COORDINATE_SYSTEM, createIterable} from '@deck.gl/core';\n\n/* eslint-disable max-statements, complexity, camelcase */\nconst RADIAN_PER_DEGREE = Math.PI / 180;\nconst modelMatrix = new Float32Array(16);\nconst valueArray = new Float32Array(12);\n\nfunction calculateTransformMatrix(targetMatrix, orientation, scale) {\n  const pitch = orientation[0] * RADIAN_PER_DEGREE;\n  const yaw = orientation[1] * RADIAN_PER_DEGREE;\n  const roll = orientation[2] * RADIAN_PER_DEGREE;\n\n  const sr = Math.sin(roll);\n  const sp = Math.sin(pitch);\n  const sw = Math.sin(yaw);\n\n  const cr = Math.cos(roll);\n  const cp = Math.cos(pitch);\n  const cw = Math.cos(yaw);\n\n  const scx = scale[0];\n  const scy = scale[1];\n  const scz = scale[2];\n\n  targetMatrix[0] = scx * cw * cp; // 0,0\n  targetMatrix[1] = scx * sw * cp; // 1,0\n  targetMatrix[2] = scx * -sp; // 2,0\n  targetMatrix[3] = scy * (-sw * cr + cw * sp * sr); // 0,1\n  targetMatrix[4] = scy * (cw * cr + sw * sp * sr); // 1,1\n  targetMatrix[5] = scy * cp * sr; // 2,1\n  targetMatrix[6] = scz * (sw * sr + cw * sp * cr); // 0,2\n  targetMatrix[7] = scz * (-cw * sr + sw * sp * cr); // 1,2\n  targetMatrix[8] = scz * cp * cr; // 2,2\n}\n\nfunction getExtendedMat3FromMat4(mat4) {\n  mat4[0] = mat4[0];\n  mat4[1] = mat4[1];\n  mat4[2] = mat4[2];\n  mat4[3] = mat4[4];\n  mat4[4] = mat4[5];\n  mat4[5] = mat4[6];\n  mat4[6] = mat4[8];\n  mat4[7] = mat4[9];\n  mat4[8] = mat4[10];\n  mat4[9] = mat4[12];\n  mat4[10] = mat4[13];\n  mat4[11] = mat4[14];\n\n  return mat4.subarray(0, 12);\n}\n\nexport const MATRIX_ATTRIBUTES = {\n  size: 12,\n  accessor: ['getOrientation', 'getScale', 'getTranslation', 'getTransformMatrix'],\n  shaderAttributes: {\n    instanceModelMatrix__LOCATION_0: {\n      size: 3,\n      elementOffset: 0\n    },\n    instanceModelMatrix__LOCATION_1: {\n      size: 3,\n      elementOffset: 3\n    },\n    instanceModelMatrix__LOCATION_2: {\n      size: 3,\n      elementOffset: 6\n    },\n    instanceTranslation: {\n      size: 3,\n      elementOffset: 9\n    }\n  } as const,\n\n  update(attribute, {startRow, endRow}) {\n    // @ts-expect-error: \"this\" will be bound to a layer when this function is called\n    const {data, getOrientation, getScale, getTranslation, getTransformMatrix} = this.props;\n\n    const arrayMatrix = Array.isArray(getTransformMatrix);\n    const constantMatrix = arrayMatrix && getTransformMatrix.length === 16;\n    const constantScale = Array.isArray(getScale);\n    const constantOrientation = Array.isArray(getOrientation);\n    const constantTranslation = Array.isArray(getTranslation);\n\n    const hasMatrix = constantMatrix || (!arrayMatrix && Boolean(getTransformMatrix(data[0])));\n\n    if (hasMatrix) {\n      attribute.constant = constantMatrix;\n    } else {\n      attribute.constant = constantOrientation && constantScale && constantTranslation;\n    }\n\n    const instanceModelMatrixData = attribute.value;\n\n    if (attribute.constant) {\n      let matrix;\n\n      if (hasMatrix) {\n        modelMatrix.set(getTransformMatrix);\n        matrix = getExtendedMat3FromMat4(modelMatrix);\n      } else {\n        matrix = valueArray;\n\n        const orientation = getOrientation;\n        const scale = getScale;\n\n        calculateTransformMatrix(matrix, orientation, scale);\n        matrix.set(getTranslation, 9);\n      }\n\n      attribute.value = new Float32Array(matrix);\n    } else {\n      let i = startRow * attribute.size;\n      const {iterable, objectInfo} = createIterable(data, startRow, endRow);\n      for (const object of iterable) {\n        objectInfo.index++;\n        let matrix;\n\n        if (hasMatrix) {\n          modelMatrix.set(\n            constantMatrix ? getTransformMatrix : getTransformMatrix(object, objectInfo)\n          );\n          matrix = getExtendedMat3FromMat4(modelMatrix);\n        } else {\n          matrix = valueArray;\n\n          const orientation = constantOrientation\n            ? getOrientation\n            : getOrientation(object, objectInfo);\n          const scale = constantScale ? getScale : getScale(object, objectInfo);\n\n          calculateTransformMatrix(matrix, orientation, scale);\n          matrix.set(constantTranslation ? getTranslation : getTranslation(object, objectInfo), 9);\n        }\n\n        instanceModelMatrixData[i++] = matrix[0];\n        instanceModelMatrixData[i++] = matrix[1];\n        instanceModelMatrixData[i++] = matrix[2];\n        instanceModelMatrixData[i++] = matrix[3];\n        instanceModelMatrixData[i++] = matrix[4];\n        instanceModelMatrixData[i++] = matrix[5];\n        instanceModelMatrixData[i++] = matrix[6];\n        instanceModelMatrixData[i++] = matrix[7];\n        instanceModelMatrixData[i++] = matrix[8];\n        instanceModelMatrixData[i++] = matrix[9];\n        instanceModelMatrixData[i++] = matrix[10];\n        instanceModelMatrixData[i++] = matrix[11];\n      }\n    }\n  }\n};\n\n// only apply composeModelMatrix when in cartesian or meter_offsets coordinate system\n// with `composeModelMatrix` enabled, the rotation part of the layer's modelMatrix will be composed to instance's transformations\n// since rotating latitude and longitude can not provide meaningful results, hence `composeModelMatrix` is disabled\n// when in LNGLAT and LNGLAT_OFFSET coordinates.\nexport function shouldComposeModelMatrix(viewport, coordinateSystem) {\n  return (\n    coordinateSystem === COORDINATE_SYSTEM.CARTESIAN ||\n    coordinateSystem === COORDINATE_SYSTEM.METER_OFFSETS ||\n    (coordinateSystem === COORDINATE_SYSTEM.DEFAULT && !viewport.isGeospatial)\n  );\n}\n", "export default `#version 300 es\n#define SHADER_NAME simple-mesh-layer-vs\n\n// Scale the model\nuniform float sizeScale;\nuniform bool composeModelMatrix;\n\n// Primitive attributes\nin vec3 positions;\nin vec3 normals;\nin vec3 colors;\nin vec2 texCoords;\n\n// Instance attributes\nin vec3 instancePositions;\nin vec3 instancePositions64Low;\nin vec4 instanceColors;\nin vec3 instancePickingColors;\nin mat3 instanceModelMatrix;\nin vec3 instanceTranslation;\n\n// Outputs to fragment shader\nout vec2 vTexCoord;\nout vec3 cameraPosition;\nout vec3 normals_commonspace;\nout vec4 position_commonspace;\nout vec4 vColor;\n\nvoid main(void) {\n  geometry.worldPosition = instancePositions;\n  geometry.uv = texCoords;\n  geometry.pickingColor = instancePickingColors;\n\n  vTexCoord = texCoords;\n  cameraPosition = project_uCameraPosition;\n  vColor = vec4(colors * instanceColors.rgb, instanceColors.a);\n\n  vec3 pos = (instanceModelMatrix * positions) * sizeScale + instanceTranslation;\n\n  if (composeModelMatrix) {\n    DECKGL_FILTER_SIZE(pos, geometry);\n    // using instancePositions as world coordinates\n    // when using globe mode, this branch does not re-orient the model to align with the surface of the earth\n    // call project_normal before setting position to avoid rotation\n    normals_commonspace = project_normal(instanceModelMatrix * normals);\n    geometry.worldPosition += pos;\n    gl_Position = project_position_to_clipspace(pos + instancePositions, instancePositions64Low, vec3(0.0), position_commonspace);\n    geometry.position = position_commonspace;\n  }\n  else {\n    pos = project_size(pos);\n    DECKGL_FILTER_SIZE(pos, geometry);\n    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, pos, position_commonspace);\n    geometry.position = position_commonspace;\n    normals_commonspace = project_normal(instanceModelMatrix * normals);\n  }\n\n  geometry.normal = normals_commonspace;\n  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n\n  DECKGL_FILTER_COLOR(vColor, geometry);\n}\n`;\n", "export default `#version 300 es\n#define SHADER_NAME simple-mesh-layer-fs\n\nprecision highp float;\n\nuniform bool hasTexture;\nuniform sampler2D sampler;\nuniform bool flatShading;\nuniform float opacity;\n\nin vec2 vTexCoord;\nin vec3 cameraPosition;\nin vec3 normals_commonspace;\nin vec4 position_commonspace;\nin vec4 vColor;\n\nout vec4 fragColor;\n\nvoid main(void) {\n  geometry.uv = vTexCoord;\n\n  vec3 normal;\n  if (flatShading) {\n\n// NOTE(Tarek): This is necessary because\n// headless.gl reports the extension as\n// available but does not support it in\n// the shader.\n#ifdef DERIVATIVES_AVAILABLE\n    normal = normalize(cross(dFdx(position_commonspace.xyz), dFdy(position_commonspace.xyz)));\n#else\n    normal = vec3(0.0, 0.0, 1.0);\n#endif\n  } else {\n    normal = normals_commonspace;\n  }\n\n  vec4 color = hasTexture ? texture(sampler, vTexCoord) : vColor;\n  DECKGL_FILTER_COLOR(color, geometry);\n\n  vec3 lightColor = lighting_getLightColor(color.rgb, cameraPosition, position_commonspace.xyz, normal);\n  fragColor = vec4(lightColor, color.a * opacity);\n}\n`;\n", "// Note: This file will either be moved back to deck.gl or reformatted to web-monorepo standards\n// Disabling lint temporarily to facilitate copying code in and out of this repo\n/* eslint-disable */\n\n// Copyright (c) 2015 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Layer,\n  project32,\n  phongLighting,\n  picking,\n  DefaultProps,\n  log,\n  LayerContext,\n  Material\n} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry, Texture2D, isWebGL2} from '@luma.gl/core';\nimport {hasFeature, FEATURES} from '@luma.gl/webgl';\n\nimport {MATRIX_ATTRIBUTES, shouldComposeModelMatrix} from '../utils/matrix';\n\nimport vs from './simple-mesh-layer-vertex.glsl';\nimport fs from './simple-mesh-layer-fragment.glsl';\n\nimport type {\n  LayerProps,\n  LayerDataSource,\n  UpdateParameters,\n  Accessor,\n  Position,\n  Color,\n  Texture\n} from '@deck.gl/core';\nimport type {MeshAttribute, MeshAttributes} from '@loaders.gl/schema';\nimport type {Geometry as GeometryType} from '@luma.gl/engine';\nimport {GLTFMaterialParser} from '@luma.gl/experimental';\nimport {getMeshBoundingBox} from '@loaders.gl/schema';\n\nfunction validateGeometryAttributes(attributes: Record<string, any>, useMeshColors: boolean): void {\n  const hasColorAttribute = attributes.COLOR_0 || attributes.colors;\n  const useColorAttribute = hasColorAttribute && useMeshColors;\n  if (!useColorAttribute) {\n    attributes.colors = {constant: true, value: new Float32Array([1, 1, 1])};\n  }\n  log.assert(\n    attributes.positions || attributes.POSITION,\n    'no \"postions\" or \"POSITION\" attribute in mesh'\n  );\n}\n\n/*\n * Convert mesh data into geometry\n * @returns {Geometry} geometry\n */\nfunction getGeometry(data: Mesh, useMeshColors: boolean): Geometry {\n  if ((data as any).attributes) {\n    validateGeometryAttributes((data as any).attributes, useMeshColors);\n    if (data instanceof Geometry) {\n      return data;\n    } else {\n      return new Geometry(data);\n    }\n  } else if ((data as MeshAttributes).positions || (data as MeshAttributes).POSITION) {\n    validateGeometryAttributes(data, useMeshColors);\n    return new Geometry({\n      attributes: data\n    });\n  }\n  throw Error('Invalid mesh');\n}\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\ntype Mesh =\n  | GeometryType\n  | {\n      attributes: MeshAttributes;\n      indices?: MeshAttribute;\n    }\n  | MeshAttributes;\n\ntype _SimpleMeshLayerProps<DataT> = {\n  data: LayerDataSource<DataT>;\n  mesh: string | Mesh | Promise<Mesh> | null;\n  texture?: string | Texture | Promise<Texture>;\n  /** Customize the [texture parameters](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texParameter). */\n  textureParameters?: Record<number, number> | null;\n\n  /** Anchor position accessor. */\n  getPosition?: Accessor<DataT, Position>;\n  /** Color value or accessor.\n   * If `mesh` does not contain vertex colors, use this color to render each object.\n   * If `mesh` contains vertex colors, then the two colors are mixed together.\n   * Use `[255, 255, 255]` to use the original mesh colors.\n   * If `texture` is assigned, then both colors will be ignored.\n   * @default [0, 0, 0, 255]\n   */\n  getColor?: Accessor<DataT, Color>;\n  /**\n   * Orientation in [pitch, yaw, roll] in degrees.\n   * @see https://en.wikipedia.org/wiki/Euler_angles\n   * @default [0, 0, 0]\n   */\n  getOrientation?: Accessor<DataT, [number, number, number]>;\n  /**\n   * Scaling factor of the model along each axis.\n   * @default [1, 1, 1]\n   */\n  getScale?: Accessor<DataT, [number, number, number]>;\n  /**\n   * Translation from the anchor point, [x, y, z] in meters.\n   * @default [0, 0, 0]\n   */\n  getTranslation?: Accessor<DataT, [number, number, number]>;\n  /**\n   * TransformMatrix. If specified, `getOrientation`, `getScale` and `getTranslation` are ignored.\n   */\n  getTransformMatrix?: Accessor<DataT, number[]>;\n  /**\n   * Multiplier to scale each geometry by.\n   * @default 1\n   */\n  sizeScale?: number;\n  /**\n   * @deprecated Whether to color pixels using vertex colors supplied in the mesh (the `COLOR_0` or `colors` attribute).\n   * If set to `false` vertex colors will be ignored.\n   * This prop will be removed and set to always true in the next major release.\n   * @default false\n   */\n  _useMeshColors?: boolean;\n\n  /**\n   * (Experimental) If rendering only one instance of the mesh, set this to false to treat mesh positions\n   * as deltas of the world coordinates of the anchor.\n   * E.g. in LNGLAT coordinates, mesh positions are interpreted as meter offsets by default.\n   * setting _instanced to false interpreted mesh positions as lnglat deltas.\n   * @default true\n   */\n  _instanced?: boolean; // TODO - formalize API\n  /**\n   * Whether to render the mesh in wireframe mode.\n   * @default false\n   */\n  wireframe?: boolean;\n  /**\n   * Material props for lighting effect.\n   *\n   * @default true\n   * @see https://deck.gl/docs/developer-guide/using-lighting#constructing-a-material-instance\n   */\n  material?: Material;\n};\n\nexport type SimpleMeshLayerProps<DataT = any> = _SimpleMeshLayerProps<DataT> & LayerProps;\n\nconst defaultProps: DefaultProps<SimpleMeshLayerProps> = {\n  mesh: {type: 'object', value: null, async: true},\n  texture: {type: 'image', value: null, async: true},\n  sizeScale: {type: 'number', value: 1, min: 0},\n  // Whether the color attribute in a mesh will be used\n  // This prop will be removed and set to true in next major release\n  _useMeshColors: {type: 'boolean', value: false},\n\n  // _instanced is a hack to use world position instead of meter offsets in mesh\n  // TODO - formalize API\n  _instanced: true,\n  // NOTE(Tarek): Quick and dirty wireframe. Just draws\n  // the same mesh with LINE_STRIPS. Won't follow edges\n  // of the original mesh.\n  wireframe: false,\n  // Optional material for 'lighting' shader module\n  material: true,\n  getPosition: {type: 'accessor', value: x => x.position},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  // yaw, pitch and roll are in degrees\n  // https://en.wikipedia.org/wiki/Euler_angles\n  // [pitch, yaw, roll]\n  getOrientation: {type: 'accessor', value: [0, 0, 0]},\n  getScale: {type: 'accessor', value: [1, 1, 1]},\n  getTranslation: {type: 'accessor', value: [0, 0, 0]},\n  // 4x4 matrix\n  getTransformMatrix: {type: 'accessor', value: []},\n\n  textureParameters: {type: 'object', ignore: true}\n};\n\n/** Render a number of instances of an arbitrary 3D geometry. */\nexport default class SimpleMeshLayer<DataT = any, ExtraPropsT extends {} = {}> extends Layer<\n  ExtraPropsT & Required<_SimpleMeshLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'SimpleMeshLayer';\n\n  state!: {\n    materialParser?: GLTFMaterialParser;\n    model?: Model;\n    emptyTexture: Texture2D;\n    hasNormals?: boolean;\n    positionBounds?: [number[], number[]] | null;\n  };\n\n  getShaders() {\n    const transpileToGLSL100 = !isWebGL2(this.context.gl);\n\n    const defines: any = {};\n\n    if (hasFeature(this.context.gl, FEATURES.GLSL_DERIVATIVES)) {\n      defines.DERIVATIVES_AVAILABLE = 1;\n    }\n\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, phongLighting, picking],\n      transpileToGLSL100,\n      defines\n    });\n  }\n\n  getBounds(): [number[], number[]] | null {\n    if (this.props._instanced) {\n      return super.getBounds();\n    }\n    let result = this.state.positionBounds;\n    if (result) {\n      return result;\n    }\n    const {mesh} = this.props;\n    if (!mesh) {\n      return null;\n    }\n    // @ts-ignore Detect if mesh is generated by loaders.gl\n    result = mesh.header?.boundingBox;\n\n    if (!result) {\n      // Otherwise, calculate bounding box from positions\n      const {attributes} = getGeometry(mesh as Mesh, this.props._useMeshColors);\n      attributes.POSITION = attributes.POSITION || attributes.positions;\n      result = getMeshBoundingBox(attributes);\n    }\n\n    this.state.positionBounds = result;\n    return result;\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    // attributeManager is always defined in a primitive layer\n    attributeManager!.addInstanced({\n      instancePositions: {\n        transition: true,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        size: 3,\n        accessor: 'getPosition'\n      },\n      instanceColors: {\n        type: GL.UNSIGNED_BYTE,\n        transition: true,\n        size: this.props.colorFormat.length,\n        normalized: true,\n        accessor: 'getColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceModelMatrix: MATRIX_ATTRIBUTES\n    });\n\n    this.setState({\n      // Avoid luma.gl's missing uniform warning\n      // TODO - add feature to luma.gl to specify ignored uniforms?\n      emptyTexture: new Texture2D(this.context.gl, {\n        data: new Uint8Array(4),\n        width: 1,\n        height: 1\n      })\n    });\n  }\n\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n\n    const {props, oldProps, changeFlags} = params;\n    if (props.mesh !== oldProps.mesh || changeFlags.extensionsChanged) {\n      this.state.positionBounds = null;\n      this.state.model?.delete();\n      if (props.mesh) {\n        this.state.model = this.getModel(props.mesh as Mesh);\n\n        const attributes = (props.mesh as any).attributes || props.mesh;\n        this.setState({\n          hasNormals: Boolean(attributes.NORMAL || attributes.normals)\n        });\n      }\n      // attributeManager is always defined in a primitive layer\n      this.getAttributeManager()!.invalidateAll();\n    }\n\n    if (props.texture !== oldProps.texture) {\n      this.setTexture(props.texture);\n    }\n\n    if (this.state.model) {\n      this.state.model.setDrawMode(this.props.wireframe ? GL.LINE_STRIP : GL.TRIANGLES);\n    }\n  }\n\n  finalizeState(context: LayerContext) {\n    super.finalizeState(context);\n\n    this.state.emptyTexture.delete();\n  }\n\n  draw({uniforms}) {\n    if (!this.state.model) {\n      return;\n    }\n\n    const {viewport} = this.context;\n    const {sizeScale, coordinateSystem, _instanced} = this.props;\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        sizeScale,\n        composeModelMatrix: !_instanced || shouldComposeModelMatrix(viewport, coordinateSystem),\n        flatShading: !this.state.hasNormals\n      })\n      .draw();\n  }\n\n  protected getModel(mesh: Mesh): Model {\n    const model = new Model(this.context.gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: getGeometry(mesh, this.props._useMeshColors),\n      isInstanced: true\n    });\n\n    const {texture} = this.props;\n    const {emptyTexture} = this.state;\n    model.setUniforms({\n      sampler: texture || emptyTexture,\n      hasTexture: Boolean(texture)\n    });\n\n    return model;\n  }\n\n  private setTexture(texture: Texture2D): void {\n    const {emptyTexture, model} = this.state;\n\n    // props.mesh may not be ready at this time.\n    // The sampler will be set when `getModel` is called\n    if (model) {\n      model.setUniforms({\n        sampler: texture || emptyTexture,\n        hasTexture: Boolean(texture)\n      });\n    }\n  }\n}\n", "/* global requestAnimationFrame */\nimport type {GroupNode, ModelNode} from '@luma.gl/experimental';\n\nexport async function waitForGLTFAssets(gltfObjects: {scenes: GroupNode[]}): Promise<void> {\n  const remaining: any[] = [];\n\n  gltfObjects.scenes.forEach(scene => {\n    scene.traverse((model: ModelNode) => {\n      Object.values(model.model.getUniforms()).forEach((uniform: any) => {\n        if (uniform.loaded === false) {\n          remaining.push(uniform);\n        }\n      });\n    });\n  });\n\n  return await waitWhileCondition(() => remaining.some(uniform => !uniform.loaded));\n}\n\nasync function waitWhileCondition(condition: () => boolean): Promise<void> {\n  while (condition()) {\n    await new Promise(resolve => requestAnimationFrame(resolve));\n  }\n}\n", "export default `\\\n#version 300 es\n\n// Instance attributes\nin vec3 instancePositions;\nin vec3 instancePositions64Low;\nin vec4 instanceColors;\nin vec3 instancePickingColors;\nin mat3 instanceModelMatrix;\nin vec3 instanceTranslation;\n\n// Uniforms\nuniform float sizeScale;\nuniform float sizeMinPixels;\nuniform float sizeMaxPixels;\nuniform mat4 sceneModelMatrix;\nuniform bool composeModelMatrix;\n\n// Attributes\nin vec4 POSITION;\n\n#ifdef HAS_UV\n  in vec2 TEXCOORD_0;\n#endif\n\n#ifdef MODULE_PBR\n  #ifdef HAS_NORMALS\n    in vec4 NORMAL;\n  #endif\n#endif\n\n// Varying\nout vec4 vColor;\n\n// MODULE_PBR contains all the varying definitions needed\n#ifndef MODULE_PBR\n  #ifdef HAS_UV\n    out vec2 vTEXCOORD_0;\n  #endif\n#endif\n\n// Main\nvoid main(void) {\n  #if defined(HAS_UV) && !defined(MODULE_PBR)\n    vTEXCOORD_0 = TEXCOORD_0;\n    geometry.uv = vTEXCOORD_0;\n  #endif\n\n  geometry.worldPosition = instancePositions;\n  geometry.pickingColor = instancePickingColors;\n\n  vec3 normal = vec3(0.0, 0.0, 1.0);\n  #ifdef MODULE_PBR\n    #ifdef HAS_NORMALS\n      normal = instanceModelMatrix * (sceneModelMatrix * vec4(NORMAL.xyz, 0.0)).xyz;\n    #endif\n  #endif\n\n  float originalSize = project_size_to_pixel(sizeScale);\n  float clampedSize = clamp(originalSize, sizeMinPixels, sizeMaxPixels);\n\n  vec3 pos = (instanceModelMatrix * (sceneModelMatrix * POSITION).xyz) * sizeScale * (clampedSize / originalSize) + instanceTranslation;\n  if(composeModelMatrix) {\n    DECKGL_FILTER_SIZE(pos, geometry);\n    // using instancePositions as world coordinates\n    // when using globe mode, this branch does not re-orient the model to align with the surface of the earth\n    // call project_normal before setting position to avoid rotation\n    geometry.normal = project_normal(normal);\n    geometry.worldPosition += pos;\n    gl_Position = project_position_to_clipspace(pos + instancePositions, instancePositions64Low, vec3(0.0), geometry.position);\n  }\n  else {\n    pos = project_size(pos);\n    DECKGL_FILTER_SIZE(pos, geometry);\n    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, pos, geometry.position);\n    geometry.normal = project_normal(normal);\n  }\n  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n\n  #ifdef MODULE_PBR\n    // set PBR data\n    pbr_vPosition = geometry.position.xyz;\n    #ifdef HAS_NORMALS\n      pbr_vNormal = geometry.normal;\n    #endif\n\n    #ifdef HAS_UV\n      pbr_vUV = TEXCOORD_0;\n    #else\n      pbr_vUV = vec2(0., 0.);\n    #endif\n    geometry.uv = pbr_vUV;\n  #endif\n\n  vColor = instanceColors;\n  DECKGL_FILTER_COLOR(vColor, geometry);\n}\n`;\n", "export default `\\\n#version 300 es\n\n// Uniforms\nuniform float opacity;\n\n// Varying\nin vec4 vColor;\n\nout vec4 fragmentColor;\n\n// MODULE_PBR contains all the varying definitions needed\n#ifndef MODULE_PBR\n  #if defined(HAS_UV) && defined(HAS_BASECOLORMAP)\n    in vec2 vTEXCOORD_0;\n    uniform sampler2D u_BaseColorSampler;\n  #endif\n#endif\n\nvoid main(void) {\n  #ifdef MODULE_PBR\n    fragmentColor = vColor * pbr_filterColor(vec4(0));\n    geometry.uv = pbr_vUV;\n  #else\n    #if defined(HAS_UV) && defined(HAS_BASECOLORMAP)\n      fragmentColor = vColor * texture2D(u_BaseColorSampler, vTEXCOORD_0);\n      geometry.uv = vTEXCOORD_0;\n    #else\n      fragmentColor = vColor;\n    #endif\n  #endif\n\n  fragmentColor.a *= opacity;\n  DECKGL_FILTER_COLOR(fragmentColor, geometry);\n}\n`;\n", "// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, picking, log} from '@deck.gl/core';\nimport {isWebGL2} from '@luma.gl/core';\nimport {pbr} from '@luma.gl/shadertools';\nimport {\n  ScenegraphNode,\n  GroupNode,\n  GLTFAnimator,\n  GLTFEnvironment,\n  createGLTFObjects\n} from '@luma.gl/experimental';\nimport GL from '@luma.gl/constants';\nimport {GLTFLoader} from '@loaders.gl/gltf';\nimport {waitForGLTFAssets} from './gltf-utils';\n\nimport {MATRIX_ATTRIBUTES, shouldComposeModelMatrix} from '../utils/matrix';\n\nimport vs from './scenegraph-layer-vertex.glsl';\nimport fs from './scenegraph-layer-fragment.glsl';\n\nimport type {\n  UpdateParameters,\n  LayerContext,\n  LayerProps,\n  LayerDataSource,\n  Position,\n  Color,\n  Accessor,\n  DefaultProps\n} from '@deck.gl/core';\n\nconst DEFAULT_COLOR: [number, number, number, number] = [255, 255, 255, 255];\n\nexport type ScenegraphLayerProps<DataT = any> = _ScenegraphLayerProps<DataT> & LayerProps;\n\ntype _ScenegraphLayerProps<DataT> = {\n  data: LayerDataSource<DataT>;\n  // TODO - define in luma.gl\n  /**\n   * A url for a glTF model or scenegraph loaded via a [scenegraph loader](https://loaders.gl/docs/specifications/category-scenegraph)\n   */\n  scenegraph: any;\n  /**\n   * Create a luma.gl GroupNode from the resolved scenegraph prop\n   */\n  getScene?: (\n    scenegraph: any,\n    context: {gl: WebGLRenderingContext; layer: ScenegraphLayer<DataT>}\n  ) => GroupNode;\n  /**\n   * Create a luma.gl GLTFAnimator from the resolved scenegraph prop\n   */\n  getAnimator?: (\n    scenegraph: any,\n    context: {gl: WebGLRenderingContext; layer: ScenegraphLayer<DataT>}\n  ) => GLTFAnimator;\n  /**\n   * (Experimental) animation configurations. Requires `_animate` on deck object.\n   */\n  _animations?: {\n    [name: number | string | '*']: {\n      /** If the animation is playing */\n      playing?: boolean;\n      /** Start time of the animation, default `0` */\n      startTime?: number;\n      /** Speed multiplier of the animation, default `1` */\n      speed?: number;\n    };\n  } | null;\n  /**\n   * (Experimental) lighting mode\n   * @default 'flat'\n   */\n  _lighting?: 'flat' | 'pbr';\n  /**\n   * (Experimental) lighting environment. Requires `_lighting` to be `'pbr'`.\n   */\n  _imageBasedLightingEnvironment?:\n    | null\n    | GLTFEnvironment\n    | ((context: {gl: WebGLRenderingContext; layer: ScenegraphLayer<DataT>}) => GLTFEnvironment);\n\n  /** Anchor position accessor. */\n  getPosition?: Accessor<DataT, Position>;\n  /** Color value or accessor.\n   * @default [255, 255, 255, 255]\n   */\n  getColor?: Accessor<DataT, Color>;\n  /**\n   * Orientation in [pitch, yaw, roll] in degrees.\n   * @see https://en.wikipedia.org/wiki/Euler_angles\n   * @default [0, 0, 0]\n   */\n  getOrientation?: Accessor<DataT, [number, number, number]>;\n  /**\n   * Scaling factor of the model along each axis.\n   * @default [1, 1, 1]\n   */\n  getScale?: Accessor<DataT, [number, number, number]>;\n  /**\n   * Translation from the anchor point, [x, y, z] in meters.\n   * @default [0, 0, 0]\n   */\n  getTranslation?: Accessor<DataT, [number, number, number]>;\n  /**\n   * TransformMatrix. If specified, `getOrientation`, `getScale` and `getTranslation` are ignored.\n   */\n  getTransformMatrix?: Accessor<DataT, number[]>;\n  /**\n   * Multiplier to scale each geometry by.\n   * @default 1\n   */\n  sizeScale?: number;\n  /**\n   * The minimum size in pixels for one unit of the scene.\n   * @default 0\n   */\n  sizeMinPixels?: number;\n  /**\n   * The maximum size in pixels for one unit of the scene.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  sizeMaxPixels?: number;\n};\n\nconst defaultProps: DefaultProps<ScenegraphLayerProps> = {\n  scenegraph: {type: 'object', value: null, async: true},\n  getScene: gltf => {\n    if (gltf && gltf.scenes) {\n      // gltf post processor replaces `gltf.scene` number with the scene `object`\n      return typeof gltf.scene === 'object' ? gltf.scene : gltf.scenes[gltf.scene || 0];\n    }\n    return gltf;\n  },\n  getAnimator: scenegraph => scenegraph && scenegraph.animator,\n  _animations: null,\n\n  sizeScale: {type: 'number', value: 1, min: 0},\n  sizeMinPixels: {type: 'number', min: 0, value: 0},\n  sizeMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER},\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  // flat or pbr\n  _lighting: 'flat',\n  // _lighting must be pbr for this to work\n  _imageBasedLightingEnvironment: null,\n\n  // yaw, pitch and roll are in degrees\n  // https://en.wikipedia.org/wiki/Euler_angles\n  // [pitch, yaw, roll]\n  getOrientation: {type: 'accessor', value: [0, 0, 0]},\n  getScale: {type: 'accessor', value: [1, 1, 1]},\n  getTranslation: {type: 'accessor', value: [0, 0, 0]},\n  // 4x4 matrix\n  getTransformMatrix: {type: 'accessor', value: []},\n\n  loaders: [GLTFLoader]\n};\n\n/** Render a number of instances of a complete glTF scenegraph. */\nexport default class ScenegraphLayer<DataT = any, ExtraPropsT extends {} = {}> extends Layer<\n  ExtraPropsT & Required<_ScenegraphLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'ScenegraphLayer';\n\n  state!: {\n    scenegraph: GroupNode;\n    animator: GLTFAnimator;\n    attributesAvailable?: boolean;\n  };\n\n  getShaders() {\n    const modules = [project32, picking];\n\n    if (this.props._lighting === 'pbr') {\n      modules.push(pbr);\n    }\n\n    return {vs, fs, modules};\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    // attributeManager is always defined for primitive layers\n    attributeManager!.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        accessor: 'getPosition',\n        transition: true\n      },\n      instanceColors: {\n        type: GL.UNSIGNED_BYTE,\n        size: this.props.colorFormat.length,\n        accessor: 'getColor',\n        normalized: true,\n        defaultValue: DEFAULT_COLOR,\n        transition: true\n      },\n      instanceModelMatrix: MATRIX_ATTRIBUTES\n    });\n  }\n\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n    const {props, oldProps} = params;\n\n    if (props.scenegraph !== oldProps.scenegraph) {\n      this._updateScenegraph();\n    } else if (props._animations !== oldProps._animations) {\n      this._applyAnimationsProp(this.state.scenegraph, this.state.animator, props._animations);\n    }\n  }\n\n  finalizeState(context: LayerContext) {\n    super.finalizeState(context);\n    this._deleteScenegraph();\n  }\n\n  private _updateScenegraph(): void {\n    const props = this.props;\n    const {gl} = this.context;\n    let scenegraphData: any = null;\n    if (props.scenegraph instanceof ScenegraphNode) {\n      // Signature 1: props.scenegraph is a proper luma.gl Scenegraph\n      scenegraphData = {scenes: [props.scenegraph]};\n    } else if (props.scenegraph && !props.scenegraph.gltf) {\n      // Converts loaders.gl gltf to luma.gl scenegraph using the undocumented @luma.gl/experimental function\n      const gltf = props.scenegraph;\n      const gltfObjects = createGLTFObjects(gl, gltf, this._getModelOptions());\n      scenegraphData = {gltf, ...gltfObjects};\n\n      waitForGLTFAssets(gltfObjects).then(() => this.setNeedsRedraw()); // eslint-disable-line @typescript-eslint/no-floating-promises\n    } else if (props.scenegraph) {\n      // DEPRECATED PATH: Assumes this data was loaded through GLTFScenegraphLoader\n      log.deprecated(\n        'ScenegraphLayer.props.scenegraph',\n        'Use GLTFLoader instead of GLTFScenegraphLoader'\n      )();\n      scenegraphData = props.scenegraph;\n    }\n\n    const options = {layer: this, gl};\n    const scenegraph = props.getScene(scenegraphData, options);\n    const animator = props.getAnimator(scenegraphData, options);\n\n    if (scenegraph instanceof ScenegraphNode) {\n      this._deleteScenegraph();\n      this._applyAllAttributes(scenegraph);\n      this._applyAnimationsProp(scenegraph, animator, props._animations);\n      this.setState({scenegraph, animator});\n    } else if (scenegraph !== null) {\n      log.warn('invalid scenegraph:', scenegraph)();\n    }\n  }\n\n  private _applyAllAttributes(scenegraph: GroupNode): void {\n    if (this.state.attributesAvailable) {\n      // attributeManager is always defined for primitive layers\n      const allAttributes = this.getAttributeManager()!.getAttributes();\n      scenegraph.traverse(model => {\n        this._setModelAttributes(model.model, allAttributes);\n      });\n    }\n  }\n\n  private _applyAnimationsProp(\n    scenegraph: GroupNode,\n    animator: GLTFAnimator,\n    animationsProp: any\n  ): void {\n    if (!scenegraph || !animator || !animationsProp) {\n      return;\n    }\n\n    const animations = animator.getAnimations();\n\n    // sort() to ensure '*' comes first so that other values can override\n    Object.keys(animationsProp)\n      .sort()\n      .forEach(key => {\n        // Key can be:\n        //  - number for index number\n        //  - name for animation name\n        //  - * to affect all animations\n        const value = animationsProp[key];\n\n        if (key === '*') {\n          animations.forEach(animation => {\n            Object.assign(animation, value);\n          });\n        } else if (Number.isFinite(Number(key))) {\n          const number = Number(key);\n          if (number >= 0 && number < animations.length) {\n            Object.assign(animations[number], value);\n          } else {\n            log.warn(`animation ${key} not found`)();\n          }\n        } else {\n          const findResult = animations.find(({name}) => name === key);\n          if (findResult) {\n            Object.assign(findResult, value);\n          } else {\n            log.warn(`animation ${key} not found`)();\n          }\n        }\n      });\n  }\n\n  private _deleteScenegraph(): void {\n    const {scenegraph} = this.state;\n    if (scenegraph instanceof ScenegraphNode) {\n      scenegraph.delete();\n    }\n  }\n\n  private _getModelOptions(): any {\n    const {_imageBasedLightingEnvironment} = this.props;\n\n    let env: GLTFEnvironment | null = null;\n    if (_imageBasedLightingEnvironment) {\n      if (typeof _imageBasedLightingEnvironment === 'function') {\n        env = _imageBasedLightingEnvironment({gl: this.context.gl, layer: this});\n      } else {\n        env = _imageBasedLightingEnvironment;\n      }\n    }\n\n    return {\n      gl: this.context.gl,\n      waitForFullLoad: true,\n      imageBasedLightingEnvironment: env,\n      modelOptions: {\n        isInstanced: true,\n        transpileToGLSL100: !isWebGL2(this.context.gl),\n        ...this.getShaders()\n      },\n      // tangents are not supported\n      useTangents: false\n    };\n  }\n\n  updateAttributes(changedAttributes) {\n    this.setState({attributesAvailable: true});\n    if (!this.state.scenegraph) return;\n\n    this.state.scenegraph.traverse(model => {\n      this._setModelAttributes(model.model, changedAttributes);\n    });\n  }\n\n  draw({moduleParameters = null, parameters = {}, context}) {\n    if (!this.state.scenegraph) return;\n\n    if (this.props._animations && this.state.animator) {\n      this.state.animator.animate(context.timeline.getTime());\n      this.setNeedsRedraw();\n    }\n\n    const {viewport} = this.context;\n    const {sizeScale, sizeMinPixels, sizeMaxPixels, opacity, coordinateSystem} = this.props;\n    const numInstances = this.getNumInstances();\n    this.state.scenegraph.traverse((model, {worldMatrix}) => {\n      model.model.setInstanceCount(numInstances);\n      model.updateModuleSettings(moduleParameters);\n      model.draw({\n        parameters,\n        uniforms: {\n          sizeScale,\n          opacity,\n          sizeMinPixels,\n          sizeMaxPixels,\n          composeModelMatrix: shouldComposeModelMatrix(viewport, coordinateSystem),\n          sceneModelMatrix: worldMatrix,\n          // Needed for PBR (TODO: find better way to get it)\n          // eslint-disable-next-line camelcase\n          u_Camera: model.model.getUniforms().project_uCameraPosition\n        }\n      });\n    });\n  }\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n/* eslint-disable max-len */\n\nexport {default as SimpleMeshLayer} from './simple-mesh-layer/simple-mesh-layer';\nexport {default as ScenegraphLayer} from './scenegraph-layer/scenegraph-layer';\n\nexport type {ScenegraphLayerProps} from './scenegraph-layer/scenegraph-layer';\nexport type {SimpleMeshLayerProps} from './simple-mesh-layer/simple-mesh-layer';\n", "export default `#version 300 es\n#define SHADER_NAME simple-mesh-layer-vs\n\n// Scale the model\nuniform float sizeScale;\nuniform bool composeModelMatrix;\nuniform bool pickFeatureIds;\n\n// Primitive attributes\nin vec3 positions;\nin vec3 normals;\nin vec3 colors;\nin vec2 texCoords;\nin vec4 uvRegions;\nin vec3 featureIdsPickingColors;\n\n// Instance attributes\nin vec4 instanceColors;\nin vec3 instancePickingColors;\nin mat3 instanceModelMatrix;\n\n// Outputs to fragment shader\nout vec2 vTexCoord;\nout vec3 cameraPosition;\nout vec3 normals_commonspace;\nout vec4 position_commonspace;\nout vec4 vColor;\n\nvec2 applyUVRegion(vec2 uv) {\n  #ifdef HAS_UV_REGIONS\n    // https://github.com/Esri/i3s-spec/blob/master/docs/1.7/geometryUVRegion.cmn.md\n    return fract(uv) * (uvRegions.zw - uvRegions.xy) + uvRegions.xy;\n  #else\n    return uv;\n  #endif\n}\n\nvoid main(void) {\n  vec2 uv = applyUVRegion(texCoords);\n  geometry.uv = uv;\n\n  if (pickFeatureIds) {\n    geometry.pickingColor = featureIdsPickingColors;\n  } else {\n    geometry.pickingColor = instancePickingColors;\n  }\n\n  vTexCoord = uv;\n  cameraPosition = project_uCameraPosition;\n  vColor = vec4(colors * instanceColors.rgb, instanceColors.a);\n\n  vec3 pos = (instanceModelMatrix * positions) * sizeScale;\n  vec3 projectedPosition = project_position(positions);\n  position_commonspace = vec4(projectedPosition, 1.0);\n  gl_Position = project_common_position_to_clipspace(position_commonspace);\n\n  geometry.position = position_commonspace;\n  normals_commonspace = project_normal(instanceModelMatrix * normals);\n  geometry.normal = normals_commonspace;\n\n  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n\n  #ifdef MODULE_PBR\n    // set PBR data\n    pbr_vPosition = geometry.position.xyz;\n    #ifdef HAS_NORMALS\n      pbr_vNormal = geometry.normal;\n    #endif\n\n    #ifdef HAS_UV\n      pbr_vUV = uv;\n    #else\n      pbr_vUV = vec2(0., 0.);\n    #endif\n    geometry.uv = pbr_vUV;\n  #endif\n\n  DECKGL_FILTER_COLOR(vColor, geometry);\n}\n`;\n", "export default `#version 300 es\n#define SHADER_NAME simple-mesh-layer-fs\n\nprecision highp float;\n\nuniform bool hasTexture;\nuniform sampler2D sampler;\nuniform bool flatShading;\nuniform float opacity;\n\nin vec2 vTexCoord;\nin vec3 cameraPosition;\nin vec3 normals_commonspace;\nin vec4 position_commonspace;\nin vec4 vColor;\n\nout vec4 fragColor;\n\nvoid main(void) {\n  \n#ifdef MODULE_PBR\n\n  fragColor = vColor * pbr_filterColor(vec4(0));\n  geometry.uv = pbr_vUV;\n  fragColor.a *= opacity;\n\n#else\n\n  geometry.uv = vTexCoord;\n\n  vec3 normal;\n  if (flatShading) {\n\n// NOTE(Tarek): This is necessary because\n// headless.gl reports the extension as\n// available but does not support it in\n// the shader.\n#ifdef DERIVATIVES_AVAILABLE\n    normal = normalize(cross(dFdx(position_commonspace.xyz), dFdy(position_commonspace.xyz)));\n#else\n    normal = vec3(0.0, 0.0, 1.0);\n#endif\n  } else {\n    normal = normals_commonspace;\n  }\n\n  vec4 color = hasTexture ? texture(sampler, vTexCoord) : vColor;\n  vec3 lightColor = lighting_getLightColor(color.rgb, cameraPosition, position_commonspace.xyz, normal);\n  fragColor = vec4(lightColor, color.a * opacity);\n\n#endif\n\n  DECKGL_FILTER_COLOR(fragColor, geometry);\n}\n`;\n", "import type {NumericArray} from '@math.gl/core';\nimport {GLTFMaterialParser} from '@luma.gl/experimental';\nimport {Model, pbr} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\nimport type {MeshAttribute, MeshAttributes} from '@loaders.gl/schema';\nimport type {UpdateParameters, DefaultProps, LayerContext} from '@deck.gl/core';\nimport {SimpleMeshLayer, SimpleMeshLayerProps} from '@deck.gl/mesh-layers';\n\nimport vs from './mesh-layer-vertex.glsl';\nimport fs from './mesh-layer-fragment.glsl';\n\nexport type Mesh = {\n  attributes: MeshAttributes;\n  indices?: MeshAttribute;\n};\n\nfunction validateGeometryAttributes(attributes) {\n  const hasColorAttribute = attributes.COLOR_0 || attributes.colors;\n  if (!hasColorAttribute) {\n    attributes.colors = {constant: true, value: new Float32Array([1, 1, 1])};\n  }\n}\n\nconst defaultProps: DefaultProps<MeshLayerProps> = {\n  pbrMaterial: {type: 'object', value: null},\n  featureIds: {type: 'array', value: null, optional: true}\n};\n\n/** All properties supported by MeshLayer. */\nexport type MeshLayerProps<DataT = any> = _MeshLayerProps & SimpleMeshLayerProps<DataT>;\n\n/** Properties added by MeshLayer. */\ntype _MeshLayerProps = {\n  /**\n   * PBR material object. _lighting must be pbr for this to work\n   */\n  pbrMaterial?: any; // TODO add type when converting Tile3DLayer\n\n  /**\n   * List of feature ids.\n   */\n  featureIds?: NumericArray | null;\n};\n\nexport default class MeshLayer<DataT = any, ExtraProps extends {} = {}> extends SimpleMeshLayer<\n  DataT,\n  Required<_MeshLayerProps> & ExtraProps\n> {\n  static layerName = 'MeshLayer';\n  static defaultProps = defaultProps;\n\n  getShaders() {\n    const shaders = super.getShaders();\n    const modules = shaders.modules;\n    modules.push(pbr);\n    return {...shaders, vs, fs};\n  }\n\n  initializeState() {\n    const {featureIds} = this.props;\n    super.initializeState();\n\n    const attributeManager = this.getAttributeManager();\n    if (featureIds) {\n      // attributeManager is always defined in a primitive layer\n      attributeManager!.add({\n        featureIdsPickingColors: {\n          type: GL.UNSIGNED_BYTE,\n          size: 3,\n          noAlloc: true,\n          // eslint-disable-next-line @typescript-eslint/unbound-method\n          update: this.calculateFeatureIdsPickingColors\n        }\n      });\n    }\n  }\n\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n\n    const {props, oldProps} = params;\n    if (props.pbrMaterial !== oldProps.pbrMaterial) {\n      this.updatePbrMaterialUniforms(props.pbrMaterial);\n    }\n  }\n\n  draw(opts) {\n    const {featureIds} = this.props;\n    if (!this.state.model) {\n      return;\n    }\n    this.state.model.setUniforms({\n      // Needed for PBR (TODO: find better way to get it)\n      // eslint-disable-next-line camelcase\n      u_Camera: this.state.model.getUniforms().project_uCameraPosition,\n      pickFeatureIds: Boolean(featureIds)\n    });\n\n    super.draw(opts);\n  }\n\n  protected getModel(mesh: Mesh): Model {\n    const {id, pbrMaterial} = this.props;\n    const materialParser = this.parseMaterial(pbrMaterial, mesh);\n    // Keep material parser to explicitly remove textures\n    this.setState({materialParser});\n    const shaders = this.getShaders();\n    validateGeometryAttributes(mesh.attributes);\n    const model = new Model(this.context.gl, {\n      ...this.getShaders(),\n      id,\n      geometry: mesh,\n      defines: {\n        ...shaders.defines,\n        ...materialParser?.defines,\n        HAS_UV_REGIONS: mesh.attributes.uvRegions\n      },\n      parameters: materialParser?.parameters,\n      isInstanced: true\n    });\n\n    return model;\n  }\n\n  updatePbrMaterialUniforms(pbrMaterial) {\n    const {model} = this.state;\n    if (model) {\n      const {mesh} = this.props;\n      const materialParser = this.parseMaterial(pbrMaterial, mesh);\n      // Keep material parser to explicitly remove textures\n      this.setState({materialParser});\n      model.setUniforms(materialParser.uniforms);\n    }\n  }\n\n  parseMaterial(pbrMaterial, mesh) {\n    const unlit = Boolean(\n      pbrMaterial.pbrMetallicRoughness && pbrMaterial.pbrMetallicRoughness.baseColorTexture\n    );\n\n    this.state.materialParser?.delete();\n\n    return new GLTFMaterialParser(this.context.gl, {\n      attributes: {NORMAL: mesh.attributes.normals, TEXCOORD_0: mesh.attributes.texCoords},\n      material: {unlit, ...pbrMaterial},\n      pbrDebug: false,\n      imageBasedLightingEnvironment: null,\n      lights: true,\n      useTangents: false\n    });\n  }\n\n  calculateFeatureIdsPickingColors(attribute) {\n    // This updater is only called if featureIds is not null\n    const featureIds = this.props.featureIds!;\n    const value = new Uint8ClampedArray(featureIds.length * attribute.size);\n\n    const pickingColor = [];\n    for (let index = 0; index < featureIds.length; index++) {\n      this.encodePickingColor(featureIds[index], pickingColor);\n\n      value[index * 3] = pickingColor[0];\n      value[index * 3 + 1] = pickingColor[1];\n      value[index * 3 + 2] = pickingColor[2];\n    }\n\n    attribute.value = value;\n  }\n\n  finalizeState(context: LayerContext) {\n    super.finalizeState(context);\n    this.state.materialParser?.delete();\n    this.setState({materialParser: null});\n  }\n}\n", "import GL from '@luma.gl/constants';\nimport {Geometry} from '@luma.gl/core';\n\nimport {\n  Accessor,\n  Color,\n  CompositeLayer,\n  CompositeLayerProps,\n  COORDINATE_SYSTEM,\n  FilterContext,\n  GetPickingInfoParams,\n  Layer,\n  LayersList,\n  log,\n  PickingInfo,\n  UpdateParameters,\n  Viewport,\n  DefaultProps\n} from '@deck.gl/core';\nimport {PointCloudLayer} from '@deck.gl/layers';\nimport {ScenegraphLayer} from '@deck.gl/mesh-layers';\nimport {default as MeshLayer} from '../mesh-layer/mesh-layer';\n\nimport {load} from '@loaders.gl/core';\nimport {MeshAttributes} from '@loaders.gl/schema';\nimport {Tileset3D, Tile3D, TILE_TYPE} from '@loaders.gl/tiles';\nimport {Tiles3DLoader} from '@loaders.gl/3d-tiles';\n\nconst SINGLE_DATA = [0];\n\nconst defaultProps: DefaultProps<Tile3DLayerProps> = {\n  getPointColor: {type: 'accessor', value: [0, 0, 0, 255]},\n  pointSize: 1.0,\n\n  // Disable async data loading (handling it in _loadTileSet)\n  data: '',\n  loader: Tiles3DLoader,\n\n  onTilesetLoad: {type: 'function', value: tileset3d => {}},\n  onTileLoad: {type: 'function', value: tileHeader => {}},\n  onTileUnload: {type: 'function', value: tileHeader => {}},\n  onTileError: {type: 'function', value: (tile, message, url) => {}},\n  _getMeshColor: {type: 'function', value: tileHeader => [255, 255, 255]}\n};\n\n/** All properties supported by Tile3DLayer */\nexport type Tile3DLayerProps<DataT = any> = _Tile3DLayerProps<DataT> & CompositeLayerProps;\n\n/** Props added by the Tile3DLayer */\ntype _Tile3DLayerProps<DataT> = {\n  data: string;\n  /** Color Accessor for point clouds. **/\n  getPointColor?: Accessor<DataT, Color>;\n\n  /** Global radius of all points in pixels. **/\n  pointSize?: number;\n\n  /** A loader which is used to decode the fetched tiles.\n   * @deprecated Use `loaders` instead\n   */\n  loader?: typeof Tiles3DLoader;\n\n  /** Called when Tileset JSON file is loaded. **/\n  onTilesetLoad?: (tile: Tileset3D) => void;\n\n  /** Called when a tile in the tileset hierarchy is loaded. **/\n  onTileLoad?: (tile: Tile3D) => void;\n\n  /** Called when a tile is unloaded. **/\n  onTileUnload?: (tile: Tile3D) => void;\n\n  /** Called when a tile fails to load. **/\n  onTileError?: (tile: Tile3D, url: string, message: string) => void;\n\n  /** (Experimental) Accessor to change color of mesh based on properties. **/\n  _getMeshColor?: (tile: Tile3D) => Color;\n};\n\n/** Render 3d tiles data formatted according to the [3D Tiles Specification](https://www.opengeospatial.org/standards/3DTiles) and [`ESRI I3S`](https://github.com/Esri/i3s-spec) */\nexport default class Tile3DLayer<DataT = any, ExtraPropsT extends {} = {}> extends CompositeLayer<\n  ExtraPropsT & Required<_Tile3DLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'Tile3DLayer';\n\n  state!: {\n    activeViewports: {};\n    frameNumber?: number;\n    lastUpdatedViewports: {[viewportId: string]: Viewport} | null;\n    layerMap: {[layerId: string]: any};\n    tileset3d: Tileset3D | null;\n  };\n\n  initializeState() {\n    if ('onTileLoadFail' in this.props) {\n      log.removed('onTileLoadFail', 'onTileError')();\n    }\n    // prop verification\n    this.state = {\n      layerMap: {},\n      tileset3d: null,\n      activeViewports: {},\n      lastUpdatedViewports: null\n    };\n  }\n\n  get isLoaded(): boolean {\n    const {tileset3d} = this.state;\n    return tileset3d !== null && tileset3d.isLoaded();\n  }\n\n  shouldUpdateState({changeFlags}: UpdateParameters<this>): boolean {\n    return changeFlags.somethingChanged;\n  }\n\n  updateState({props, oldProps, changeFlags}: UpdateParameters<this>): void {\n    if (props.data && props.data !== oldProps.data) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this._loadTileset(props.data);\n    }\n\n    if (changeFlags.viewportChanged) {\n      const {activeViewports} = this.state;\n      const viewportsNumber = Object.keys(activeViewports).length;\n      if (viewportsNumber) {\n        this._updateTileset(activeViewports);\n        this.state.lastUpdatedViewports = activeViewports;\n        this.state.activeViewports = {};\n      }\n    }\n    if (changeFlags.propsChanged) {\n      const {layerMap} = this.state;\n      for (const key in layerMap) {\n        layerMap[key].needsUpdate = true;\n      }\n    }\n  }\n\n  activateViewport(viewport: Viewport): void {\n    const {activeViewports, lastUpdatedViewports} = this.state;\n    this.internalState!.viewport = viewport;\n\n    activeViewports[viewport.id] = viewport;\n    const lastViewport = lastUpdatedViewports?.[viewport.id];\n    if (!lastViewport || !viewport.equals(lastViewport)) {\n      this.setChangeFlags({viewportChanged: true});\n      this.setNeedsUpdate();\n    }\n  }\n\n  getPickingInfo({info, sourceLayer}: GetPickingInfoParams) {\n    const sourceTile = sourceLayer && (sourceLayer.props as any).tile;\n    if (info.picked) {\n      info.object = sourceTile;\n    }\n    (info as any).sourceTile = sourceTile;\n\n    return info;\n  }\n\n  filterSubLayer({layer, viewport}: FilterContext): boolean {\n    // All sublayers will have a tile prop\n    const {tile} = layer.props as unknown as {tile: Tile3D};\n    const {id: viewportId} = viewport;\n    return tile.selected && tile.viewportIds.includes(viewportId);\n  }\n\n  protected _updateAutoHighlight(info: PickingInfo): void {\n    const sourceTile = (info as any).sourceTile;\n    const layerCache = this.state.layerMap[sourceTile?.id];\n    if (layerCache && layerCache.layer) {\n      layerCache.layer.updateAutoHighlight(info);\n    }\n  }\n\n  private async _loadTileset(tilesetUrl) {\n    const {loadOptions = {}} = this.props;\n\n    // TODO: deprecate `loader` in v9.0\n    // @ts-ignore\n    let loader = this.props.loader || this.props.loaders;\n    if (Array.isArray(loader)) {\n      loader = loader[0];\n    }\n\n    const options = {loadOptions: {...loadOptions}};\n    if (loader.preload) {\n      const preloadOptions = await loader.preload(tilesetUrl, loadOptions);\n\n      if (preloadOptions.headers) {\n        options.loadOptions.fetch = {\n          ...options.loadOptions.fetch,\n          headers: preloadOptions.headers\n        };\n      }\n      Object.assign(options, preloadOptions);\n    }\n    const tilesetJson = await load(tilesetUrl, loader, options.loadOptions);\n\n    const tileset3d = new Tileset3D(tilesetJson, {\n      onTileLoad: this._onTileLoad.bind(this),\n      onTileUnload: this._onTileUnload.bind(this),\n      onTileError: this.props.onTileError,\n      ...options\n    });\n\n    this.setState({\n      tileset3d,\n      layerMap: {}\n    });\n\n    this._updateTileset(this.state.activeViewports);\n    this.props.onTilesetLoad(tileset3d);\n  }\n\n  private _onTileLoad(tileHeader: Tile3D): void {\n    const {lastUpdatedViewports} = this.state;\n    this.props.onTileLoad(tileHeader);\n    this._updateTileset(lastUpdatedViewports);\n    this.setNeedsUpdate();\n  }\n\n  private _onTileUnload(tileHeader: Tile3D): void {\n    // Was cleaned up from tileset cache. We no longer need to track it.\n    delete this.state.layerMap[tileHeader.id];\n    this.props.onTileUnload(tileHeader);\n  }\n\n  private _updateTileset(viewports: {[viewportId: string]: Viewport} | null): void {\n    if (!viewports) {\n      return;\n    }\n    const {tileset3d} = this.state;\n    const {timeline} = this.context;\n    const viewportsNumber = Object.keys(viewports).length;\n    if (!timeline || !viewportsNumber || !tileset3d) {\n      return;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    tileset3d.selectTiles(Object.values(viewports)).then(frameNumber => {\n      const tilesetChanged = this.state.frameNumber !== frameNumber;\n      if (tilesetChanged) {\n        this.setState({frameNumber});\n      }\n    });\n  }\n\n  private _getSubLayer(\n    tileHeader: Tile3D,\n    oldLayer?: Layer\n  ): MeshLayer<DataT> | PointCloudLayer<DataT> | ScenegraphLayer<DataT> | null {\n    if (!tileHeader.content) {\n      return null;\n    }\n\n    switch (tileHeader.type) {\n      case TILE_TYPE.POINTCLOUD:\n        return this._makePointCloudLayer(tileHeader, oldLayer as PointCloudLayer<DataT>);\n      case TILE_TYPE.SCENEGRAPH:\n        return this._make3DModelLayer(tileHeader);\n      case TILE_TYPE.MESH:\n        return this._makeSimpleMeshLayer(tileHeader, oldLayer as MeshLayer<DataT>);\n      default:\n        throw new Error(`Tile3DLayer: Failed to render layer of type ${tileHeader.content.type}`);\n    }\n  }\n\n  private _makePointCloudLayer(\n    tileHeader: Tile3D,\n    oldLayer?: PointCloudLayer<DataT>\n  ): PointCloudLayer<DataT> | null {\n    const {attributes, pointCount, constantRGBA, cartographicOrigin, modelMatrix} =\n      tileHeader.content;\n    const {positions, normals, colors} = attributes;\n\n    if (!positions) {\n      return null;\n    }\n    const data = (oldLayer && oldLayer.props.data) || {\n      header: {\n        vertexCount: pointCount\n      },\n      attributes: {\n        POSITION: positions,\n        NORMAL: normals,\n        COLOR_0: colors\n      }\n    };\n\n    const {pointSize, getPointColor} = this.props;\n    const SubLayerClass = this.getSubLayerClass('pointcloud', PointCloudLayer);\n    return new SubLayerClass(\n      {\n        pointSize\n      },\n      this.getSubLayerProps({\n        id: 'pointcloud'\n      }),\n      {\n        id: `${this.id}-pointcloud-${tileHeader.id}`,\n        tile: tileHeader,\n        data,\n        coordinateSystem: COORDINATE_SYSTEM.METER_OFFSETS,\n        coordinateOrigin: cartographicOrigin,\n        modelMatrix,\n        getColor: constantRGBA || getPointColor,\n        _offset: 0\n      }\n    );\n  }\n\n  private _make3DModelLayer(tileHeader: Tile3D): ScenegraphLayer<DataT> {\n    const {gltf, instances, cartographicOrigin, modelMatrix} = tileHeader.content;\n\n    const SubLayerClass = this.getSubLayerClass('scenegraph', ScenegraphLayer);\n\n    return new SubLayerClass(\n      {\n        _lighting: 'pbr'\n      },\n      this.getSubLayerProps({\n        id: 'scenegraph'\n      }),\n      {\n        id: `${this.id}-scenegraph-${tileHeader.id}`,\n        tile: tileHeader,\n        data: instances || SINGLE_DATA,\n        scenegraph: gltf,\n\n        coordinateSystem: COORDINATE_SYSTEM.METER_OFFSETS,\n        coordinateOrigin: cartographicOrigin,\n        modelMatrix,\n        getTransformMatrix: instance => instance.modelMatrix,\n        getPosition: [0, 0, 0],\n        _offset: 0\n      }\n    );\n  }\n\n  private _makeSimpleMeshLayer(tileHeader: Tile3D, oldLayer?: MeshLayer<DataT>): MeshLayer<DataT> {\n    const content = tileHeader.content;\n    const {\n      attributes,\n      indices,\n      modelMatrix,\n      cartographicOrigin,\n      coordinateSystem = COORDINATE_SYSTEM.METER_OFFSETS,\n      material,\n      featureIds\n    } = content;\n    const {_getMeshColor} = this.props;\n\n    const geometry =\n      (oldLayer && oldLayer.props.mesh) ||\n      new Geometry({\n        drawMode: GL.TRIANGLES,\n        attributes: getMeshGeometry(attributes),\n        indices\n      });\n\n    const SubLayerClass = this.getSubLayerClass('mesh', MeshLayer);\n\n    return new SubLayerClass(\n      this.getSubLayerProps({\n        id: 'mesh'\n      }),\n      {\n        id: `${this.id}-mesh-${tileHeader.id}`,\n        tile: tileHeader,\n        mesh: geometry,\n        data: SINGLE_DATA,\n        getColor: _getMeshColor(tileHeader),\n        pbrMaterial: material,\n        modelMatrix,\n        coordinateOrigin: cartographicOrigin,\n        coordinateSystem,\n        featureIds,\n        _offset: 0\n      }\n    );\n  }\n\n  renderLayers(): Layer | null | LayersList {\n    const {tileset3d, layerMap} = this.state;\n    if (!tileset3d) {\n      return null;\n    }\n\n    // loaders.gl doesn't provide a type for tileset3d.tiles\n    return (tileset3d.tiles as Tile3D[])\n      .map(tile => {\n        const layerCache = (layerMap[tile.id] = layerMap[tile.id] || {tile});\n        let {layer} = layerCache;\n        if (tile.selected) {\n          // render selected tiles\n          if (!layer) {\n            // create layer\n            layer = this._getSubLayer(tile);\n          } else if (layerCache.needsUpdate) {\n            // props have changed, rerender layer\n            layer = this._getSubLayer(tile, layer);\n            layerCache.needsUpdate = false;\n          }\n        }\n        layerCache.layer = layer;\n        return layer;\n      })\n      .filter(Boolean);\n  }\n}\n\nfunction getMeshGeometry(contentAttributes: MeshAttributes): MeshAttributes {\n  const attributes: MeshAttributes = {};\n  attributes.positions = {\n    ...contentAttributes.positions,\n    value: new Float32Array(contentAttributes.positions.value)\n  };\n  if (contentAttributes.normals) {\n    attributes.normals = contentAttributes.normals;\n  }\n  if (contentAttributes.texCoords) {\n    attributes.texCoords = contentAttributes.texCoords;\n  }\n  if (contentAttributes.colors) {\n    attributes.colors = contentAttributes.colors;\n  }\n  if (contentAttributes.uvRegions) {\n    attributes.uvRegions = contentAttributes.uvRegions;\n  }\n  return attributes;\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Color,\n  CompositeLayer,\n  CompositeLayerProps,\n  DefaultProps,\n  Layer,\n  LayersList,\n  log,\n  Material,\n  Texture,\n  UpdateParameters\n} from '@deck.gl/core';\nimport {SimpleMeshLayer} from '@deck.gl/mesh-layers';\nimport {COORDINATE_SYSTEM} from '@deck.gl/core';\nimport type {MeshAttributes} from '@loaders.gl/schema';\nimport {TerrainWorkerLoader} from '@loaders.gl/terrain';\nimport TileLayer, {TileLayerProps} from '../tile-layer/tile-layer';\nimport type {Bounds, GeoBoundingBox, TileBoundingBox, TileLoadProps, ZRange} from '../tileset-2d';\nimport {Tile2DHeader, urlType, getURLFromTemplate, URLTemplate} from '../tileset-2d';\n\nconst DUMMY_DATA = [1];\n\nconst defaultProps: DefaultProps<TerrainLayerProps> = {\n  ...TileLayer.defaultProps,\n  // Image url that encodes height data\n  elevationData: urlType,\n  // Image url to use as texture\n  texture: {...urlType, optional: true},\n  // Martini error tolerance in meters, smaller number -> more detailed mesh\n  meshMaxError: {type: 'number', value: 4.0},\n  // Bounding box of the terrain image, [minX, minY, maxX, maxY] in world coordinates\n  bounds: {type: 'array', value: null, optional: true, compare: true},\n  // Color to use if texture is unavailable\n  color: {type: 'color', value: [255, 255, 255]},\n  // Object to decode height data, from (r, g, b) to height in meters\n  elevationDecoder: {\n    type: 'object',\n    value: {\n      rScaler: 1,\n      gScaler: 0,\n      bScaler: 0,\n      offset: 0\n    }\n  },\n  // Supply url to local terrain worker bundle. Only required if running offline and cannot access CDN.\n  workerUrl: '',\n  // Same as SimpleMeshLayer wireframe\n  wireframe: false,\n  material: true,\n\n  loaders: [TerrainWorkerLoader]\n};\n\n// Turns array of templates into a single string to work around shallow change\nfunction urlTemplateToUpdateTrigger(template: URLTemplate): string {\n  if (Array.isArray(template)) {\n    return template.join(';');\n  }\n  return template || '';\n}\n\ntype ElevationDecoder = {rScaler: number; gScaler: number; bScaler: number; offset: number};\ntype TerrainLoadProps = {\n  bounds: Bounds;\n  elevationData: string | null;\n  elevationDecoder: ElevationDecoder;\n  meshMaxError: number;\n  signal?: AbortSignal;\n};\n\ntype MeshAndTexture = [MeshAttributes | null, Texture | null];\n\n/** All properties supported by TerrainLayer */\nexport type TerrainLayerProps = _TerrainLayerProps &\n  TileLayerProps<MeshAndTexture> &\n  CompositeLayerProps;\n\n/** Props added by the TerrainLayer */\ntype _TerrainLayerProps = {\n  /** Image url that encodes height data. **/\n  elevationData: URLTemplate;\n\n  /** Image url to use as texture. **/\n  texture?: URLTemplate;\n\n  /** Martini error tolerance in meters, smaller number -> more detailed mesh. **/\n  meshMaxError?: number;\n\n  /** Bounding box of the terrain image, [minX, minY, maxX, maxY] in world coordinates. **/\n  bounds?: Bounds | null;\n\n  /** Color to use if texture is unavailable. **/\n  color?: Color;\n\n  /** Object to decode height data, from (r, g, b) to height in meters. **/\n  elevationDecoder?: ElevationDecoder;\n\n  /** Whether to render the mesh in wireframe mode. **/\n  wireframe?: boolean;\n\n  /** Material props for lighting effect. **/\n  material?: Material;\n\n  /**\n   * @deprecated Use `loadOptions.terrain.workerUrl` instead\n   */\n  workerUrl?: string;\n};\n\n/** Render mesh surfaces from height map images. */\nexport default class TerrainLayer<ExtraPropsT extends {} = {}> extends CompositeLayer<\n  ExtraPropsT & Required<_TerrainLayerProps & Required<TileLayerProps<MeshAndTexture>>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'TerrainLayer';\n\n  state!: {\n    isTiled?: boolean;\n    terrain: MeshAttributes;\n    zRange?: ZRange | null;\n  };\n\n  updateState({props, oldProps}: UpdateParameters<this>): void {\n    const elevationDataChanged = props.elevationData !== oldProps.elevationData;\n    if (elevationDataChanged) {\n      const {elevationData} = props;\n      const isTiled =\n        elevationData &&\n        (Array.isArray(elevationData) ||\n          (elevationData.includes('{x}') && elevationData.includes('{y}')));\n      this.setState({isTiled});\n    }\n\n    // Reloading for single terrain mesh\n    const shouldReload =\n      elevationDataChanged ||\n      props.meshMaxError !== oldProps.meshMaxError ||\n      props.elevationDecoder !== oldProps.elevationDecoder ||\n      props.bounds !== oldProps.bounds;\n\n    if (!this.state.isTiled && shouldReload) {\n      // When state.isTiled, elevationData cannot be an array\n      const terrain = this.loadTerrain(props as TerrainLoadProps);\n      this.setState({terrain});\n    }\n\n    // TODO - remove in v9\n    // @ts-ignore\n    if (props.workerUrl) {\n      log.removed('workerUrl', 'loadOptions.terrain.workerUrl')();\n    }\n  }\n\n  loadTerrain({\n    elevationData,\n    bounds,\n    elevationDecoder,\n    meshMaxError,\n    signal\n  }: TerrainLoadProps): Promise<MeshAttributes> | null {\n    if (!elevationData) {\n      return null;\n    }\n    let loadOptions = this.getLoadOptions();\n    loadOptions = {\n      ...loadOptions,\n      terrain: {\n        skirtHeight: this.state.isTiled ? meshMaxError * 2 : 0,\n        ...loadOptions?.terrain,\n        bounds,\n        meshMaxError,\n        elevationDecoder\n      }\n    };\n    const {fetch} = this.props;\n    return fetch(elevationData, {propName: 'elevationData', layer: this, loadOptions, signal});\n  }\n\n  getTiledTerrainData(tile: TileLoadProps): Promise<MeshAndTexture> {\n    const {elevationData, fetch, texture, elevationDecoder, meshMaxError} = this.props;\n    const {viewport} = this.context;\n    const dataUrl = getURLFromTemplate(elevationData, tile);\n    const textureUrl = texture && getURLFromTemplate(texture, tile);\n\n    const {signal} = tile;\n    let bottomLeft = [0, 0] as [number, number];\n    let topRight = [0, 0] as [number, number];\n    if (viewport.isGeospatial) {\n      const bbox = tile.bbox as GeoBoundingBox;\n      bottomLeft = viewport.projectFlat([bbox.west, bbox.south]);\n      topRight = viewport.projectFlat([bbox.east, bbox.north]);\n    } else {\n      const bbox = tile.bbox as Exclude<TileBoundingBox, GeoBoundingBox>;\n      bottomLeft = [bbox.left, bbox.bottom];\n      topRight = [bbox.right, bbox.top];\n    }\n    const bounds: Bounds = [bottomLeft[0], bottomLeft[1], topRight[0], topRight[1]];\n\n    const terrain = this.loadTerrain({\n      elevationData: dataUrl,\n      bounds,\n      elevationDecoder,\n      meshMaxError,\n      signal\n    });\n    const surface = textureUrl\n      ? // If surface image fails to load, the tile should still be displayed\n        fetch(textureUrl, {propName: 'texture', layer: this, loaders: [], signal}).catch(_ => null)\n      : Promise.resolve(null);\n\n    return Promise.all([terrain, surface]);\n  }\n\n  renderSubLayers(\n    props: TileLayerProps<MeshAndTexture> & {\n      id: string;\n      data: MeshAndTexture;\n      tile: Tile2DHeader<MeshAndTexture>;\n    }\n  ) {\n    const SubLayerClass = this.getSubLayerClass('mesh', SimpleMeshLayer);\n\n    const {color, wireframe, material} = this.props;\n    const {data} = props;\n\n    if (!data) {\n      return null;\n    }\n\n    const [mesh, texture] = data;\n\n    return new SubLayerClass(props, {\n      data: DUMMY_DATA,\n      mesh,\n      texture,\n      _instanced: false,\n      coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n      getPosition: d => [0, 0, 0],\n      getColor: color,\n      wireframe,\n      material\n    });\n  }\n\n  // Update zRange of viewport\n  onViewportLoad(tiles?: Tile2DHeader<MeshAndTexture>[]): void {\n    if (!tiles) {\n      return;\n    }\n\n    const {zRange} = this.state;\n    const ranges = tiles\n      .map(tile => tile.content)\n      .filter(Boolean)\n      .map(arr => {\n        // @ts-ignore\n        const bounds = arr[0].header.boundingBox;\n        return bounds.map(bound => bound[2]);\n      });\n    if (ranges.length === 0) {\n      return;\n    }\n    const minZ = Math.min(...ranges.map(x => x[0]));\n    const maxZ = Math.max(...ranges.map(x => x[1]));\n\n    if (!zRange || minZ < zRange[0] || maxZ > zRange[1]) {\n      this.setState({zRange: [minZ, maxZ]});\n    }\n  }\n\n  renderLayers(): Layer | null | LayersList {\n    const {\n      color,\n      material,\n      elevationData,\n      texture,\n      wireframe,\n      meshMaxError,\n      elevationDecoder,\n      tileSize,\n      maxZoom,\n      minZoom,\n      extent,\n      maxRequests,\n      onTileLoad,\n      onTileUnload,\n      onTileError,\n      maxCacheSize,\n      maxCacheByteSize,\n      refinementStrategy\n    } = this.props;\n\n    if (this.state.isTiled) {\n      return new TileLayer<MeshAndTexture>(\n        this.getSubLayerProps({\n          id: 'tiles'\n        }),\n        {\n          getTileData: this.getTiledTerrainData.bind(this),\n          renderSubLayers: this.renderSubLayers.bind(this),\n          updateTriggers: {\n            getTileData: {\n              elevationData: urlTemplateToUpdateTrigger(elevationData),\n              texture: urlTemplateToUpdateTrigger(texture),\n              meshMaxError,\n              elevationDecoder\n            }\n          },\n          onViewportLoad: this.onViewportLoad.bind(this),\n          zRange: this.state.zRange || null,\n          tileSize,\n          maxZoom,\n          minZoom,\n          extent,\n          maxRequests,\n          onTileLoad,\n          onTileUnload,\n          onTileError,\n          maxCacheSize,\n          maxCacheByteSize,\n          refinementStrategy\n        }\n      );\n    }\n\n    const SubLayerClass = this.getSubLayerClass('mesh', SimpleMeshLayer);\n    return new SubLayerClass(\n      this.getSubLayerProps({\n        id: 'mesh'\n      }),\n      {\n        data: DUMMY_DATA,\n        mesh: this.state.terrain,\n        texture,\n        _instanced: false,\n        getPosition: d => [0, 0, 0],\n        getColor: color,\n        material,\n        wireframe\n      }\n    );\n  }\n}\n", "// Copyright (c) 2015-2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n/* eslint-disable camelcase */\nimport {project} from '@deck.gl/core';\nimport type {Viewport, _ShaderModule as ShaderModule} from '@deck.gl/core';\n\nimport type {BrushingExtensionProps} from './brushing-extension';\n\ntype BrushingModuleSettings = {\n  // From layer context\n  viewport: Viewport;\n  mousePosition?: {x: number; y: number};\n} & BrushingExtensionProps;\n\nconst vs = `\n  uniform bool brushing_enabled;\n  uniform int brushing_target;\n  uniform vec2 brushing_mousePos;\n  uniform float brushing_radius;\n\n  #ifdef NON_INSTANCED_MODEL\n  attribute vec2 brushingTargets;\n  #else\n  attribute vec2 instanceBrushingTargets;\n  #endif\n\n  varying float brushing_isVisible;\n\n  bool brushing_isPointInRange(vec2 position) {\n    if (!brushing_enabled) {\n      return true;\n    }\n    vec2 source_commonspace = project_position(position);\n    vec2 target_commonspace = project_position(brushing_mousePos);\n    float distance = length((target_commonspace - source_commonspace) / project_uCommonUnitsPerMeter.xy);\n\n    return distance <= brushing_radius;\n  }\n\n  bool brushing_arePointsInRange(vec2 sourcePos, vec2 targetPos) {\n    return brushing_isPointInRange(sourcePos) || brushing_isPointInRange(targetPos);\n  }\n\n  void brushing_setVisible(bool visible) {\n    brushing_isVisible = float(visible);\n  }\n`;\n\nconst fs = `\n  uniform bool brushing_enabled;\n  varying float brushing_isVisible;\n`;\n\nconst TARGET = {\n  source: 0,\n  target: 1,\n  custom: 2,\n  source_target: 3\n};\n\nconst inject = {\n  'vs:DECKGL_FILTER_GL_POSITION': `\n    vec2 brushingTarget;\n    vec2 brushingSource;\n    if (brushing_target == 3) {\n      brushingTarget = geometry.worldPositionAlt.xy;\n      brushingSource = geometry.worldPosition.xy;\n    } else if (brushing_target == 0) {\n      brushingTarget = geometry.worldPosition.xy;\n    } else if (brushing_target == 1) {\n      brushingTarget = geometry.worldPositionAlt.xy;\n    } else {\n      #ifdef NON_INSTANCED_MODEL\n      brushingTarget = brushingTargets;\n      #else\n      brushingTarget = instanceBrushingTargets;\n      #endif\n    }\n    bool visible;\n    if (brushing_target == 3) {\n      visible = brushing_arePointsInRange(brushingSource, brushingTarget);\n    } else {\n      visible = brushing_isPointInRange(brushingTarget);\n    }\n    brushing_setVisible(visible);\n  `,\n\n  'fs:DECKGL_FILTER_COLOR': `\n    if (brushing_enabled && brushing_isVisible < 0.5) {\n      discard;\n    }\n  `\n};\n\nexport default {\n  name: 'brushing',\n  dependencies: [project],\n  vs,\n  fs,\n  inject,\n  getUniforms: (opts?: BrushingModuleSettings | {}): Record<string, any> => {\n    if (!opts || !('viewport' in opts)) {\n      return {};\n    }\n    const {\n      brushingEnabled = true,\n      brushingRadius = 10000,\n      brushingTarget = 'source',\n      mousePosition,\n      viewport\n    } = opts;\n    return {\n      brushing_enabled: Boolean(\n        brushingEnabled && mousePosition && viewport.containsPixel(mousePosition)\n      ),\n      brushing_radius: brushingRadius,\n      brushing_target: TARGET[brushingTarget] || 0,\n      brushing_mousePos: mousePosition\n        ? viewport.unproject([mousePosition.x - viewport.x, mousePosition.y - viewport.y])\n        : [0, 0]\n    };\n  }\n} as ShaderModule<BrushingModuleSettings>;\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {LayerExtension} from '@deck.gl/core';\nimport shaderModule from './shader-module';\n\nimport type {Layer, LayerContext, Accessor} from '@deck.gl/core';\n\nconst defaultProps = {\n  getBrushingTarget: {type: 'accessor', value: [0, 0]},\n\n  brushingTarget: 'source',\n  brushingEnabled: true,\n  brushingRadius: 10000\n};\n\nexport type BrushingExtensionProps<DataT = any> = {\n  /**\n   * Called to retrieve an arbitrary position for each object that it will be filtered by.\n   * Only effective if `brushingTarget` is set to `custom`.\n   */\n  getBrushingTarget?: Accessor<DataT, [number, number]>;\n  /**\n   * Enable/disable brushing. If brushing is disabled, all objects are rendered.\n   * @default true\n   */\n  brushingEnabled?: boolean;\n  /**\n   * The position used to filter each object by.\n   */\n  brushingTarget?: 'source' | 'target' | 'source_target' | 'custom';\n  /** The brushing radius centered at the pointer, in meters. If a data object is within this circle, it is rendered; otherwise it is hidden.\n   * @default 10000\n   */\n  brushingRadius?: number;\n};\n\n/** Adds GPU-based data brushing functionalities to layers. It allows the layer to show/hide objects based on the current pointer position. */\nexport default class BrushingExtension extends LayerExtension {\n  static defaultProps = defaultProps;\n  static extensionName = 'BrushingExtension';\n\n  getShaders(): any {\n    return {\n      modules: [shaderModule]\n    };\n  }\n\n  initializeState(this: Layer<BrushingExtensionProps>, context: LayerContext, extension: this) {\n    const attributeManager = this.getAttributeManager();\n    if (attributeManager) {\n      attributeManager.add({\n        brushingTargets: {\n          size: 2,\n          accessor: 'getBrushingTarget',\n          shaderAttributes: {\n            brushingTargets: {\n              divisor: 0\n            },\n            instanceBrushingTargets: {\n              divisor: 1\n            }\n          }\n        }\n      });\n    }\n\n    // Trigger redraw when mouse moves\n    // TODO - expose this in a better way\n    this.state.onMouseMove = () => {\n      this.getCurrentLayer()?.setNeedsRedraw();\n    };\n    if (context.deck) {\n      // @ts-expect-error (2446) accessing protected property\n      context.deck.eventManager.on({\n        pointermove: this.state.onMouseMove,\n        pointerleave: this.state.onMouseMove\n      });\n    }\n  }\n\n  finalizeState(this: Layer<BrushingExtensionProps>, context: LayerContext, extension: this) {\n    // Remove event listeners\n    if (context.deck) {\n      // @ts-expect-error (2446) accessing protected property\n      context.deck.eventManager.off({\n        pointermove: this.state.onMouseMove,\n        pointerleave: this.state.onMouseMove\n      });\n    }\n  }\n}\n", "import {_ShaderModule as ShaderModule} from '@deck.gl/core';\n\nimport type {DataFilterExtensionProps} from './data-filter-extension';\n\n/*\n * data filter shader module\n */\nconst vs = `\nuniform DATAFILTER_TYPE filter_min;\nuniform DATAFILTER_TYPE filter_softMin;\nuniform DATAFILTER_TYPE filter_softMax;\nuniform DATAFILTER_TYPE filter_max;\nuniform bool filter_useSoftMargin;\nuniform bool filter_enabled;\nuniform bool filter_transformSize;\n\n#ifdef NON_INSTANCED_MODEL\n  #define DATAFILTER_ATTRIB filterValues\n  #define DATAFILTER_ATTRIB_64LOW filterValues64Low\n#else\n  #define DATAFILTER_ATTRIB instanceFilterValues\n  #define DATAFILTER_ATTRIB_64LOW instanceFilterValues64Low\n#endif\n\nattribute DATAFILTER_TYPE DATAFILTER_ATTRIB;\n#ifdef DATAFILTER_DOUBLE\n  attribute DATAFILTER_TYPE DATAFILTER_ATTRIB_64LOW;\n\n  uniform DATAFILTER_TYPE filter_min64High;\n  uniform DATAFILTER_TYPE filter_max64High;\n#endif\n\nvarying float dataFilter_value;\n\nfloat dataFilter_reduceValue(float value) {\n  return value;\n}\nfloat dataFilter_reduceValue(vec2 value) {\n  return min(value.x, value.y);\n}\nfloat dataFilter_reduceValue(vec3 value) {\n  return min(min(value.x, value.y), value.z);\n}\nfloat dataFilter_reduceValue(vec4 value) {\n  return min(min(value.x, value.y), min(value.z, value.w));\n}\nvoid dataFilter_setValue(DATAFILTER_TYPE valueFromMin, DATAFILTER_TYPE valueFromMax) {\n  if (filter_enabled) {\n    if (filter_useSoftMargin) {\n      dataFilter_value = dataFilter_reduceValue(\n        smoothstep(filter_min, filter_softMin, valueFromMin) *\n        (1.0 - smoothstep(filter_softMax, filter_max, valueFromMax))\n      );\n    } else {\n      dataFilter_value = dataFilter_reduceValue(\n        step(filter_min, valueFromMin) * step(valueFromMax, filter_max)\n      );\n    }\n  } else {\n    dataFilter_value = 1.0;\n  }\n}\n`;\n\nconst fs = `\nuniform bool filter_transformColor;\nvarying float dataFilter_value;\n`;\n\ntype DataFilterModuleSettings = {\n  extensions: any[]; // used to detect if layer props are present\n} & DataFilterExtensionProps;\n\n/* eslint-disable camelcase */\nfunction getUniforms(opts?: DataFilterModuleSettings | {}): Record<string, any> {\n  if (!opts || !('extensions' in opts)) {\n    return {};\n  }\n  const {\n    filterRange = [-1, 1],\n    filterEnabled = true,\n    filterTransformSize = true,\n    filterTransformColor = true\n  } = opts;\n  const filterSoftRange = opts.filterSoftRange || filterRange;\n\n  return {\n    ...(Number.isFinite(filterRange[0])\n      ? {\n          filter_min: filterRange[0],\n          filter_softMin: filterSoftRange[0],\n          filter_softMax: filterSoftRange[1],\n          filter_max: filterRange[1]\n        }\n      : {\n          filter_min: filterRange.map(r => r[0]),\n          filter_softMin: filterSoftRange.map(r => r[0]),\n          filter_softMax: filterSoftRange.map(r => r[1]),\n          filter_max: filterRange.map(r => r[1])\n        }),\n    filter_enabled: filterEnabled,\n    filter_useSoftMargin: Boolean(opts.filterSoftRange),\n    filter_transformSize: filterEnabled && filterTransformSize,\n    filter_transformColor: filterEnabled && filterTransformColor\n  };\n}\n\nfunction getUniforms64(opts?: DataFilterModuleSettings | {}): Record<string, any> {\n  if (!opts || !('extensions' in opts)) {\n    return {};\n  }\n  const uniforms = getUniforms(opts);\n  if (Number.isFinite(uniforms.filter_min)) {\n    const min64High = Math.fround(uniforms.filter_min);\n    uniforms.filter_min -= min64High;\n    uniforms.filter_softMin -= min64High;\n    uniforms.filter_min64High = min64High;\n\n    const max64High = Math.fround(uniforms.filter_max);\n    uniforms.filter_max -= max64High;\n    uniforms.filter_softMax -= max64High;\n    uniforms.filter_max64High = max64High;\n  } else {\n    const min64High = uniforms.filter_min.map(Math.fround);\n    uniforms.filter_min = uniforms.filter_min.map((x, i) => x - min64High[i]);\n    uniforms.filter_softMin = uniforms.filter_softMin.map((x, i) => x - min64High[i]);\n    uniforms.filter_min64High = min64High;\n\n    const max64High = uniforms.filter_max.map(Math.fround);\n    uniforms.filter_max = uniforms.filter_max.map((x, i) => x - max64High[i]);\n    uniforms.filter_softMax = uniforms.filter_softMax.map((x, i) => x - max64High[i]);\n    uniforms.filter_max64High = max64High;\n  }\n  return uniforms;\n}\n\nconst inject = {\n  'vs:#main-start': `\n    #ifdef DATAFILTER_DOUBLE\n      dataFilter_setValue(\n        DATAFILTER_ATTRIB - filter_min64High + DATAFILTER_ATTRIB_64LOW,\n        DATAFILTER_ATTRIB - filter_max64High + DATAFILTER_ATTRIB_64LOW\n      );\n    #else\n      dataFilter_setValue(DATAFILTER_ATTRIB, DATAFILTER_ATTRIB);\n    #endif\n  `,\n\n  'vs:#main-end': `\n    if (dataFilter_value == 0.0) {\n      gl_Position = vec4(0.);\n    }\n  `,\n\n  'vs:DECKGL_FILTER_SIZE': `\n    if (filter_transformSize) {\n      size = size * dataFilter_value;\n    }\n  `,\n\n  'fs:DECKGL_FILTER_COLOR': `\n    if (dataFilter_value == 0.0) discard;\n    if (filter_transformColor) {\n      color.a *= dataFilter_value;\n    }\n  `\n};\n\nexport const shaderModule: ShaderModule<DataFilterModuleSettings> = {\n  name: 'data-filter',\n  vs,\n  fs,\n  inject,\n  getUniforms\n};\n\nexport const shaderModule64: ShaderModule<DataFilterModuleSettings> = {\n  name: 'data-filter-fp64',\n  vs,\n  fs,\n  inject,\n  getUniforms: getUniforms64\n};\n", "import {Model, Texture2D, Framebuffer, isWebGL2} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\n\nconst AGGREGATE_VS = `\\\n#define SHADER_NAME data-filter-vertex-shader\n\n#ifdef FLOAT_TARGET\n  attribute float filterIndices;\n  attribute float filterPrevIndices;\n#else\n  attribute vec2 filterIndices;\n  attribute vec2 filterPrevIndices;\n#endif\n\nvarying vec4 vColor;\nconst float component = 1.0 / 255.0;\n\nvoid main() {\n  #ifdef FLOAT_TARGET\n    dataFilter_value *= float(filterIndices != filterPrevIndices);\n    gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\n    vColor = vec4(0.0, 0.0, 0.0, 1.0);\n  #else\n    // Float texture is not supported: pack result into 4 channels x 256 px x 64px\n    dataFilter_value *= float(filterIndices.x != filterPrevIndices.x);\n    float col = filterIndices.x;\n    float row = filterIndices.y * 4.0;\n    float channel = floor(row);\n    row = fract(row);\n    vColor = component * vec4(bvec4(channel == 0.0, channel == 1.0, channel == 2.0, channel == 3.0));\n    gl_Position = vec4(col * 2.0 - 1.0, row * 2.0 - 1.0, 0.0, 1.0);\n  #endif\n  gl_PointSize = 1.0;\n}\n`;\n\nconst AGGREGATE_FS = `\\\n#define SHADER_NAME data-filter-fragment-shader\nprecision highp float;\n\nvarying vec4 vColor;\n\nvoid main() {\n  if (dataFilter_value < 0.5) {\n    discard;\n  }\n  gl_FragColor = vColor;\n}\n`;\n\nexport function supportsFloatTarget(gl: WebGLRenderingContext): boolean {\n  // https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_best_practices#Support_for_float_textures_doesnt_mean_you_can_render_into_them!\n  return Boolean(\n    gl.getExtension('EXT_float_blend') &&\n      // WebGL 2\n      (gl.getExtension('EXT_color_buffer_float') ||\n        // WebGL 1\n        gl.getExtension('WEBGL_color_buffer_float'))\n  );\n}\n\n// A 1x1 framebuffer object that encodes the total count of filtered items\nexport function getFramebuffer(gl: WebGLRenderingContext, useFloatTarget: boolean): Framebuffer {\n  if (useFloatTarget) {\n    return new Framebuffer(gl, {\n      width: 1,\n      height: 1,\n      attachments: {\n        [GL.COLOR_ATTACHMENT0]: new Texture2D(gl, {\n          format: isWebGL2(gl) ? GL.RGBA32F : GL.RGBA,\n          type: GL.FLOAT,\n          mipmaps: false\n        })\n      }\n    });\n  }\n  return new Framebuffer(gl, {\n    width: 256,\n    height: 64,\n    depth: false\n  });\n}\n\n// Increments the counter based on dataFilter_value\nexport function getModel(\n  gl: WebGLRenderingContext,\n  shaderOptions: any,\n  useFloatTarget: boolean\n): Model {\n  shaderOptions.defines.NON_INSTANCED_MODEL = 1;\n  if (useFloatTarget) {\n    shaderOptions.defines.FLOAT_TARGET = 1;\n  }\n\n  return new Model(gl, {\n    id: 'data-filter-aggregation-model',\n    vertexCount: 1,\n    isInstanced: false,\n    drawMode: GL.POINTS,\n    vs: AGGREGATE_VS,\n    fs: AGGREGATE_FS,\n    ...shaderOptions\n  });\n}\n\nexport const parameters = {\n  blend: true,\n  blendFunc: [GL.ONE, GL.ONE, GL.ONE, GL.ONE],\n  blendEquation: [GL.FUNC_ADD, GL.FUNC_ADD],\n  depthTest: false\n};\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {LayerExtension} from '@deck.gl/core';\nimport {shaderModule, shaderModule64} from './shader-module';\nimport * as aggregator from './aggregator';\nimport {readPixelsToArray, clear} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\n\nimport type {Layer, LayerContext, Accessor, UpdateParameters} from '@deck.gl/core';\n\nconst defaultProps = {\n  getFilterValue: {type: 'accessor', value: 0},\n  onFilteredItemsChange: {type: 'function', value: null, optional: true},\n\n  filterEnabled: true,\n  filterRange: [-1, 1],\n  filterSoftRange: null,\n  filterTransformSize: true,\n  filterTransformColor: true\n};\n\nexport type DataFilterExtensionProps<DataT = any> = {\n  /**\n   * Accessor to retrieve the value for each object that it will be filtered by.\n   * Returns either a number (if `filterSize: 1`) or an array of numbers.\n   */\n  getFilterValue?: Accessor<DataT, number | number[]>;\n  /**\n   * Enable/disable the data filter. If the data filter is disabled, all objects are rendered.\n   * @default true\n   */\n  filterEnabled?: boolean;\n  /**\n   * The [min, max] bounds which defines whether an object should be rendered.\n   * If an object's filtered value is within the bounds, the object will be rendered; otherwise it will be hidden.\n   * @default [-1, 1]\n   */\n  filterRange?: [number, number] | [number, number][];\n  /**\n   * If specified, objects will be faded in/out instead of abruptly shown/hidden.\n   * When the filtered value is outside of the bounds defined by `filterSoftRange` but still within the bounds defined by `filterRange`, the object will be rendered as \"faded.\"\n   * @default null\n   */\n  filterSoftRange?: [number, number] | [number, number][] | null;\n  /**\n   * When an object is \"faded\", manipulate its size so that it appears smaller or thinner. Only works if `filterSoftRange` is specified.\n   * @default true\n   */\n  filterTransformSize?: boolean;\n  /**\n   * When an object is \"faded\", manipulate its opacity so that it appears more translucent. Only works if `filterSoftRange` is specified.\n   * @default true\n   */\n  filterTransformColor?: boolean;\n  /**\n   * Only called if the `countItems` option is enabled.\n   */\n  onFilteredItemsChange?: (evt: {\n    /** The id of the source layer. */\n    id: string;\n    /** The number of data objects that pass the filter. */\n    count: number;\n  }) => void;\n};\n\ntype DataFilterExtensionOptions = {\n  /**\n   * The size of the filter (number of columns to filter by). The data filter can show/hide data based on 1-4 numeric properties of each object.\n   * @default 1\n   */\n  filterSize: number;\n  /**\n   * Use 64-bit precision instead of 32-bit.\n   * @default false\n   */\n  fp64: boolean;\n  /**\n   * If `true`, reports the number of filtered objects with the `onFilteredItemsChange` callback.\n   * @default `false`.\n   */\n  countItems: boolean;\n};\n\nconst DATA_TYPE_FROM_SIZE = {\n  1: 'float',\n  2: 'vec2',\n  3: 'vec3',\n  4: 'vec4'\n};\n\n/** Adds GPU-based data filtering functionalities to layers. It allows the layer to show/hide objects based on user-defined properties. */\nexport default class DataFilterExtension extends LayerExtension<DataFilterExtensionOptions> {\n  static defaultProps = defaultProps;\n  static extensionName = 'DataFilterExtension';\n\n  constructor({\n    filterSize = 1,\n    fp64 = false,\n    countItems = false\n  }: Partial<DataFilterExtensionOptions> = {}) {\n    if (!DATA_TYPE_FROM_SIZE[filterSize]) {\n      throw new Error('filterSize out of range');\n    }\n\n    super({filterSize, fp64, countItems});\n  }\n\n  getShaders(this: Layer<DataFilterExtensionProps>, extension: this): any {\n    const {filterSize, fp64} = extension.opts;\n\n    return {\n      modules: [fp64 ? shaderModule64 : shaderModule],\n      defines: {\n        DATAFILTER_TYPE: DATA_TYPE_FROM_SIZE[filterSize],\n        DATAFILTER_DOUBLE: Boolean(fp64)\n      }\n    };\n  }\n\n  initializeState(this: Layer<DataFilterExtensionProps>, context: LayerContext, extension: this) {\n    const attributeManager = this.getAttributeManager();\n    if (attributeManager) {\n      attributeManager.add({\n        filterValues: {\n          size: extension.opts.filterSize,\n          type: extension.opts.fp64 ? GL.DOUBLE : GL.FLOAT,\n          accessor: 'getFilterValue',\n          shaderAttributes: {\n            filterValues: {\n              divisor: 0\n            },\n            instanceFilterValues: {\n              divisor: 1\n            }\n          }\n        }\n      });\n    }\n\n    const {gl} = this.context;\n    if (attributeManager && extension.opts.countItems) {\n      const useFloatTarget = aggregator.supportsFloatTarget(gl);\n      // This attribute is needed for variable-width data, e.g. Path, SolidPolygon, Text\n      // The vertex shader checks if a vertex has the same \"index\" as the previous vertex\n      // so that we only write one count cross multiple vertices of the same object\n      attributeManager.add({\n        filterIndices: {\n          size: useFloatTarget ? 1 : 2,\n          vertexOffset: 1,\n          type: GL.UNSIGNED_BYTE,\n          normalized: true,\n          accessor: (object, {index}) => {\n            const i = object && object.__source ? object.__source.index : index;\n            return useFloatTarget ? (i + 1) % 255 : [(i + 1) % 255, Math.floor(i / 255) % 255];\n          },\n          shaderAttributes: {\n            filterPrevIndices: {\n              vertexOffset: 0\n            },\n            filterIndices: {\n              vertexOffset: 1\n            }\n          }\n        }\n      });\n\n      const filterFBO = aggregator.getFramebuffer(gl, useFloatTarget);\n      const filterModel = aggregator.getModel(\n        gl,\n        extension.getShaders.call(this, extension),\n        useFloatTarget\n      );\n      this.setState({filterFBO, filterModel});\n    }\n  }\n\n  updateState(\n    this: Layer<DataFilterExtensionProps>,\n    {props, oldProps}: UpdateParameters<Layer<DataFilterExtensionProps>>\n  ) {\n    if (this.state.filterModel) {\n      const attributeManager = this.getAttributeManager();\n      const filterNeedsUpdate =\n        // attributeManager must be defined for filterModel to be set\n        attributeManager!.attributes.filterValues.needsUpdate() ||\n        props.filterEnabled !== oldProps.filterEnabled ||\n        props.filterRange !== oldProps.filterRange ||\n        props.filterSoftRange !== oldProps.filterSoftRange;\n      if (filterNeedsUpdate) {\n        this.setState({filterNeedsUpdate});\n      }\n    }\n  }\n\n  draw(this: Layer<DataFilterExtensionProps>, params: any, extension: this) {\n    const {filterFBO, filterModel, filterNeedsUpdate} = this.state;\n    const {onFilteredItemsChange} = this.props;\n    if (filterNeedsUpdate && onFilteredItemsChange && filterModel) {\n      const {\n        attributes: {filterValues, filterIndices}\n      } = this.getAttributeManager()!;\n      filterModel.setVertexCount(this.getNumInstances());\n\n      const {gl} = this.context;\n      clear(gl, {framebuffer: filterFBO, color: [0, 0, 0, 0]});\n\n      filterModel\n        .updateModuleSettings(params.moduleParameters)\n        .setAttributes({\n          ...filterValues.getShaderAttributes(),\n          ...(filterIndices && filterIndices.getShaderAttributes())\n        })\n        .draw({\n          framebuffer: filterFBO,\n          parameters: {\n            ...aggregator.parameters,\n            viewport: [0, 0, filterFBO.width, filterFBO.height]\n          }\n        });\n      const color = readPixelsToArray(filterFBO);\n      let count = 0;\n      for (let i = 0; i < color.length; i++) {\n        count += color[i];\n      }\n      onFilteredItemsChange({id: this.id, count});\n\n      this.state.filterNeedsUpdate = false;\n    }\n  }\n\n  finalizeState(this: Layer<DataFilterExtensionProps>) {\n    const {filterFBO, filterModel} = this.state;\n    if (filterFBO) {\n      filterFBO.color.delete();\n      filterFBO.delete();\n      filterModel.delete();\n    }\n  }\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n\nconst vec2 WORLD_SCALE_FP64 = vec2(81.4873275756836, 0.0000032873668232014097);\n\nuniform vec2 project_uViewProjectionMatrixFP64[16];\n\n// longitude: lnglat_fp64.xy; latitude: lnglat_fp64.zw\nvoid mercatorProject_fp64(vec4 lnglat_fp64, out vec2 out_val[2]) {\n\n#if defined(NVIDIA_FP64_WORKAROUND)\n  out_val[0] = sum_fp64(radians_fp64(lnglat_fp64.xy), PI_FP64 * ONE);\n#else\n  out_val[0] = sum_fp64(radians_fp64(lnglat_fp64.xy), PI_FP64);\n#endif\n  out_val[1] = sum_fp64(PI_FP64,\n    log_fp64(tan_fp64(sum_fp64(PI_4_FP64, radians_fp64(lnglat_fp64.zw) / 2.0))));\n  return;\n}\n\nvoid project_position_fp64(vec4 position_fp64, out vec2 out_val[2]) {\n  vec2 pos_fp64[2];\n  mercatorProject_fp64(position_fp64, pos_fp64);\n  out_val[0] = mul_fp64(pos_fp64[0], WORLD_SCALE_FP64);\n  out_val[1] = mul_fp64(pos_fp64[1], WORLD_SCALE_FP64);\n\n  return;\n}\n\nvoid project_position_fp64(vec2 position, vec2 position64xyLow, out vec2 out_val[2]) {\n  vec4 position64xy = vec4(\n    position.x, position64xyLow.x,\n    position.y, position64xyLow.y);\n\n  project_position_fp64(position64xy, out_val);\n}\n\nvec4 project_common_position_to_clipspace_fp64(vec2 vertex_pos_modelspace[4]) {\n  vec2 vertex_pos_clipspace[4];\n  mat4_vec4_mul_fp64(project_uViewProjectionMatrixFP64, vertex_pos_modelspace,\n    vertex_pos_clipspace);\n  return vec4(\n    vertex_pos_clipspace[0].x,\n    vertex_pos_clipspace[1].x,\n    vertex_pos_clipspace[2].x,\n    vertex_pos_clipspace[3].x\n    );\n}\n\nvec4 project_position_to_clipspace(\n  vec3 position, vec3 position64xyLow, vec3 offset, out vec4 commonPosition\n) {\n  // This is the local offset to the instance position\n  vec2 offset64[4];\n  vec4_fp64(vec4(offset, 0.0), offset64);\n\n  float z = project_size(position.z);\n\n  // Apply web mercator projection (depends on coordinate system imn use)\n  vec2 projectedPosition64xy[2];\n  project_position_fp64(position.xy, position64xyLow.xy, projectedPosition64xy);\n\n  vec2 commonPosition64[4];\n  commonPosition64[0] = sum_fp64(offset64[0], projectedPosition64xy[0]);\n  commonPosition64[1] = sum_fp64(offset64[1], projectedPosition64xy[1]);\n  commonPosition64[2] = sum_fp64(offset64[2], vec2(z, 0.0));\n  commonPosition64[3] = vec2(1.0, 0.0);\n\n  commonPosition = vec4(projectedPosition64xy[0].x, projectedPosition64xy[1].x, z, 1.0);\n\n  return project_common_position_to_clipspace_fp64(commonPosition64);\n}\n\nvec4 project_position_to_clipspace(\n  vec3 position, vec3 position64xyLow, vec3 offset\n) {\n  vec4 commonPosition;\n  return project_position_to_clipspace(\n    position, position64xyLow, offset, commonPosition\n  );\n}\n`;\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable camelcase */\nimport {fp64} from '@luma.gl/shadertools';\nconst {fp64ify, fp64ifyMatrix4} = fp64;\nimport {project, _memoize as memoize} from '@deck.gl/core';\n\nimport type {Viewport, _ShaderModule as ShaderModule} from '@deck.gl/core';\nimport project64Shader from './project64.glsl';\n\ntype Project64ModuleSettings = {\n  viewport: Viewport;\n};\n\nexport default {\n  name: 'project64',\n  dependencies: [project, fp64],\n  vs: project64Shader,\n  getUniforms\n} as ShaderModule<Project64ModuleSettings>;\n\n// TODO - this module should calculate the 64 bit uniforms\n// It is currently done by project to minimize duplicated work\n\nconst getMemoizedUniforms = memoize(calculateUniforms);\n\nfunction getUniforms(opts?: Project64ModuleSettings | {}): Record<string, any> {\n  if (opts && 'viewport' in opts) {\n    const {viewProjectionMatrix, scale} = opts.viewport;\n    // We only need to update fp64 uniforms if fp32 projection is being updated\n    return getMemoizedUniforms({viewProjectionMatrix, scale});\n  }\n  return {};\n}\n\nfunction calculateUniforms({\n  viewProjectionMatrix,\n  scale\n}: {\n  viewProjectionMatrix: number[];\n  scale: number;\n}) {\n  const glViewProjectionMatrixFP64 = fp64ifyMatrix4(viewProjectionMatrix);\n  const scaleFP64 = fp64ify(scale);\n\n  return {\n    project_uViewProjectionMatrixFP64: glViewProjectionMatrixFP64,\n    project64_uViewProjectionMatrix: glViewProjectionMatrixFP64,\n    project64_uScale: scaleFP64\n  };\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {LayerExtension, COORDINATE_SYSTEM} from '@deck.gl/core';\nimport project64 from './project64';\n\nimport type {Layer} from '@deck.gl/core';\n\n/** @deprecated Adds the legacy 64-bit precision to geospatial layers. */\nexport default class Fp64Extension extends LayerExtension {\n  static extensionName = 'Fp64Extension';\n\n  getShaders(this: Layer): any {\n    const {coordinateSystem} = this.props;\n    if (\n      coordinateSystem !== COORDINATE_SYSTEM.LNGLAT &&\n      coordinateSystem !== COORDINATE_SYSTEM.DEFAULT\n    ) {\n      throw new Error('fp64: coordinateSystem must be LNGLAT');\n    }\n\n    return {\n      modules: [project64]\n    };\n  }\n}\n", "export const dashShaders = {\n  inject: {\n    'vs:#decl': `\nattribute vec2 instanceDashArrays;\nattribute float instanceDashOffsets;\nvarying vec2 vDashArray;\nvarying float vDashOffset;\n`,\n\n    'vs:#main-end': `\nvDashArray = instanceDashArrays;\nvDashOffset = instanceDashOffsets / width.x;\n`,\n\n    'fs:#decl': `\nuniform float dashAlignMode;\nuniform float capType;\nuniform bool dashGapPickable;\nvarying vec2 vDashArray;\nvarying float vDashOffset;\n\nfloat round(float x) {\n  return floor(x + 0.5);\n}\n`,\n\n    // if given position is in the gap part of the dashed line\n    // dashArray.x: solid stroke length, relative to width\n    // dashArray.y: gap length, relative to width\n    // alignMode:\n    // 0 - no adjustment\n    // o----     ----     ----     ---- o----     -o----     ----     o\n    // 1 - stretch to fit, draw half dash at each end for nicer joints\n    // o--    ----    ----    ----    --o--      --o--     ----     --o\n    'fs:#main-start': `\n  float solidLength = vDashArray.x;\n  float gapLength = vDashArray.y;\n  float unitLength = solidLength + gapLength;\n\n  float offset;\n\n  if (unitLength > 0.0) {\n    if (dashAlignMode == 0.0) {\n      offset = vDashOffset;\n    } else {\n      unitLength = vPathLength / round(vPathLength / unitLength);\n      offset = solidLength / 2.0;\n    }\n\n    float unitOffset = mod(clamp(vPathPosition.y, 0.0, vPathLength) + offset, unitLength);\n\n    if (gapLength > 0.0 && unitOffset > solidLength) {\n      if (capType <= 0.5) {\n        if (!(dashGapPickable && picking_uActive)) {\n          discard;\n        }\n      } else {\n        // caps are rounded, test the distance to solid ends\n        float distToEnd = length(vec2(\n          min(unitOffset - solidLength, unitLength - unitOffset),\n          vPathPosition.x\n        ));\n        if (distToEnd > 1.0) {\n          if (!(dashGapPickable && picking_uActive)) {\n            discard;\n          }\n        }\n      }\n    }\n  }\n`\n  }\n};\n\nexport const offsetShaders = {\n  inject: {\n    'vs:#decl': `\nattribute float instanceOffsets;\n`,\n    'vs:DECKGL_FILTER_SIZE': `\n  float offsetWidth = abs(instanceOffsets * 2.0) + 1.0;\n  size *= offsetWidth;\n`,\n    'vCornerOffset = offsetVec;': `\n  float offsetWidth = abs(instanceOffsets * 2.0) + 1.0;\n  vec2 offsetCenter = -instanceOffsets * (isCap ? perp : miterVec * miterSize) * 2.0;\n  vCornerOffset = vCornerOffset * offsetWidth - offsetCenter;\n`,\n    'fs:#main-start': `\n  float isInside;\n  isInside = step(-1.0, vPathPosition.x) * step(vPathPosition.x, 1.0);\n  if (isInside == 0.0) {\n    discard;\n  }\n`\n  }\n};\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {LayerExtension, _mergeShaders as mergeShaders} from '@deck.gl/core';\nimport {dashShaders, offsetShaders} from './shaders.glsl';\nimport {dist} from 'gl-matrix/vec3';\n\nimport type {Layer, LayerContext, Accessor, UpdateParameters} from '@deck.gl/core';\n\nconst defaultProps = {\n  getDashArray: {type: 'accessor', value: [0, 0]},\n  getOffset: {type: 'accessor', value: 0},\n  dashJustified: false,\n  dashGapPickable: false\n};\n\nexport type PathStyleExtensionProps<DataT = any> = {\n  /**\n   * Accessor for the dash array to draw each path with: `[dashSize, gapSize]` relative to the width of the path.\n   * Requires the `dash` option to be on.\n   */\n  getDashArray?: Accessor<DataT, [number, number]>;\n  /**\n   * Accessor for the offset to draw each path with, relative to the width of the path.\n   * Negative offset is to the left hand side, and positive offset is to the right hand side.\n   * @default 0\n   */\n  getOffset?: Accessor<DataT, number>;\n  /**\n   * If `true`, adjust gaps for the dashes to align at both ends.\n   * @default false\n   */\n  dashJustified?: boolean;\n  /**\n   * If `true`, gaps between solid strokes are pickable. If `false`, only the solid strokes are pickable.\n   * @default false\n   */\n  dashGapPickable?: boolean;\n};\n\ntype PathStyleExtensionOptions = {\n  /**\n   * Add capability to render dashed lines.\n   * @default false\n   */\n  dash: boolean;\n  /**\n   * Add capability to offset lines.\n   * @default false\n   */\n  offset: boolean;\n  /**\n   * Improve dash rendering quality in certain circumstances. Note that this option introduces additional performance overhead.\n   * @default false\n   */\n  highPrecisionDash: boolean;\n};\n\n/** Adds selected features to the `PathLayer` and composite layers that render the `PathLayer`. */\nexport default class PathStyleExtension extends LayerExtension<PathStyleExtensionOptions> {\n  static defaultProps = defaultProps;\n  static extensionName = 'PathStyleExtension';\n\n  constructor({\n    dash = false,\n    offset = false,\n    highPrecisionDash = false\n  }: Partial<PathStyleExtensionOptions> = {}) {\n    super({dash: dash || highPrecisionDash, offset, highPrecisionDash});\n  }\n\n  isEnabled(layer: Layer<PathStyleExtensionProps>): boolean {\n    return 'pathTesselator' in layer.state;\n  }\n\n  getShaders(this: Layer<PathStyleExtensionProps>, extension: this): any {\n    if (!extension.isEnabled(this)) {\n      return null;\n    }\n\n    // Merge shader injection\n    let result = {};\n    if (extension.opts.dash) {\n      result = mergeShaders(result, dashShaders);\n    }\n    if (extension.opts.offset) {\n      result = mergeShaders(result, offsetShaders);\n    }\n\n    return result;\n  }\n\n  initializeState(this: Layer<PathStyleExtensionProps>, context: LayerContext, extension: this) {\n    const attributeManager = this.getAttributeManager();\n    if (!attributeManager || !extension.isEnabled(this)) {\n      // This extension only works with the PathLayer\n      return;\n    }\n\n    if (extension.opts.dash) {\n      attributeManager.addInstanced({\n        instanceDashArrays: {size: 2, accessor: 'getDashArray'}\n      });\n    }\n    if (extension.opts.highPrecisionDash) {\n      attributeManager.addInstanced({\n        instanceDashOffsets: {\n          size: 1,\n          accessor: 'getPath',\n          transform: extension.getDashOffsets.bind(this)\n        }\n      });\n    }\n    if (extension.opts.offset) {\n      attributeManager.addInstanced({\n        instanceOffsets: {size: 1, accessor: 'getOffset'}\n      });\n    }\n  }\n\n  updateState(\n    this: Layer<PathStyleExtensionProps>,\n    params: UpdateParameters<Layer<PathStyleExtensionProps>>,\n    extension: this\n  ) {\n    if (!extension.isEnabled(this)) {\n      return;\n    }\n\n    const uniforms: any = {};\n\n    if (extension.opts.dash) {\n      uniforms.dashAlignMode = this.props.dashJustified ? 1 : 0;\n      uniforms.dashGapPickable = Boolean(this.props.dashGapPickable);\n    }\n\n    this.state.model.setUniforms(uniforms);\n  }\n\n  getDashOffsets(this: Layer<PathStyleExtensionProps>, path: number[] | number[][]): number[] {\n    const result = [0];\n    const positionSize = this.props.positionFormat === 'XY' ? 2 : 3;\n    const isNested = Array.isArray(path[0]);\n    const geometrySize = isNested ? path.length : path.length / positionSize;\n\n    let p;\n    let prevP;\n    for (let i = 0; i < geometrySize - 1; i++) {\n      p = isNested ? path[i] : path.slice(i * positionSize, i * positionSize + positionSize);\n      p = this.projectPosition(p);\n\n      if (i > 0) {\n        result[i] = result[i - 1] + dist(prevP, p);\n      }\n\n      prevP = p;\n    }\n    return result;\n  }\n}\n", "import {project, fp64LowPart} from '@deck.gl/core';\nimport type {Viewport, _ShaderModule as ShaderModule, ProjectUniforms} from '@deck.gl/core';\n\nimport type {Texture2D} from '@luma.gl/webgl';\n\n/*\n * fill pattern shader module\n */\nconst patternVs = `\n#ifdef NON_INSTANCED_MODEL\n  #define FILL_PATTERN_FRAME_ATTRIB fillPatternFrames\n  #define FILL_PATTERN_SCALE_ATTRIB fillPatternScales\n  #define FILL_PATTERN_OFFSET_ATTRIB fillPatternOffsets\n#else\n  #define FILL_PATTERN_FRAME_ATTRIB instanceFillPatternFrames\n  #define FILL_PATTERN_SCALE_ATTRIB instanceFillPatternScales\n  #define FILL_PATTERN_OFFSET_ATTRIB instanceFillPatternOffsets\n#endif\n\nattribute vec4 FILL_PATTERN_FRAME_ATTRIB;\nattribute float FILL_PATTERN_SCALE_ATTRIB;\nattribute vec2 FILL_PATTERN_OFFSET_ATTRIB;\n\nuniform bool fill_patternEnabled;\nuniform vec2 fill_patternTextureSize;\n\nvarying vec2 fill_uv;\nvarying vec4 fill_patternBounds;\nvarying vec4 fill_patternPlacement;\n`;\n\nconst patternFs = `\nuniform bool fill_patternEnabled;\nuniform bool fill_patternMask;\nuniform sampler2D fill_patternTexture;\nuniform vec2 fill_uvCoordinateOrigin;\nuniform vec2 fill_uvCoordinateOrigin64Low;\n\nvarying vec4 fill_patternBounds;\nvarying vec4 fill_patternPlacement;\nvarying vec2 fill_uv;\n\nconst float FILL_UV_SCALE = 512.0 / 40000000.0;\n`;\n\nconst inject = {\n  'vs:DECKGL_FILTER_GL_POSITION': `\n    fill_uv = geometry.position.xy;\n  `,\n\n  'vs:DECKGL_FILTER_COLOR': `\n    if (fill_patternEnabled) {\n      fill_patternBounds = FILL_PATTERN_FRAME_ATTRIB / vec4(fill_patternTextureSize, fill_patternTextureSize);\n      fill_patternPlacement.xy = FILL_PATTERN_OFFSET_ATTRIB;\n      fill_patternPlacement.zw = FILL_PATTERN_SCALE_ATTRIB * FILL_PATTERN_FRAME_ATTRIB.zw;\n    }\n  `,\n\n  'fs:DECKGL_FILTER_COLOR': `\n    if (fill_patternEnabled) {\n      vec2 scale = FILL_UV_SCALE * fill_patternPlacement.zw;\n      vec2 patternUV = mod(mod(fill_uvCoordinateOrigin, scale) + fill_uvCoordinateOrigin64Low + fill_uv, scale) / scale;\n      patternUV = mod(fill_patternPlacement.xy + patternUV, 1.0);\n\n      vec2 texCoords = fill_patternBounds.xy + fill_patternBounds.zw * patternUV;\n\n      vec4 patternColor = texture2D(fill_patternTexture, texCoords);\n      color.a *= patternColor.a;\n      if (!fill_patternMask) {\n        color.rgb = patternColor.rgb;\n      }\n    }\n  `\n};\n\ntype FillStyleModuleSettings =\n  | {\n      viewport: Viewport;\n      fillPatternEnabled?: boolean;\n      fillPatternMask?: boolean;\n    }\n  | {\n      fillPatternTexture: Texture2D;\n    };\n\n/* eslint-disable camelcase */\nfunction getPatternUniforms(\n  opts: FillStyleModuleSettings | {},\n  uniforms: Record<string, any>\n): Record<string, any> {\n  if (!opts) {\n    return {};\n  }\n  if ('fillPatternTexture' in opts) {\n    const {fillPatternTexture} = opts;\n    return {\n      fill_patternTexture: fillPatternTexture,\n      fill_patternTextureSize: [fillPatternTexture.width, fillPatternTexture.height]\n    };\n  }\n  if ('viewport' in opts) {\n    const {fillPatternMask = true, fillPatternEnabled = true} = opts;\n    const {project_uCommonOrigin: coordinateOriginCommon} = uniforms as ProjectUniforms;\n\n    const coordinateOriginCommon64Low = [\n      fp64LowPart(coordinateOriginCommon[0]),\n      fp64LowPart(coordinateOriginCommon[1])\n    ];\n\n    return {\n      fill_uvCoordinateOrigin: coordinateOriginCommon.slice(0, 2),\n      fill_uvCoordinateOrigin64Low: coordinateOriginCommon64Low,\n      fill_patternMask: fillPatternMask,\n      fill_patternEnabled: fillPatternEnabled\n    };\n  }\n  return {};\n}\n\nexport const patternShaders: ShaderModule<FillStyleModuleSettings> = {\n  name: 'fill-pattern',\n  vs: patternVs,\n  fs: patternFs,\n  inject,\n  dependencies: [project],\n  getUniforms: getPatternUniforms\n};\n", "import {LayerExtension} from '@deck.gl/core';\nimport {Texture2D} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\n\nimport {patternShaders} from './shaders.glsl';\n\nimport type {\n  Layer,\n  LayerContext,\n  Accessor,\n  AccessorFunction,\n  Texture,\n  UpdateParameters\n} from '@deck.gl/core';\n\nconst defaultProps = {\n  fillPatternEnabled: true,\n  fillPatternAtlas: {\n    type: 'image',\n    value: null,\n    async: true,\n    parameters: {\n      [GL.TEXTURE_MIN_FILTER]: GL.LINEAR\n    }\n  },\n  fillPatternMapping: {type: 'object', value: {}, async: true},\n  fillPatternMask: true,\n  getFillPattern: {type: 'accessor', value: d => d.pattern},\n  getFillPatternScale: {type: 'accessor', value: 1},\n  getFillPatternOffset: {type: 'accessor', value: [0, 0]}\n};\n\nexport type FillStyleExtensionProps<DataT = any> = {\n  /** Cheap toggle to enable/disable pattern fill. Requires the `pattern` option to be on.\n   * @default true\n   */\n  fillPatternEnabled?: boolean;\n  /** Sprite image url or texture that packs all your patterns into one layout. */\n  fillPatternAtlas?: string | Texture;\n  /** Pattern names mapped to pattern definitions, or a url that points to a JSON file. */\n  fillPatternMapping?:\n    | string\n    | Record<\n        string,\n        {\n          /** Left position of the pattern on the atlas */\n          x: number;\n          /** Top position of the pattern on the atlas */\n          y: number;\n          /** Width of the pattern */\n          width: number;\n          /** Height of the pattern */\n          height: number;\n        }\n      >;\n  /**\n   * Whether to treat the patterns as transparency masks.\n   * @default true\n   */\n  fillPatternMask?: boolean;\n  /** Accessor for the name of the pattern. */\n  getFillPattern?: AccessorFunction<DataT, string>;\n  /** Accessor for the scale of the pattern, relative to the original size. If the pattern is 24 x 24 pixels, scale `1` roughly yields 24 meters.\n   * @default 1\n   */\n  getFillPatternScale?: Accessor<DataT, number>;\n  /**\n   * Accessor for the offset of the pattern, relative to the original size. Offset `[0.5, 0.5]` shifts the pattern alignment by half.\n   * @default [0, 0]\n   */\n  getFillPatternOffset?: Accessor<DataT, [number, number]>;\n};\n\ntype FillStyleExtensionOptions = {\n  /** If `true`, adds the ability to tile the filled area with a pattern.\n   * @default false\n   */\n  pattern: boolean;\n};\n\n/** Adds selected features to layers that render a \"fill\", such as the `PolygonLayer` and `ScatterplotLayer`. */\nexport default class FillStyleExtension extends LayerExtension<FillStyleExtensionOptions> {\n  static defaultProps = defaultProps;\n  static extensionName = 'FillStyleExtension';\n\n  constructor({pattern = false}: Partial<FillStyleExtensionOptions> = {}) {\n    super({pattern});\n  }\n\n  isEnabled(layer: Layer<FillStyleExtensionProps>): boolean {\n    return layer.getAttributeManager() !== null && !('pathTesselator' in layer.state);\n  }\n\n  getShaders(this: Layer<FillStyleExtensionProps>, extension: this): any {\n    if (!extension.isEnabled(this)) {\n      return null;\n    }\n\n    return {\n      modules: [extension.opts.pattern && patternShaders].filter(Boolean)\n    };\n  }\n\n  initializeState(this: Layer<FillStyleExtensionProps>, context: LayerContext, extension: this) {\n    if (!extension.isEnabled(this)) {\n      return;\n    }\n\n    const attributeManager = this.getAttributeManager();\n\n    if (extension.opts.pattern) {\n      attributeManager!.add({\n        fillPatternFrames: {\n          size: 4,\n          accessor: 'getFillPattern',\n          transform: extension.getPatternFrame.bind(this),\n          shaderAttributes: {\n            fillPatternFrames: {\n              divisor: 0\n            },\n            instanceFillPatternFrames: {\n              divisor: 1\n            }\n          }\n        },\n        fillPatternScales: {\n          size: 1,\n          accessor: 'getFillPatternScale',\n          defaultValue: 1,\n          shaderAttributes: {\n            fillPatternScales: {\n              divisor: 0\n            },\n            instanceFillPatternScales: {\n              divisor: 1\n            }\n          }\n        },\n        fillPatternOffsets: {\n          size: 2,\n          accessor: 'getFillPatternOffset',\n          shaderAttributes: {\n            fillPatternOffsets: {\n              divisor: 0\n            },\n            instanceFillPatternOffsets: {\n              divisor: 1\n            }\n          }\n        }\n      });\n    }\n    this.setState({\n      emptyTexture: new Texture2D(this.context.gl, {\n        data: new Uint8Array(4),\n        width: 1,\n        height: 1\n      })\n    });\n  }\n\n  updateState(\n    this: Layer<FillStyleExtensionProps>,\n    {props, oldProps}: UpdateParameters<Layer<FillStyleExtensionProps>>,\n    extension: this\n  ) {\n    if (!extension.isEnabled(this)) {\n      return;\n    }\n\n    if (props.fillPatternMapping && props.fillPatternMapping !== oldProps.fillPatternMapping) {\n      this.getAttributeManager()!.invalidate('getFillPattern');\n    }\n  }\n\n  draw(this: Layer<FillStyleExtensionProps>, params: any, extension: this) {\n    if (!extension.isEnabled(this)) {\n      return;\n    }\n\n    const {fillPatternAtlas} = this.props;\n    this.setModuleParameters({\n      fillPatternTexture: fillPatternAtlas || this.state.emptyTexture\n    });\n  }\n\n  finalizeState(this: Layer<FillStyleExtensionProps>) {\n    const {emptyTexture} = this.state;\n    emptyTexture?.delete();\n  }\n\n  getPatternFrame(this: Layer<FillStyleExtensionProps>, name: string) {\n    const {fillPatternMapping} = this.getCurrentLayer()!.props;\n    const def = fillPatternMapping && fillPatternMapping[name];\n    return def ? [def.x, def.y, def.width, def.height] : [0, 0, 0, 0];\n  }\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {LayerExtension, _ShaderModule as ShaderModule} from '@deck.gl/core';\n\nimport type {Layer} from '@deck.gl/core';\n\nconst defaultProps = {\n  clipBounds: [0, 0, 1, 1],\n  clipByInstance: undefined\n};\n\nexport type ClipExtensionProps = {\n  /** Rectangular bounds to be used for clipping the rendered region, in `[left, bottom, right, top]`.\n   * @default [0, 0, 1, 1]\n   */\n  clipBounds?: [number, number, number, number];\n  /**\n   * Controls whether an object is clipped by its anchor (e.g. icon, point) or by its geometry (e.g. path, polygon).\n   * If not specified, it is automatically deduced from the layer.\n   */\n  clipByInstance?: boolean;\n};\n\nconst shaderFunction = `\nuniform vec4 clip_bounds;\n\nbool clip_isInBounds(vec2 position) {\n  return position.x >= clip_bounds[0] && position.y >= clip_bounds[1] && position.x < clip_bounds[2] && position.y < clip_bounds[3];\n}\n`;\n\n/*\n * The vertex-shader version clips geometries by their anchor position\n * e.g. ScatterplotLayer - show if the center of a circle is within bounds\n */\nconst shaderModuleVs: ShaderModule = {\n  name: 'clip-vs',\n  vs: shaderFunction\n};\n\nconst injectionVs = {\n  'vs:#decl': `\nvarying float clip_isVisible;\n`,\n  'vs:DECKGL_FILTER_GL_POSITION': `\n  clip_isVisible = float(clip_isInBounds(geometry.worldPosition.xy));\n`,\n  'fs:#decl': `\nvarying float clip_isVisible;\n`,\n  'fs:DECKGL_FILTER_COLOR': `\n  if (clip_isVisible < 0.5) discard;\n`\n};\n\n/*\n * The fragment-shader version clips pixels at the bounds\n * e.g. PolygonLayer - show the part of the polygon that intersect with the bounds\n */\nconst shaderModuleFs: ShaderModule = {\n  name: 'clip-fs',\n  fs: shaderFunction\n};\n\nconst injectionFs = {\n  'vs:#decl': `\nvarying vec2 clip_commonPosition;\n`,\n  'vs:DECKGL_FILTER_GL_POSITION': `\n  clip_commonPosition = geometry.position.xy;\n`,\n  'fs:#decl': `\nvarying vec2 clip_commonPosition;\n`,\n  'fs:DECKGL_FILTER_COLOR': `\n  if (!clip_isInBounds(clip_commonPosition)) discard;\n`\n};\n\n/** Adds support for clipping rendered layers by rectangular bounds. */\nexport default class ClipExtension extends LayerExtension {\n  static defaultProps = defaultProps;\n  static extensionName = 'ClipExtension';\n\n  getShaders(this: Layer<ClipExtensionProps>) {\n    // If `clipByInstance: true`, the entire object is shown/hidden based on its anchor position (done by vertex shader)\n    // Otherwise, the object is trimmed by the clip bounds (done by fragment shader)\n\n    // Default behavior: consider a layer instanced if it has attribute `instancePositions`\n    // @ts-expect-error attributeManager is always defined for primitive layers\n    let clipByInstance = 'instancePositions' in this.getAttributeManager().attributes;\n    // Users can override by setting the `clipByInstance` prop\n    if (this.props.clipByInstance !== undefined) {\n      clipByInstance = Boolean(this.props.clipByInstance);\n    }\n    this.state.clipByInstance = clipByInstance;\n\n    return clipByInstance\n      ? {\n          modules: [shaderModuleVs],\n          inject: injectionVs\n        }\n      : {\n          modules: [shaderModuleFs],\n          inject: injectionFs\n        };\n  }\n\n  /* eslint-disable camelcase */\n  draw(this: Layer<Required<ClipExtensionProps>>, {uniforms}: any): void {\n    const {clipBounds} = this.props;\n    if (this.state.clipByInstance) {\n      uniforms.clip_bounds = clipBounds;\n    } else {\n      const corner0 = this.projectPosition([clipBounds[0], clipBounds[1], 0]);\n      const corner1 = this.projectPosition([clipBounds[2], clipBounds[3], 0]);\n\n      uniforms.clip_bounds = [\n        Math.min(corner0[0], corner1[0]),\n        Math.min(corner0[1], corner1[1]),\n        Math.max(corner0[0], corner1[0]),\n        Math.max(corner0[1], corner1[1])\n      ];\n    }\n  }\n}\n", "import {Framebuffer, Texture2D} from '@luma.gl/core';\nimport {project} from '@deck.gl/core';\nimport type {_ShaderModule as ShaderModule} from '@deck.gl/core';\n\nconst vs = `\n#ifdef NON_INSTANCED_MODEL\nattribute float collisionPriorities;\n#else\nattribute float instanceCollisionPriorities;\n#endif\n\nuniform sampler2D collision_texture;\nuniform bool collision_sort;\nuniform bool collision_enabled;\n\nvec2 collision_getCoords(vec4 position) {\n  vec4 collision_clipspace = project_common_position_to_clipspace(position);\n  return (1.0 + collision_clipspace.xy / collision_clipspace.w) / 2.0;\n}\n\nfloat collision_match(vec2 tex, vec3 pickingColor) {\n  vec4 collision_pickingColor = texture2D(collision_texture, tex);\n  float delta = dot(abs(collision_pickingColor.rgb - pickingColor), vec3(1.0));\n  float e = 0.001;\n  return step(delta, e);\n}\n\nfloat collision_isVisible(vec2 texCoords, vec3 pickingColor) {\n  if (!collision_enabled) {\n    return 1.0;\n  }\n\n  // Visibility test, sample area of 5x5 pixels in order to fade in/out.\n  // Due to the locality, the lookups will be cached\n  // This reduces the flicker present when objects are shown/hidden\n  const int N = 2;\n  float accumulator = 0.0;\n  vec2 step = vec2(1.0 / project_uViewportSize);\n\n  const float floatN = float(N);\n  vec2 delta = -floatN * step;\n  for(int i = -N; i <= N; i++) {\n    delta.x = -step.x * floatN;\n    for(int j = -N; j <= N; j++) {\n      accumulator += collision_match(texCoords + delta, pickingColor);\n      delta.x += step.x;\n    }\n    delta.y += step.y;\n  }\n\n  float W = 2.0 * floatN + 1.0;\n  return pow(accumulator / (W * W), 2.2);\n}\n`;\n\nconst inject = {\n  'vs:#decl': `\n  float collision_fade = 1.0;\n`,\n  'vs:DECKGL_FILTER_GL_POSITION': `\n  if (collision_sort) {\n    #ifdef NON_INSTANCED_MODEL\n    float collisionPriority = collisionPriorities;\n    #else\n    float collisionPriority = instanceCollisionPriorities;\n    #endif\n    position.z = -0.001 * collisionPriority * position.w; // Support range -1000 -> 1000\n  }\n\n  if (collision_enabled) {\n    vec4 collision_common_position = project_position(vec4(geometry.worldPosition, 1.0));\n    vec2 collision_texCoords = collision_getCoords(collision_common_position);\n    collision_fade = collision_isVisible(collision_texCoords, geometry.pickingColor / 255.0);\n    if (collision_fade < 0.0001) {\n      // Position outside clip space bounds to discard\n      position = vec4(0.0, 0.0, 2.0, 1.0);\n    }\n  }\n  `,\n  'vs:DECKGL_FILTER_COLOR': `\n  color.a *= collision_fade;\n  `\n};\n\ntype CollisionModuleSettings = {\n  collisionFBO?: Framebuffer;\n  drawToCollisionMap?: boolean;\n  dummyCollisionMap?: Texture2D;\n};\n\n/* eslint-disable camelcase */\ntype CollisionUniforms = {collision_sort?: boolean; collision_texture?: Framebuffer | Texture2D};\n\nconst getCollisionUniforms = (\n  opts: CollisionModuleSettings | {},\n  uniforms: Record<string, any>\n): CollisionUniforms => {\n  if (!opts || !('dummyCollisionMap' in opts)) {\n    return {};\n  }\n  const {collisionFBO, drawToCollisionMap, dummyCollisionMap} = opts;\n  return {\n    collision_sort: Boolean(drawToCollisionMap),\n    collision_texture: !drawToCollisionMap && collisionFBO ? collisionFBO : dummyCollisionMap\n  };\n};\n\nexport default {\n  name: 'collision',\n  dependencies: [project],\n  vs,\n  inject,\n  getUniforms: getCollisionUniforms\n} as ShaderModule;\n", "import {Framebuffer, withParameters} from '@luma.gl/core';\nimport {_LayersPass as LayersPass, LayersPassRenderOptions} from '@deck.gl/core';\n\ntype CollisionFilterPassRenderOptions = LayersPassRenderOptions & {};\n\nexport default class CollisionFilterPass extends LayersPass {\n  renderCollisionMap(target: Framebuffer, options: CollisionFilterPassRenderOptions) {\n    const gl = this.gl;\n\n    const padding = 1;\n\n    return withParameters(\n      gl,\n      {\n        scissorTest: true,\n        scissor: [padding, padding, target.width - 2 * padding, target.height - 2 * padding],\n        clearColor: [0, 0, 0, 0],\n        blend: false,\n        depthTest: true,\n        depthRange: [0, 1]\n      },\n      () => this.render({...options, target, pass: 'collision'})\n    );\n  }\n\n  getModuleParameters() {\n    // Draw picking colors into collision FBO\n    return {\n      drawToCollisionMap: true,\n      pickingActive: 1,\n      pickingAttribute: false,\n      lightSources: {}\n    };\n  }\n}\n", "import {Framebuffer, Texture2D, withParameters} from '@luma.gl/core';\nimport {_LayersPass as LayersPass, LayersPassRenderOptions} from '@deck.gl/core';\n\ntype MaskPassRenderOptions = LayersPassRenderOptions & {\n  /** The channel to render into, 0:red, 1:green, 2:blue, 3:alpha */\n  channel: number;\n};\n\nexport default class MaskPass extends LayersPass {\n  maskMap: Texture2D;\n  fbo: Framebuffer;\n\n  constructor(gl, props: {id: string; mapSize?: number}) {\n    super(gl, props);\n\n    const {mapSize = 2048} = props;\n\n    this.maskMap = new Texture2D(gl, {\n      width: mapSize,\n      height: mapSize,\n      parameters: {\n        [gl.TEXTURE_MIN_FILTER]: gl.LINEAR,\n        [gl.TEXTURE_MAG_FILTER]: gl.LINEAR,\n        [gl.TEXTURE_WRAP_S]: gl.CLAMP_TO_EDGE,\n        [gl.TEXTURE_WRAP_T]: gl.CLAMP_TO_EDGE\n      }\n    });\n\n    this.fbo = new Framebuffer(gl, {\n      id: 'maskmap',\n      width: mapSize,\n      height: mapSize,\n      attachments: {\n        [gl.COLOR_ATTACHMENT0]: this.maskMap\n      }\n    });\n  }\n\n  render(options: MaskPassRenderOptions) {\n    const gl = this.gl;\n\n    const colorMask = [false, false, false, false];\n    colorMask[options.channel] = true;\n\n    return withParameters(\n      gl,\n      {\n        clearColor: [255, 255, 255, 255],\n        blend: true,\n        blendFunc: [gl.ZERO, gl.ONE],\n        blendEquation: gl.FUNC_SUBTRACT,\n        colorMask,\n        depthTest: false\n      },\n      () => super.render({...options, target: this.fbo, pass: 'mask'})\n    );\n  }\n\n  shouldDrawLayer(layer) {\n    return layer.props.operation.includes('mask');\n  }\n\n  delete() {\n    this.fbo.delete();\n    this.maskMap.delete();\n  }\n}\n", "import {WebMercatorViewport, OrthographicViewport} from '@deck.gl/core';\nimport type {Layer, Viewport} from '@deck.gl/core';\n\n/** Bounds in CARTESIAN coordinates */\nexport type Bounds = [minX: number, minY: number, maxX: number, maxY: number];\n\n/*\n * Compute the union of bounds from multiple layers\n * Returns bounds in CARTESIAN coordinates\n */\nexport function joinLayerBounds(\n  /** The layers to combine */\n  layers: Layer[],\n  /** A Viewport instance that is used to determine the type of the view */\n  viewport: Viewport\n): Bounds | null {\n  // Join the bounds of layer data\n  const bounds: Bounds = [Infinity, Infinity, -Infinity, -Infinity];\n  for (const layer of layers) {\n    const layerBounds = layer.getBounds();\n    if (layerBounds) {\n      const bottomLeftCommon = layer.projectPosition(layerBounds[0], {viewport, autoOffset: false});\n      const topRightCommon = layer.projectPosition(layerBounds[1], {viewport, autoOffset: false});\n\n      bounds[0] = Math.min(bounds[0], bottomLeftCommon[0]);\n      bounds[1] = Math.min(bounds[1], bottomLeftCommon[1]);\n      bounds[2] = Math.max(bounds[2], topRightCommon[0]);\n      bounds[3] = Math.max(bounds[3], topRightCommon[1]);\n    }\n  }\n\n  if (Number.isFinite(bounds[0])) {\n    return bounds;\n  }\n  return null;\n}\n\nconst MAX_VIEWPORT_SIZE = 2048;\n\n/** Construct a viewport that just covers the target bounds. Used for rendering to common space indexed texture. */\nexport function makeViewport(opts: {\n  /** The cartesian bounds of layers that will render into this texture */\n  bounds: Bounds;\n  /** Target width. If not specified, will be deduced from zoom */\n  width?: number;\n  /** Target height. If not specified, will be deduced from zoom */\n  height?: number;\n  /** Target zoom. If not specified, will be deduced from width and height */\n  zoom?: number;\n  /** Border around the viewport in pixels */\n  border?: number;\n  /** A viewport used to determine the output type */\n  viewport: Viewport;\n}): Viewport | null {\n  const {bounds, viewport, border = 0} = opts;\n  const {isGeospatial} = viewport;\n\n  if (bounds[2] <= bounds[0] || bounds[3] <= bounds[1]) {\n    return null;\n  }\n\n  const centerWorld = viewport.unprojectPosition([\n    (bounds[0] + bounds[2]) / 2,\n    (bounds[1] + bounds[3]) / 2,\n    0\n  ]);\n\n  let {width, height, zoom} = opts;\n  if (zoom === undefined) {\n    // Use width and height to determine zoom\n    width = width! - border * 2;\n    height = height! - border * 2;\n    const scale = Math.min(width / (bounds[2] - bounds[0]), height / (bounds[3] - bounds[1]));\n    zoom = Math.min(Math.log2(scale), 20);\n  } else if (!width || !height) {\n    // Use zoom to determine width and height\n    const scale = 2 ** zoom;\n    width = Math.round(Math.abs(bounds[2] - bounds[0]) * scale);\n    height = Math.round(Math.abs(bounds[3] - bounds[1]) * scale);\n    const maxSize = MAX_VIEWPORT_SIZE - border * 2;\n    if (width > maxSize || height > maxSize) {\n      const r = maxSize / Math.max(width, height);\n      width = Math.round(width * r);\n      height = Math.round(height * r);\n      zoom += Math.log2(r);\n    }\n  }\n\n  // TODO - find a more generic way to construct this viewport\n  // Geospatial viewports may not be web-mercator\n  return isGeospatial\n    ? new WebMercatorViewport({\n        id: viewport.id,\n        x: border,\n        y: border,\n        width,\n        height,\n        longitude: centerWorld[0],\n        latitude: centerWorld[1],\n        zoom,\n        orthographic: true\n      })\n    : new OrthographicViewport({\n        id: viewport.id,\n        x: border,\n        y: border,\n        width,\n        height,\n        target: centerWorld,\n        zoom,\n        flipY: false\n      });\n}\n\n/** Returns viewport bounds in CARTESIAN coordinates */\nexport function getViewportBounds(viewport: Viewport, zRange?: [number, number]): Bounds {\n  // Viewport bounds in world coordinates\n  let viewportBoundsWorld: Bounds;\n  if (zRange && zRange.length === 2) {\n    const [minZ, maxZ] = zRange;\n    const bounds0 = viewport.getBounds({z: minZ});\n    const bounds1 = viewport.getBounds({z: maxZ});\n    viewportBoundsWorld = [\n      Math.min(bounds0[0], bounds1[0]),\n      Math.min(bounds0[1], bounds1[1]),\n      Math.max(bounds0[2], bounds1[2]),\n      Math.max(bounds0[3], bounds1[3])\n    ];\n  } else {\n    viewportBoundsWorld = viewport.getBounds();\n  }\n\n  // Viewport bounds in cartesian coordinates\n  const viewportBottomLeftCommon = viewport.projectPosition(viewportBoundsWorld.slice(0, 2));\n  const viewportTopRightCommon = viewport.projectPosition(viewportBoundsWorld.slice(2, 4));\n  return [\n    viewportBottomLeftCommon[0],\n    viewportBottomLeftCommon[1],\n    viewportTopRightCommon[0],\n    viewportTopRightCommon[1]\n  ];\n}\n\n/*\n * Determine the common space bounds that best cover the given data for the given viewport\n * Returns bounds in CARTESIAN coordinates\n */\nexport function getRenderBounds(\n  layerBounds: Bounds,\n  viewport: Viewport,\n  zRange?: [number, number]\n): Bounds {\n  if (!layerBounds) {\n    return [0, 0, 1, 1];\n  }\n\n  const viewportBounds = getViewportBounds(viewport, zRange);\n  // Expand viewport bounds by 2X. Heurestically chosen to avoid masking\n  // errors when mask is partially out of view\n  const paddedBounds = doubleBounds(viewportBounds);\n\n  // When bounds of the layers are smaller than the viewport bounds simply use\n  // mask bounds, so as to maximize resolution & avoid rerenders\n  if (\n    layerBounds[2] - layerBounds[0] <= paddedBounds[2] - paddedBounds[0] &&\n    layerBounds[3] - layerBounds[1] <= paddedBounds[3] - paddedBounds[1]\n  ) {\n    return layerBounds;\n  }\n\n  // As viewport shrinks, to avoid pixelation along mask edges\n  // we need to reduce the bounds and only render the visible portion\n  // of the mask.\n  // We pad the viewport bounds to capture the section\n  // of the mask just outside the viewport to correctly maskByInstance.\n  // Intersect mask & padded viewport bounds\n  return [\n    Math.max(layerBounds[0], paddedBounds[0]),\n    Math.max(layerBounds[1], paddedBounds[1]),\n    Math.min(layerBounds[2], paddedBounds[2]),\n    Math.min(layerBounds[3], paddedBounds[3])\n  ];\n}\n\nfunction doubleBounds(bounds: Bounds): Bounds {\n  const dx = bounds[2] - bounds[0];\n  const dy = bounds[3] - bounds[1];\n  const centerX = (bounds[0] + bounds[2]) / 2;\n  const centerY = (bounds[1] + bounds[3]) / 2;\n  return [centerX - dx, centerY - dy, centerX + dx, centerY + dy];\n}\n", "import {Layer, Viewport, Effect, PreRenderOptions, CoordinateSystem, log} from '@deck.gl/core';\nimport {Texture2D} from '@luma.gl/core';\nimport {equals} from '@math.gl/core';\nimport MaskPass from './mask-pass';\nimport {joinLayerBounds, getRenderBounds, makeViewport, Bounds} from '../utils/projection-utils';\n// import {debugFBO} from '../utils/debug';\n\ntype Mask = {\n  /** The channel index */\n  index: number;\n  bounds: Bounds;\n  coordinateOrigin: [number, number, number];\n  coordinateSystem: CoordinateSystem;\n};\n\ntype Channel = {\n  id: string;\n  index: number;\n  layers: Layer[];\n  bounds: Bounds | null;\n  maskBounds: Bounds;\n  layerBounds: Bounds[];\n  coordinateOrigin: [number, number, number];\n  coordinateSystem: CoordinateSystem;\n};\n\nexport type MaskPreRenderStats = {\n  didRender: boolean;\n};\n\n// Class to manage mask effect\nexport default class MaskEffect implements Effect {\n  id = 'mask-effect';\n  props = null;\n  useInPicking = true;\n  order = 0;\n\n  private dummyMaskMap?: Texture2D;\n  private channels: (Channel | null)[] = [];\n  private masks: Record<string, Mask> | null = null;\n  private maskPass?: MaskPass;\n  private maskMap?: Texture2D;\n  private lastViewport?: Viewport;\n\n  preRender(\n    gl: WebGLRenderingContext,\n    {layers, layerFilter, viewports, onViewportActive, views, isPicking}: PreRenderOptions\n  ): MaskPreRenderStats {\n    let didRender = false;\n    if (!this.dummyMaskMap) {\n      this.dummyMaskMap = new Texture2D(gl, {\n        width: 1,\n        height: 1\n      });\n    }\n\n    if (isPicking) {\n      // Do not update on picking pass\n      return {didRender};\n    }\n\n    const maskLayers = layers.filter(l => l.props.visible && l.props.operation.includes('mask'));\n    if (maskLayers.length === 0) {\n      this.masks = null;\n      this.channels.length = 0;\n      return {didRender};\n    }\n    this.masks = {};\n\n    if (!this.maskPass) {\n      this.maskPass = new MaskPass(gl, {id: 'default-mask'});\n      this.maskMap = this.maskPass.maskMap;\n    }\n\n    // Map layers to channels\n    const channelMap = this._sortMaskChannels(maskLayers);\n    // TODO - support multiple views\n    const viewport = viewports[0];\n    const viewportChanged = !this.lastViewport || !this.lastViewport.equals(viewport);\n\n    if (viewport.resolution !== undefined) {\n      log.warn('MaskExtension is not supported in GlobeView')();\n      return {didRender};\n    }\n\n    for (const maskId in channelMap) {\n      const result = this._renderChannel(channelMap[maskId], {\n        layerFilter,\n        onViewportActive,\n        views,\n        viewport,\n        viewportChanged\n      });\n      didRender ||= result;\n    }\n\n    // debugFBO(this.maskMap, {opaque: true});\n    return {didRender};\n  }\n\n  private _renderChannel(\n    channelInfo: Channel,\n    {\n      layerFilter,\n      onViewportActive,\n      views,\n      viewport,\n      viewportChanged\n    }: {\n      layerFilter: PreRenderOptions['layerFilter'];\n      onViewportActive: PreRenderOptions['onViewportActive'];\n      views: PreRenderOptions['views'];\n      viewport: Viewport;\n      viewportChanged: boolean;\n    }\n  ): boolean {\n    let didRender = false;\n    const oldChannelInfo = this.channels[channelInfo.index];\n    if (!oldChannelInfo) {\n      return didRender;\n    }\n\n    const maskChanged =\n      // If a channel is new\n      channelInfo === oldChannelInfo ||\n      // If sublayers have changed\n      channelInfo.layers.length !== oldChannelInfo.layers.length ||\n      channelInfo.layers.some(\n        (layer, i) =>\n          // Layer instance is updated\n          // Layer props might have changed\n          // Undetermined props could have an effect on the output geometry of a mask layer,\n          // for example getRadius+updateTriggers, radiusScale, modelMatrix\n          layer !== oldChannelInfo.layers[i] ||\n          // Some prop is in transition\n          layer.props.transitions\n      ) ||\n      // If a sublayer's positions have been updated, the cached bounds will change shallowly\n      channelInfo.layerBounds.some((b, i) => b !== oldChannelInfo.layerBounds[i]);\n\n    channelInfo.bounds = oldChannelInfo.bounds;\n    channelInfo.maskBounds = oldChannelInfo.maskBounds;\n    this.channels[channelInfo.index] = channelInfo;\n\n    if (maskChanged || viewportChanged) {\n      // Recalculate mask bounds\n      this.lastViewport = viewport;\n\n      const layerBounds = joinLayerBounds(channelInfo.layers, viewport);\n      channelInfo.bounds = layerBounds && getRenderBounds(layerBounds, viewport);\n\n      if (maskChanged || !equals(channelInfo.bounds, oldChannelInfo.bounds)) {\n        // Rerender mask FBO\n        const {maskPass, maskMap} = this;\n\n        const maskViewport =\n          layerBounds &&\n          makeViewport({\n            bounds: channelInfo.bounds!,\n            viewport,\n            width: maskMap.width,\n            height: maskMap.height,\n            border: 1\n          });\n\n        channelInfo.maskBounds = maskViewport ? maskViewport.getBounds() : [0, 0, 1, 1];\n\n        // @ts-ignore (2532) This method is only called from preRender where maskPass is defined\n        maskPass.render({\n          pass: 'mask',\n          channel: channelInfo.index,\n          layers: channelInfo.layers,\n          layerFilter,\n          viewports: maskViewport ? [maskViewport] : [],\n          onViewportActive,\n          views,\n          moduleParameters: {\n            devicePixelRatio: 1\n          }\n        });\n\n        didRender = true;\n      }\n    }\n\n    // @ts-ignore (2532) This method is only called from preRender where masks is defined\n    this.masks[channelInfo.id] = {\n      index: channelInfo.index,\n      bounds: channelInfo.maskBounds,\n      coordinateOrigin: channelInfo.coordinateOrigin,\n      coordinateSystem: channelInfo.coordinateSystem\n    };\n\n    return didRender;\n  }\n\n  /**\n   * Find a channel to render each mask into\n   * If a maskId already exists, diff and update the existing channel\n   * Otherwise replace a removed mask\n   * Otherwise create a new channel\n   * Returns a map from mask layer id to channel info\n   */\n  private _sortMaskChannels(maskLayers: Layer[]): Record<string, Channel> {\n    const channelMap = {};\n    let channelCount = 0;\n    for (const layer of maskLayers) {\n      const {id} = layer.root;\n      let channelInfo = channelMap[id];\n      if (!channelInfo) {\n        if (++channelCount > 4) {\n          log.warn('Too many mask layers. The max supported is 4')();\n          continue; // eslint-disable-line no-continue\n        }\n        channelInfo = {\n          id,\n          index: this.channels.findIndex(c => c?.id === id),\n          layers: [],\n          layerBounds: [],\n          coordinateOrigin: layer.root.props.coordinateOrigin,\n          coordinateSystem: layer.root.props.coordinateSystem\n        };\n        channelMap[id] = channelInfo;\n      }\n      channelInfo.layers.push(layer);\n      channelInfo.layerBounds.push(layer.getBounds());\n    }\n\n    for (let i = 0; i < 4; i++) {\n      const channelInfo = this.channels[i];\n      if (!channelInfo || !(channelInfo.id in channelMap)) {\n        // The mask id at this channel no longer exists\n        this.channels[i] = null;\n      }\n    }\n\n    for (const maskId in channelMap) {\n      const channelInfo = channelMap[maskId];\n\n      if (channelInfo.index < 0) {\n        channelInfo.index = this.channels.findIndex(c => !c);\n        this.channels[channelInfo.index] = channelInfo;\n      }\n    }\n    return channelMap;\n  }\n\n  getModuleParameters(): {\n    maskMap: Texture2D;\n    maskChannels: Record<string, Mask> | null;\n  } {\n    return {\n      maskMap: this.masks ? this.maskMap : this.dummyMaskMap,\n      maskChannels: this.masks\n    };\n  }\n\n  cleanup(): void {\n    if (this.dummyMaskMap) {\n      this.dummyMaskMap.delete();\n      this.dummyMaskMap = undefined;\n    }\n\n    if (this.maskPass) {\n      this.maskPass.delete();\n      this.maskPass = undefined;\n      this.maskMap = undefined;\n    }\n\n    this.lastViewport = undefined;\n    this.masks = null;\n    this.channels.length = 0;\n  }\n}\n", "import {Framebuffer, Renderbuffer, Texture2D, cssToDeviceRatio} from '@luma.gl/core';\nimport {equals} from '@math.gl/core';\nimport {_deepEqual as deepEqual} from '@deck.gl/core';\nimport type {Effect, Layer, PreRenderOptions, Viewport} from '@deck.gl/core';\nimport CollisionFilterPass from './collision-filter-pass';\nimport MaskEffect, {MaskPreRenderStats} from '../mask/mask-effect';\n// import {debugFBO} from '../utils/debug';\n\ntype CollisionFilterExtensionProps = {\n  collisionTestProps?: {};\n  collisionGroup: string;\n};\n\n// Factor by which to downscale Collision FBO relative to canvas\nconst DOWNSCALE = 2;\n\ntype RenderInfo = {\n  collisionGroup: string;\n  layers: Layer<CollisionFilterExtensionProps>[];\n  layerBounds: ([number[], number[]] | null)[];\n  allLayersLoaded: boolean;\n};\n\nexport default class CollisionFilterEffect implements Effect {\n  id = 'collision-filter-effect';\n  props = null;\n  useInPicking = true;\n  order = 1;\n\n  private channels: Record<string, RenderInfo> = {};\n  private collisionFilterPass?: CollisionFilterPass;\n  private collisionFBOs: Record<string, Framebuffer> = {};\n  private dummyCollisionMap?: Texture2D;\n  private lastViewport?: Viewport;\n\n  preRender(\n    gl: WebGLRenderingContext,\n    {\n      effects: allEffects,\n      layers,\n      layerFilter,\n      viewports,\n      onViewportActive,\n      views,\n      isPicking,\n      preRenderStats = {}\n    }: PreRenderOptions\n  ): void {\n    if (!this.dummyCollisionMap) {\n      this.dummyCollisionMap = new Texture2D(gl, {width: 1, height: 1});\n    }\n\n    if (isPicking) {\n      // Do not update on picking pass\n      return;\n    }\n\n    const collisionLayers = layers.filter(\n      // @ts-ignore\n      ({props: {visible, collisionEnabled}}) => visible && collisionEnabled\n    ) as Layer<CollisionFilterExtensionProps>[];\n    if (collisionLayers.length === 0) {\n      this.channels = {};\n      return;\n    }\n\n    if (!this.collisionFilterPass) {\n      this.collisionFilterPass = new CollisionFilterPass(gl, {id: 'default-collision-filter'});\n    }\n\n    // Detect if mask has rendered. TODO: better dependency system for Effects\n    const effects = allEffects?.filter(e => e.constructor === MaskEffect);\n    const maskEffectRendered = (preRenderStats['mask-effect'] as MaskPreRenderStats)?.didRender;\n\n    // Collect layers to render\n    const channels = this._groupByCollisionGroup(gl, collisionLayers);\n\n    const viewport = viewports[0];\n    const viewportChanged =\n      !this.lastViewport || !this.lastViewport.equals(viewport) || maskEffectRendered;\n\n    // Resize framebuffers to match canvas\n    for (const collisionGroup in channels) {\n      const collisionFBO = this.collisionFBOs[collisionGroup];\n      const renderInfo = channels[collisionGroup];\n      collisionFBO.resize({\n        width: gl.canvas.width / DOWNSCALE,\n        height: gl.canvas.height / DOWNSCALE\n      });\n      this._render(renderInfo, {\n        effects,\n        layerFilter,\n        onViewportActive,\n        views,\n        viewport,\n        viewportChanged\n      });\n    }\n\n    // debugFBO(this.collisionFBOs[Object.keys(channels)[0]], {minimap: true});\n  }\n\n  private _render(\n    renderInfo: RenderInfo,\n    {\n      effects,\n      layerFilter,\n      onViewportActive,\n      views,\n      viewport,\n      viewportChanged\n    }: {\n      effects: PreRenderOptions['effects'];\n      layerFilter: PreRenderOptions['layerFilter'];\n      onViewportActive: PreRenderOptions['onViewportActive'];\n      views: PreRenderOptions['views'];\n      viewport: Viewport;\n      viewportChanged: boolean;\n    }\n  ) {\n    const {collisionGroup} = renderInfo;\n    const oldRenderInfo = this.channels[collisionGroup];\n    if (!oldRenderInfo) {\n      return;\n    }\n\n    const needsRender =\n      viewportChanged ||\n      // If render info is new\n      renderInfo === oldRenderInfo ||\n      // If sublayers have changed\n      !deepEqual(oldRenderInfo.layers, renderInfo.layers, 1) ||\n      // If a sublayer's bounds have been updated\n      renderInfo.layerBounds.some((b, i) => !equals(b, oldRenderInfo.layerBounds[i])) ||\n      // If a sublayer's isLoaded state has been updated\n      renderInfo.allLayersLoaded !== oldRenderInfo.allLayersLoaded ||\n      // Some prop is in transition\n      renderInfo.layers.some(layer => layer.props.transitions);\n\n    this.channels[collisionGroup] = renderInfo;\n\n    if (needsRender) {\n      this.lastViewport = viewport;\n      const collisionFBO = this.collisionFBOs[collisionGroup];\n\n      // Rerender collision FBO\n      this.collisionFilterPass!.renderCollisionMap(collisionFBO, {\n        pass: 'collision-filter',\n        isPicking: true,\n        layers: renderInfo.layers,\n        effects,\n        layerFilter,\n        viewports: viewport ? [viewport] : [],\n        onViewportActive,\n        views,\n        moduleParameters: {\n          // To avoid feedback loop forming between Framebuffer and active Texture.\n          dummyCollisionMap: this.dummyCollisionMap,\n          devicePixelRatio: cssToDeviceRatio(collisionFBO.gl) / DOWNSCALE\n        }\n      });\n    }\n  }\n\n  /**\n   * Group layers by collisionGroup\n   * Returns a map from collisionGroup to render info\n   */\n  private _groupByCollisionGroup(\n    gl: WebGLRenderingContext,\n    collisionLayers: Layer<CollisionFilterExtensionProps>[]\n  ): Record<string, RenderInfo> {\n    const channelMap = {};\n    for (const layer of collisionLayers) {\n      const {collisionGroup} = layer.props;\n      let channelInfo = channelMap[collisionGroup];\n      if (!channelInfo) {\n        channelInfo = {collisionGroup, layers: [], layerBounds: [], allLayersLoaded: true};\n        channelMap[collisionGroup] = channelInfo;\n      }\n      channelInfo.layers.push(layer);\n      channelInfo.layerBounds.push(layer.getBounds());\n      if (!layer.isLoaded) {\n        channelInfo.allLayersLoaded = false;\n      }\n    }\n\n    // Create any new passes and remove any old ones\n    for (const collisionGroup of Object.keys(channelMap)) {\n      if (!this.collisionFBOs[collisionGroup]) {\n        this.createFBO(gl, collisionGroup);\n      }\n      if (!this.channels[collisionGroup]) {\n        this.channels[collisionGroup] = channelMap[collisionGroup];\n      }\n    }\n    for (const collisionGroup of Object.keys(this.collisionFBOs)) {\n      if (!channelMap[collisionGroup]) {\n        this.destroyFBO(collisionGroup);\n      }\n    }\n\n    return channelMap;\n  }\n\n  getModuleParameters(layer: Layer): {\n    collisionFBO: Framebuffer;\n    dummyCollisionMap: Texture2D;\n  } {\n    const {collisionGroup} = (layer as Layer<CollisionFilterExtensionProps>).props;\n    const {collisionFBOs, dummyCollisionMap} = this;\n    return {collisionFBO: collisionFBOs[collisionGroup], dummyCollisionMap};\n  }\n\n  cleanup(): void {\n    if (this.dummyCollisionMap) {\n      this.dummyCollisionMap.delete();\n      this.dummyCollisionMap = undefined;\n    }\n    this.channels = {};\n    for (const collisionGroup of Object.keys(this.collisionFBOs)) {\n      this.destroyFBO(collisionGroup);\n    }\n    this.collisionFBOs = {};\n    this.lastViewport = undefined;\n  }\n\n  createFBO(gl: WebGLRenderingContext, collisionGroup: string) {\n    const {width, height} = gl.canvas;\n    const collisionMap = new Texture2D(gl, {\n      width,\n      height,\n      parameters: {\n        [gl.TEXTURE_MIN_FILTER]: gl.NEAREST,\n        [gl.TEXTURE_MAG_FILTER]: gl.NEAREST,\n        [gl.TEXTURE_WRAP_S]: gl.CLAMP_TO_EDGE,\n        [gl.TEXTURE_WRAP_T]: gl.CLAMP_TO_EDGE\n      }\n    });\n\n    const depthBuffer = new Renderbuffer(gl, {format: gl.DEPTH_COMPONENT16, width, height});\n    this.collisionFBOs[collisionGroup] = new Framebuffer(gl, {\n      id: `Collision-${collisionGroup}`,\n      width,\n      height,\n      attachments: {\n        [gl.COLOR_ATTACHMENT0]: collisionMap,\n        [gl.DEPTH_ATTACHMENT]: depthBuffer\n      }\n    });\n  }\n\n  destroyFBO(collisionGroup: string) {\n    const fbo = this.collisionFBOs[collisionGroup];\n    for (const attachment of Object.values(fbo.attachments as Texture2D[])) {\n      attachment.delete();\n    }\n    fbo.delete();\n    delete this.collisionFBOs[collisionGroup];\n  }\n}\n", "import {Accessor, Layer, LayerContext, LayerExtension} from '@deck.gl/core';\nimport collision from './shader-module';\nimport CollisionFilterEffect from './collision-filter-effect';\n\nconst defaultProps = {\n  getCollisionPriority: {type: 'accessor', value: 0},\n  collisionEnabled: true,\n  collisionGroup: {type: 'string', value: 'default'},\n  collisionTestProps: {}\n};\n\nexport type CollisionFilterExtensionProps<DataT = any> = {\n  /**\n   * Accessor for collision priority. Must return a number in the range -1000 -> 1000. Features with higher values are shown preferentially.\n   */\n  getCollisionPriority?: Accessor<DataT, number>;\n\n  /**\n   * Enable/disable collisions. If collisions are disabled, all objects are rendered.\n   * @default true\n   */\n  collisionEnabled: boolean;\n\n  /**\n   * Collision group this layer belongs to. If it is not set, the 'default' collision group is used\n   */\n  collisionGroup?: string;\n\n  /**\n   * Props to override when rendering collision map\n   */\n  collisionTestProps?: {};\n};\n\n/** Allows layers to hide overlapping objects. */\nexport default class CollisionFilterExtension extends LayerExtension {\n  static defaultProps = defaultProps;\n  static extensionName = 'CollisionFilterExtension';\n\n  getShaders(this: Layer<CollisionFilterExtensionProps>): any {\n    return {modules: [collision]};\n  }\n\n  /* eslint-disable camelcase */\n  draw(this: Layer<CollisionFilterExtensionProps>, {uniforms, context, moduleParameters}: any) {\n    const {collisionEnabled} = this.props;\n    const {collisionFBO, drawToCollisionMap} = moduleParameters;\n    const enabled = collisionEnabled && Boolean(collisionFBO);\n    uniforms.collision_enabled = enabled;\n\n    if (drawToCollisionMap) {\n      // Override any props with those defined in collisionTestProps\n      // @ts-ignore\n      this.props = this.clone(this.props.collisionTestProps).props;\n    }\n  }\n\n  initializeState(\n    this: Layer<CollisionFilterExtensionProps>,\n    context: LayerContext,\n    extension: this\n  ) {\n    if (this.getAttributeManager() === null) {\n      return;\n    }\n    this.context.deck?._addDefaultEffect(new CollisionFilterEffect());\n    const attributeManager = this.getAttributeManager();\n    attributeManager!.add({\n      collisionPriorities: {\n        size: 1,\n        accessor: 'getCollisionPriority',\n        shaderAttributes: {\n          collisionPriorities: {divisor: 0},\n          instanceCollisionPriorities: {divisor: 1}\n        }\n      }\n    });\n  }\n\n  getNeedsPickingBuffer(this: Layer<CollisionFilterExtensionProps>): boolean {\n    return this.props.collisionEnabled;\n  }\n}\n", "import {project} from '@deck.gl/core';\nimport type {_ShaderModule as ShaderModule} from '@deck.gl/core';\nimport type {Texture2D} from '@luma.gl/webgl';\n\nconst vs = `\nuniform vec4 mask_bounds;\nuniform bool mask_maskByInstance;\nvec2 mask_getCoords(vec4 position) {\n  return (position.xy - mask_bounds.xy) / (mask_bounds.zw - mask_bounds.xy);\n}\n`;\n\nconst fs = `\nuniform sampler2D mask_texture;\nuniform int mask_channel;\nuniform bool mask_enabled;\nuniform bool mask_inverted;\nbool mask_isInBounds(vec2 texCoords) {\n  if (!mask_enabled) {\n    return true;\n  }\n  vec4 maskColor = texture2D(mask_texture, texCoords);\n  float maskValue = 1.0;\n  if (mask_channel == 0) {\n    maskValue = maskColor.r;\n  } else if (mask_channel == 1) {\n    maskValue = maskColor.g;\n  } else if (mask_channel == 2) {\n    maskValue = maskColor.b;\n  } else if (mask_channel == 3) {\n    maskValue = maskColor.a;\n  }\n\n  if (mask_inverted) {\n    return maskValue >= 0.5;\n  } else {\n    return maskValue < 0.5;\n  }\n}\n`;\n\nconst inject = {\n  'vs:#decl': `\nvarying vec2 mask_texCoords;\n`,\n  'vs:#main-end': `\n   vec4 mask_common_position;\n   if (mask_maskByInstance) {\n     mask_common_position = project_position(vec4(geometry.worldPosition, 1.0));\n   } else {\n     mask_common_position = geometry.position;\n   }\n   mask_texCoords = mask_getCoords(mask_common_position);\n`,\n  'fs:#decl': `\nvarying vec2 mask_texCoords;\n`,\n  'fs:#main-start': `\n  if (mask_enabled) {\n    bool mask = mask_isInBounds(mask_texCoords);\n\n    // Debug: show extent of render target\n    // gl_FragColor = vec4(mask_texCoords, 0.0, 1.0);\n    gl_FragColor = texture2D(mask_texture, mask_texCoords);\n\n    if (!mask) discard;\n  }\n`\n};\n\ntype MaskModuleSettings = {\n  maskMap?: Texture2D;\n};\n\n/* eslint-disable camelcase */\nconst getMaskUniforms = (opts?: MaskModuleSettings | {}): Record<string, any> => {\n  if (opts && 'maskMap' in opts) {\n    return {\n      mask_texture: opts.maskMap\n    };\n  }\n  return {};\n};\n\nexport default {\n  name: 'mask',\n  dependencies: [project],\n  vs,\n  fs,\n  inject,\n  getUniforms: getMaskUniforms\n} as ShaderModule<MaskModuleSettings>;\n", "import {COORDINATE_SYSTEM, Layer, LayerExtension, log} from '@deck.gl/core';\nimport mask from './shader-module';\nimport MaskEffect from './mask-effect';\n\nconst defaultProps = {\n  maskId: '',\n  maskByInstance: undefined,\n  maskInverted: false\n};\n\nexport type MaskExtensionProps = {\n  /**\n   * Id of the layer that defines the mask. The mask layer must use the prop `operation: 'mask'`.\n   * Masking is disabled if `maskId` is empty or no valid mask layer with the specified id is found.\n   */\n  maskId?: string;\n  /**\n   * controls whether an object is clipped by its anchor (usually defined by an accessor called `getPosition`, e.g. icon, scatterplot) or by its geometry (e.g. path, polygon).\n   * If not specified, it is automatically deduced from the layer.\n   */\n  maskByInstance?: boolean;\n  /**\n   * Inverts the masking operation\n   */\n  maskInverted?: boolean;\n};\n\n/** Allows layers to show/hide objects by a geofence. */\nexport default class MaskExtension extends LayerExtension {\n  static defaultProps = defaultProps;\n  static extensionName = 'MaskExtension';\n\n  initializeState(this: Layer<MaskExtensionProps>) {\n    this.context.deck?._addDefaultEffect(new MaskEffect());\n  }\n\n  getShaders(this: Layer<MaskExtensionProps>): any {\n    // Infer by geometry if 'maskByInstance' prop isn't explictly set\n    let maskByInstance = 'instancePositions' in this.getAttributeManager()!.attributes;\n    // Users can override by setting the `maskByInstance` prop\n    if (this.props.maskByInstance !== undefined) {\n      maskByInstance = Boolean(this.props.maskByInstance);\n    }\n    this.state.maskByInstance = maskByInstance;\n\n    return {\n      modules: [mask]\n    };\n  }\n\n  /* eslint-disable camelcase */\n  draw(this: Layer<Required<MaskExtensionProps>>, {uniforms, context, moduleParameters}: any) {\n    uniforms.mask_maskByInstance = this.state.maskByInstance;\n    const {maskId, maskInverted} = this.props;\n    const {maskChannels} = moduleParameters;\n    const {viewport} = context;\n    if (maskChannels && maskChannels[maskId]) {\n      const {index, bounds, coordinateOrigin: fromCoordinateOrigin} = maskChannels[maskId];\n      let {coordinateSystem: fromCoordinateSystem} = maskChannels[maskId];\n      uniforms.mask_enabled = true;\n      uniforms.mask_channel = index;\n      uniforms.mask_inverted = maskInverted;\n\n      if (fromCoordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n        fromCoordinateSystem = viewport.isGeospatial\n          ? COORDINATE_SYSTEM.LNGLAT\n          : COORDINATE_SYSTEM.CARTESIAN;\n      }\n      const opts = {modelMatrix: null, fromCoordinateOrigin, fromCoordinateSystem};\n      const bl = this.projectPosition([bounds[0], bounds[1], 0], opts);\n      const tr = this.projectPosition([bounds[2], bounds[3], 0], opts);\n      uniforms.mask_bounds = [bl[0], bl[1], tr[0], tr[1]];\n    } else {\n      if (maskId) {\n        log.warn(`Could not find a mask layer with id: ${maskId}`)();\n      }\n      uniforms.mask_enabled = false;\n    }\n  }\n}\n", "/* eslint-disable camelcase */\n\nimport {project} from '@deck.gl/core';\nimport type {_ShaderModule as ShaderModule} from '@deck.gl/core';\n\nimport type {Texture2D} from '@luma.gl/core';\nimport type {Bounds} from '../utils/projection-utils';\nimport type {TerrainCover} from './terrain-cover';\n\n/** Module parameters expected by the terrain shader module */\nexport type TerrainModuleSettings = {\n  pickingActive?: boolean;\n  heightMap: Texture2D | null;\n  heightMapBounds?: Bounds | null;\n  dummyHeightMap: Texture2D;\n  terrainCover?: TerrainCover | null;\n  drawToTerrainHeightMap?: boolean;\n  useTerrainHeightMap?: boolean;\n  terrainSkipRender?: boolean;\n};\n\n/** A model can have one of the following modes */\nexport const TERRAIN_MODE = {\n  NONE: 0,\n  /** A terrain layer rendering encoded ground elevation into the height map */\n  WRITE_HEIGHT_MAP: 1,\n  /** An offset layer reading encoded ground elevation from the height map */\n  USE_HEIGHT_MAP: 2,\n  /** A terrain layer rendering to screen, using the cover fbo overlaid with its own texture */\n  USE_COVER: 3,\n  /** A terrain layer rendering to screen, using the cover fbo as texture */\n  USE_COVER_ONLY: 4,\n  /** Draped layer is rendered into a texture, and never to screen */\n  SKIP: 5\n};\n\nconst TERRAIN_MODE_CONSTANTS = Object.keys(TERRAIN_MODE)\n  .map(key => `const float TERRAIN_MODE_${key} = ${TERRAIN_MODE[key]}.0;`)\n  .join('\\n');\n\nexport const terrainModule = {\n  name: 'terrain',\n  dependencies: [project],\n  inject: {\n    'vs:#decl': `\nuniform float terrain_mode;\nuniform sampler2D terrain_map;\nuniform vec4 terrain_bounds;\nvarying vec3 commonPos;\n${TERRAIN_MODE_CONSTANTS}\n    `,\n    'vs:#main-start': `\nif (terrain_mode == TERRAIN_MODE_SKIP) {\n  gl_Position = vec4(0.0);\n  return;\n}\n`,\n    'vs:DECKGL_FILTER_GL_POSITION': `\ncommonPos = geometry.position.xyz;\nif (terrain_mode == TERRAIN_MODE_WRITE_HEIGHT_MAP) {\n  vec2 texCoords = (commonPos.xy - terrain_bounds.xy) / terrain_bounds.zw;\n  position = vec4(texCoords * 2.0 - 1.0, 0.0, 1.0);\n  commonPos.z += project_uCommonOrigin.z;\n}\nif (terrain_mode == TERRAIN_MODE_USE_HEIGHT_MAP) {\n  vec3 anchor = geometry.worldPosition;\n  anchor.z = 0.0;\n  vec3 anchorCommon = project_position(anchor);\n  vec2 texCoords = (anchorCommon.xy - terrain_bounds.xy) / terrain_bounds.zw;\n  if (texCoords.x >= 0.0 && texCoords.y >= 0.0 && texCoords.x <= 1.0 && texCoords.y <= 1.0) {\n    float terrainZ = texture2D(terrain_map, texCoords).r;\n    geometry.position.z += terrainZ;\n    position = project_common_position_to_clipspace(geometry.position);\n  }\n}\n    `,\n    'fs:#decl': `\nuniform float terrain_mode;\nuniform sampler2D terrain_map;\nuniform vec4 terrain_bounds;\nvarying vec3 commonPos;\n${TERRAIN_MODE_CONSTANTS}\n    `,\n    'fs:#main-start': `\nif (terrain_mode == TERRAIN_MODE_WRITE_HEIGHT_MAP) {\n  gl_FragColor = vec4(commonPos.z, 0.0, 0.0, 1.0);\n  return;\n}\n    `,\n    'fs:DECKGL_FILTER_COLOR': `\nif ((terrain_mode == TERRAIN_MODE_USE_COVER) || (terrain_mode == TERRAIN_MODE_USE_COVER_ONLY)) {\n  vec2 texCoords = (commonPos.xy - terrain_bounds.xy) / terrain_bounds.zw;\n  vec4 pixel = texture2D(terrain_map, texCoords);\n  if (terrain_mode == TERRAIN_MODE_USE_COVER_ONLY) {\n    color = pixel;\n  } else {\n    // pixel is premultiplied\n    color = pixel + color * (1.0 - pixel.a);\n  }\n  return;\n}\n    `\n  },\n  // eslint-disable-next-line complexity\n  getUniforms: (opts = {}, uniforms) => {\n    if ('dummyHeightMap' in opts) {\n      const {\n        drawToTerrainHeightMap,\n        heightMap,\n        heightMapBounds,\n        dummyHeightMap,\n        terrainCover,\n        useTerrainHeightMap,\n        terrainSkipRender\n      } = opts;\n      const {project_uCommonOrigin} = uniforms;\n\n      let mode: number = terrainSkipRender ? TERRAIN_MODE.SKIP : TERRAIN_MODE.NONE;\n      // height map if case USE_HEIGHT_MAP, terrain cover if USE_COVER, otherwise empty\n      let sampler: Texture2D = dummyHeightMap;\n      // height map bounds if case USE_HEIGHT_MAP, terrain cover bounds if USE_COVER, otherwise null\n      let bounds: number[] | null = null;\n      if (drawToTerrainHeightMap) {\n        mode = TERRAIN_MODE.WRITE_HEIGHT_MAP;\n        bounds = heightMapBounds!;\n      } else if (useTerrainHeightMap && heightMap) {\n        mode = TERRAIN_MODE.USE_HEIGHT_MAP;\n        sampler = heightMap;\n        bounds = heightMapBounds!;\n      } else if (terrainCover) {\n        // This is a terrain layer\n        const isPicking = opts.pickingActive;\n        sampler = isPicking\n          ? terrainCover.getPickingFramebuffer()\n          : terrainCover.getRenderFramebuffer();\n        if (isPicking) {\n          // Never render the layer itself in picking pass\n          mode = TERRAIN_MODE.SKIP;\n        }\n        if (sampler) {\n          mode = mode === TERRAIN_MODE.SKIP ? TERRAIN_MODE.USE_COVER_ONLY : TERRAIN_MODE.USE_COVER;\n          bounds = terrainCover.bounds;\n        } else {\n          sampler = dummyHeightMap;\n        }\n      }\n\n      /* eslint-disable camelcase */\n      return {\n        terrain_mode: mode,\n        terrain_map: sampler,\n        // Convert bounds to the common space, as [minX, minY, width, height]\n        terrain_bounds: bounds\n          ? [\n              bounds[0] - project_uCommonOrigin[0],\n              bounds[1] - project_uCommonOrigin[1],\n              bounds[2] - bounds[0],\n              bounds[3] - bounds[1]\n            ]\n          : [0, 0, 0, 0]\n      };\n    }\n    return null;\n  }\n} as ShaderModule<TerrainModuleSettings>;\n", "import {Framebuffer, Texture2D, isWebGL2} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\n\nexport function createRenderTarget(\n  gl: WebGLRenderingContext,\n  opts: {\n    id: string;\n    float?: boolean;\n  }\n) {\n  return new Framebuffer(gl, {\n    id: opts.id,\n    attachments: {\n      [gl.COLOR_ATTACHMENT0]: new Texture2D(gl, {\n        ...(opts.float && {\n          format: isWebGL2(gl) ? GL.RGBA32F : GL.RGBA,\n          type: GL.FLOAT\n        }),\n        mipmaps: false,\n        parameters: {\n          [gl.TEXTURE_MIN_FILTER]: gl.LINEAR,\n          [gl.TEXTURE_MAG_FILTER]: gl.LINEAR,\n          [gl.TEXTURE_WRAP_S]: gl.CLAMP_TO_EDGE,\n          [gl.TEXTURE_WRAP_T]: gl.CLAMP_TO_EDGE\n        }\n      })\n    }\n  });\n}\n", "import {Framebuffer} from '@luma.gl/core';\n\nimport type {Layer, Viewport} from '@deck.gl/core';\n\nimport {createRenderTarget} from './utils';\nimport {joinLayerBounds, makeViewport, getRenderBounds, Bounds} from '../utils/projection-utils';\n\ntype TileHeader = {\n  boundingBox: [min: number[], max: number[]];\n};\n\n/**\n * Manages the lifecycle of the terrain cover (draped textures over a terrain mesh).\n * One terrain cover is created for each unique terrain layer (primitive layer with operation:terrain).\n * It is updated when the terrain source layer's mesh changes or when any of the terrainDrawMode:drape\n * layers requires redraw.\n * During the draw call of a terrain layer, the drape texture is overlaid on top of the layer's own color.\n */\nexport class TerrainCover {\n  isDirty: boolean = true;\n  /** The terrain layer that this instance belongs to */\n  targetLayer: Layer;\n  /** Viewport used to draw into the texture */\n  renderViewport: Viewport | null = null;\n  /** Bounds of the terrain cover texture, in cartesian space */\n  bounds: Bounds | null = null;\n\n  private fbo?: Framebuffer;\n  private pickingFbo?: Framebuffer;\n  private layers: string[] = [];\n  private tile: TileHeader | null;\n  /** Cached version of targetLayer.getBounds() */\n  private targetBounds: [number[], number[]] | null = null;\n  /** targetBounds in cartesian space */\n  private targetBoundsCommon: Bounds | null = null;\n\n  constructor(targetLayer: Layer) {\n    this.targetLayer = targetLayer;\n    this.tile = getTile(targetLayer);\n  }\n\n  get id() {\n    return this.targetLayer.id;\n  }\n\n  /** returns true if the target layer is still in use (i.e. not finalized) */\n  get isActive(): boolean {\n    return Boolean(this.targetLayer.getCurrentLayer());\n  }\n\n  shouldUpdate({\n    targetLayer,\n    viewport,\n    layers,\n    layerNeedsRedraw\n  }: {\n    targetLayer?: Layer;\n    viewport?: Viewport;\n    layers?: Layer[];\n    layerNeedsRedraw?: Record<string, boolean>;\n  }): boolean {\n    if (targetLayer) {\n      this.targetLayer = targetLayer;\n    }\n    const sizeChanged = viewport ? this._updateViewport(viewport) : false;\n\n    let layersChanged = layers ? this._updateLayers(layers) : false;\n\n    if (layerNeedsRedraw) {\n      for (const id of this.layers) {\n        if (layerNeedsRedraw[id]) {\n          layersChanged = true;\n          // console.log('layer needs redraw', id);\n          break;\n        }\n      }\n    }\n\n    return layersChanged || sizeChanged;\n  }\n\n  /** Compare layers with the last version. Only rerender if necessary. */\n  private _updateLayers(layers: Layer[]): boolean {\n    let needsRedraw = false;\n    layers = this.tile ? getIntersectingLayers(this.tile, layers) : layers;\n\n    if (layers.length !== this.layers.length) {\n      needsRedraw = true;\n      // console.log('layers count changed', this.layers.length, '>>', layers.length);\n    } else {\n      for (let i = 0; i < layers.length; i++) {\n        const id = layers[i].id;\n        if (id !== this.layers[i]) {\n          needsRedraw = true;\n          // console.log('layer added/removed', id);\n          break;\n        }\n      }\n    }\n    if (needsRedraw) {\n      this.layers = layers.map(layer => layer.id);\n    }\n    return needsRedraw;\n  }\n\n  /** Compare viewport and terrain bounds with the last version. Only rerender if necesary. */\n  private _updateViewport(viewport: Viewport): boolean {\n    const targetLayer = this.targetLayer;\n    let shouldRedraw = false;\n\n    if (this.tile && 'boundingBox' in this.tile) {\n      if (!this.targetBounds) {\n        shouldRedraw = true;\n        this.targetBounds = this.tile.boundingBox;\n\n        const bottomLeftCommon = viewport.projectPosition(this.targetBounds[0]);\n        const topRightCommon = viewport.projectPosition(this.targetBounds[1]);\n        this.targetBoundsCommon = [\n          bottomLeftCommon[0],\n          bottomLeftCommon[1],\n          topRightCommon[0],\n          topRightCommon[1]\n        ];\n      }\n    } else if (this.targetBounds !== targetLayer.getBounds()) {\n      // console.log('bounds changed', this.bounds, '>>', newBounds);\n      shouldRedraw = true;\n      this.targetBounds = targetLayer.getBounds();\n      this.targetBoundsCommon = joinLayerBounds([targetLayer], viewport);\n    }\n\n    if (!this.targetBoundsCommon) {\n      return false;\n    }\n\n    const newZoom = Math.ceil(viewport.zoom + 0.5);\n    // If the terrain layer is bound to a tile, always render a texture that cover the whole tile.\n    // Otherwise, use the smaller of layer bounds and the viewport bounds.\n    if (this.tile) {\n      this.bounds = this.targetBoundsCommon;\n    } else {\n      const oldZoom = this.renderViewport?.zoom;\n      shouldRedraw = shouldRedraw || newZoom !== oldZoom;\n      const newBounds = getRenderBounds(this.targetBoundsCommon, viewport);\n      const oldBounds = this.bounds;\n      shouldRedraw = shouldRedraw || !oldBounds || newBounds.some((x, i) => x !== oldBounds[i]);\n      this.bounds = newBounds;\n    }\n\n    if (shouldRedraw) {\n      this.renderViewport = makeViewport({\n        bounds: this.bounds,\n        zoom: newZoom,\n        viewport\n      });\n    }\n\n    return shouldRedraw;\n  }\n\n  getRenderFramebuffer(): Framebuffer | null {\n    if (!this.renderViewport || this.layers.length === 0) {\n      return null;\n    }\n    if (!this.fbo) {\n      this.fbo = createRenderTarget(this.targetLayer.context.gl, {id: this.id});\n    }\n    return this.fbo;\n  }\n\n  getPickingFramebuffer(): Framebuffer | null {\n    if (!this.renderViewport || (this.layers.length === 0 && !this.targetLayer.props.pickable)) {\n      return null;\n    }\n    if (!this.pickingFbo) {\n      this.pickingFbo = createRenderTarget(this.targetLayer.context.gl, {id: `${this.id}-picking`});\n    }\n    return this.pickingFbo;\n  }\n\n  filterLayers(layers: Layer[]) {\n    return layers.filter(({id}) => this.layers.includes(id));\n  }\n\n  delete() {\n    const {fbo, pickingFbo} = this;\n    if (fbo) {\n      fbo.texture.delete();\n      fbo.delete();\n    }\n    if (pickingFbo) {\n      pickingFbo.texture.delete();\n      pickingFbo.delete();\n    }\n  }\n}\n\n/**\n * Remove layers that do not overlap with the current terrain cover.\n * This implementation only has effect when a TileLayer is overlaid on top of a TileLayer\n */\nfunction getIntersectingLayers(sourceTile: TileHeader, layers: Layer[]): Layer[] {\n  return layers.filter(layer => {\n    const tile = getTile(layer);\n    if (tile) {\n      return intersect(sourceTile.boundingBox, tile.boundingBox);\n    }\n    return true;\n  });\n}\n\n/** If layer is the descendent of a TileLayer, return the corresponding tile. */\nfunction getTile(layer: Layer): TileHeader | null {\n  while (layer) {\n    // @ts-expect-error tile may not exist\n    const {tile} = layer.props;\n    if (tile) {\n      return tile;\n    }\n    layer = layer.parent as Layer;\n  }\n  return null;\n}\n\nfunction intersect(b1?: [number[], number[]], b2?: [number[], number[]]): boolean {\n  if (b1 && b2) {\n    return b1[0][0] < b2[1][0] && b2[0][0] < b1[1][0] && b1[0][1] < b2[1][1] && b2[0][1] < b1[1][1];\n  }\n  return false;\n}\n", "import {withParameters} from '@luma.gl/core';\nimport {Layer, Viewport, _LayersPass as LayersPass, LayersPassRenderOptions} from '@deck.gl/core';\nimport type {HeightMapBuilder} from './height-map-builder';\nimport type {TerrainCover} from './terrain-cover';\n\nimport GL from '@luma.gl/constants';\n\nexport type TerrainPassRenderOptions = LayersPassRenderOptions;\n\n/** Renders textures used by the TerrainEffect render pass */\nexport class TerrainPass extends LayersPass {\n  getRenderableLayers(viewport: Viewport, opts: TerrainPassRenderOptions): Layer[] {\n    const {layers} = opts;\n    const result: Layer[] = [];\n    const drawParamsByIndex = this._getDrawLayerParams(viewport, opts, true);\n    for (let i = 0; i < layers.length; i++) {\n      const layer = layers[i];\n      if (!layer.isComposite && drawParamsByIndex[i].shouldDrawLayer) {\n        result.push(layer);\n      }\n    }\n\n    return result;\n  }\n\n  renderHeightMap(heightMap: HeightMapBuilder, opts: Partial<TerrainPassRenderOptions>) {\n    // console.log('Updating height map')\n    const target = heightMap.getRenderFramebuffer();\n    const viewport = heightMap.renderViewport;\n\n    if (!target || !viewport) {\n      return;\n    }\n\n    target.resize(viewport);\n\n    withParameters(\n      this.gl,\n      {\n        clearColor: [0, 0, 0, 0],\n        blend: true,\n        blendFunc: [GL.ONE, GL.ONE],\n        blendEquation: GL.MAX,\n        depthTest: false\n      },\n      () =>\n        this.render({\n          ...opts,\n          target,\n          pass: 'terrain-height-map',\n          layers: opts.layers!,\n          viewports: [viewport],\n          effects: []\n        })\n    );\n  }\n\n  renderTerrainCover(terrainCover: TerrainCover, opts: Partial<TerrainPassRenderOptions>) {\n    // console.log('Updating terrain cover ' + terrainCover.id)\n    const target = terrainCover.getRenderFramebuffer();\n    const viewport = terrainCover.renderViewport;\n\n    if (!target || !viewport) {\n      return;\n    }\n\n    const layers = terrainCover.filterLayers(opts.layers!);\n    target.resize(viewport);\n\n    withParameters(\n      this.gl,\n      {\n        depthTest: false\n      },\n      () =>\n        this.render({\n          ...opts,\n          target,\n          pass: `terrain-cover-${terrainCover.id}`,\n          layers,\n          effects: [],\n          viewports: [viewport]\n        })\n    );\n  }\n}\n", "import {\n  Layer,\n  Viewport,\n  LayersPassRenderOptions,\n  _PickLayersPass as PickLayersPass\n} from '@deck.gl/core';\nimport {withParameters} from '@luma.gl/core';\nimport type {TerrainCover} from './terrain-cover';\n\nexport type TerrainPickingPassRenderOptions = LayersPassRenderOptions & {\n  pickZ: boolean;\n};\n\n/** Renders textures used by the TerrainEffect picking pass */\nexport class TerrainPickingPass extends PickLayersPass {\n  /** Save layer index for use when drawing to terrain cover.\n   * When a terrain cover's picking buffer is rendered,\n   * we need to make sure each layer receives a consistent index (encoded in the alpha channel)\n   * so that a picked color can be decoded back to the correct layer.\n   * Updated in getRenderableLayers which is called in TerrainEffect.preRender\n   */\n  drawParameters: Record<string, any> = {};\n\n  getRenderableLayers(viewport: Viewport, opts: TerrainPickingPassRenderOptions): Layer[] {\n    const {layers} = opts;\n    const result: Layer[] = [];\n    this.drawParameters = {};\n    this._resetColorEncoder(opts.pickZ);\n    const drawParamsByIndex = this._getDrawLayerParams(viewport, opts);\n    for (let i = 0; i < layers.length; i++) {\n      const layer = layers[i];\n      if (!layer.isComposite && drawParamsByIndex[i].shouldDrawLayer) {\n        result.push(layer);\n        this.drawParameters[layer.id] = drawParamsByIndex[i].layerParameters;\n      }\n    }\n\n    return result;\n  }\n\n  renderTerrainCover(terrainCover: TerrainCover, opts: Partial<TerrainPickingPassRenderOptions>) {\n    // console.log('Updating terrain cover for picking ' + terrainCover.id)\n    const target = terrainCover.getPickingFramebuffer();\n    const viewport = terrainCover.renderViewport;\n\n    if (!target || !viewport) {\n      return;\n    }\n\n    const layers = terrainCover.filterLayers(opts.layers!);\n    const terrainLayer = terrainCover.targetLayer;\n    if (terrainLayer.props.pickable) {\n      layers.unshift(terrainLayer);\n    }\n    target.resize(viewport);\n\n    withParameters(\n      this.gl,\n      {\n        depthTest: false\n      },\n      () =>\n        this.render({\n          ...opts,\n          pickingFBO: target,\n          pass: `terrain-cover-picking-${terrainCover.id}`,\n          layers,\n          effects: [],\n          viewports: [viewport],\n          // Disable the default culling because TileLayer would cull sublayers based on the screen viewport,\n          // not the viewport of the terrain cover. Culling is already done by `terrainCover.filterLayers`\n          cullRect: undefined,\n          deviceRect: viewport,\n          pickZ: false\n        })\n    );\n  }\n\n  protected getLayerParameters(layer: Layer, layerIndex: number, viewport: Viewport): any {\n    if (this.drawParameters[layer.id]) {\n      return this.drawParameters[layer.id];\n    }\n    const parameters = super.getLayerParameters(layer, layerIndex, viewport);\n    parameters.blend = true;\n    return parameters;\n  }\n}\n", "import {Framebuffer} from '@luma.gl/core';\nimport {joinLayerBounds, getRenderBounds, makeViewport, Bounds} from '../utils/projection-utils';\nimport {createRenderTarget} from './utils';\n\nimport type {Viewport, Layer} from '@deck.gl/core';\n\nconst MAP_MAX_SIZE = 2048;\n\n/**\n * Manages the lifecycle of the height map (a framebuffer that encodes elevation).\n * One instance of height map is is shared across all layers. It is updated when the viewport changes\n * or when some terrain source layer's data changes.\n * During the draw call of any terrainDrawMode:offset layers,\n * the vertex shader reads from this framebuffer to retrieve its z offset.\n */\nexport class HeightMapBuilder {\n  /** Viewport used to draw into the texture */\n  renderViewport: Viewport | null = null;\n  /** Bounds of the height map texture, in cartesian space */\n  bounds: Bounds | null = null;\n\n  protected fbo?: Framebuffer;\n  protected gl: WebGLRenderingContext;\n  /** Last rendered layers */\n  private layers: Layer[] = [];\n  /** Last layer.getBounds() */\n  private layersBounds: ([number[], number[]] | null)[] = [];\n  /** The union of layersBounds in cartesian space */\n  private layersBoundsCommon: Bounds | null = null;\n  private lastViewport: Viewport | null = null;\n\n  static isSupported(gl: WebGLRenderingContext): boolean {\n    return Framebuffer.isSupported(gl, {colorBufferFloat: true});\n  }\n\n  constructor(gl: WebGLRenderingContext) {\n    this.gl = gl;\n  }\n\n  /** Returns the height map framebuffer for read/write access.\n   * Returns null when the texture is invalid.\n   */\n  getRenderFramebuffer(): Framebuffer | null {\n    if (!this.renderViewport) {\n      return null;\n    }\n    if (!this.fbo) {\n      this.fbo = createRenderTarget(this.gl, {id: 'height-map', float: true});\n    }\n    return this.fbo;\n  }\n\n  /** Called every render cycle to check if the framebuffer needs update */\n  shouldUpdate({layers, viewport}: {layers: Layer[]; viewport: Viewport}): boolean {\n    const layersChanged =\n      layers.length !== this.layers.length ||\n      layers.some(\n        (layer, i) =>\n          // Layer instance is updated\n          // Layer props might have changed\n          // Undetermined props could have an effect on the output geometry of a terrain source,\n          // for example getElevation+updateTriggers, elevationScale, modelMatrix\n          layer !== this.layers[i] ||\n          // Some prop is in transition\n          layer.props.transitions ||\n          // Layer's geometry bounds have changed\n          layer.getBounds() !== this.layersBounds[i]\n      );\n\n    if (layersChanged) {\n      // Recalculate cached bounds\n      this.layers = layers;\n      this.layersBounds = layers.map(layer => layer.getBounds());\n      this.layersBoundsCommon = joinLayerBounds(layers, viewport);\n    }\n\n    const viewportChanged = !this.lastViewport || !viewport.equals(this.lastViewport);\n\n    if (!this.layersBoundsCommon) {\n      this.renderViewport = null;\n    } else if (layersChanged || viewportChanged) {\n      const bounds = getRenderBounds(this.layersBoundsCommon, viewport);\n      if (bounds[2] <= bounds[0] || bounds[3] <= bounds[1]) {\n        this.renderViewport = null;\n        return false;\n      }\n\n      this.bounds = bounds;\n      this.lastViewport = viewport;\n\n      const scale = viewport.scale;\n      const pixelWidth = (bounds[2] - bounds[0]) * scale;\n      const pixelHeight = (bounds[3] - bounds[1]) * scale;\n\n      this.renderViewport =\n        pixelWidth > 0 || pixelHeight > 0\n          ? makeViewport({\n              // It's not important whether the geometry is visible in this viewport, because\n              // vertices will not use the standard project_to_clipspace in the DRAW_TO_HEIGHT_MAP shader\n              // However the viewport must have the same center and zoom as the screen viewport\n              // So that projection uniforms used for calculating z are the same\n              bounds: [\n                viewport.center[0] - 1,\n                viewport.center[1] - 1,\n                viewport.center[0] + 1,\n                viewport.center[1] + 1\n              ],\n              zoom: viewport.zoom,\n              width: Math.min(pixelWidth, MAP_MAX_SIZE),\n              height: Math.min(pixelHeight, MAP_MAX_SIZE),\n              viewport\n            })\n          : null;\n      return true;\n    }\n    return false;\n  }\n\n  delete() {\n    if (this.fbo) {\n      this.fbo.color.delete();\n      this.fbo.delete();\n    }\n  }\n}\n", "import {Texture2D, ProgramManager} from '@luma.gl/core';\nimport {log} from '@deck.gl/core';\n\nimport {terrainModule, TerrainModuleSettings} from './shader-module';\nimport {TerrainCover} from './terrain-cover';\nimport {TerrainPass} from './terrain-pass';\nimport {TerrainPickingPass, TerrainPickingPassRenderOptions} from './terrain-picking-pass';\nimport {HeightMapBuilder} from './height-map-builder';\n\nimport type {Effect, PreRenderOptions, Layer, Viewport} from '@deck.gl/core';\n\n/** Class to manage terrain effect */\nexport class TerrainEffect implements Effect {\n  id = 'terrain-effect';\n  props = null;\n  useInPicking = true;\n\n  /** true if picking in the current pass */\n  private isPicking: boolean = false;\n  /** true if should use in the current pass */\n  private isDrapingEnabled: boolean = false;\n  /** An empty texture as placeholder */\n  private dummyHeightMap: Texture2D;\n  /** A texture encoding the ground elevation, updated once per redraw. Used by layers with offset mode */\n  private heightMap?: HeightMapBuilder;\n  private terrainPass!: TerrainPass;\n  private terrainPickingPass!: TerrainPickingPass;\n  /** One texture for each primitive terrain layer, into which the draped layers render */\n  private terrainCovers: Map<string, TerrainCover> = new Map();\n\n  initialize(gl: WebGLRenderingContext) {\n    this.dummyHeightMap = new Texture2D(gl, {\n      width: 1,\n      height: 1,\n      data: new Uint8Array([0, 0, 0, 0])\n    });\n    this.terrainPass = new TerrainPass(gl, {id: 'terrain'});\n    this.terrainPickingPass = new TerrainPickingPass(gl, {id: 'terrain-picking'});\n\n    if (HeightMapBuilder.isSupported(gl)) {\n      this.heightMap = new HeightMapBuilder(gl);\n    } else {\n      log.warn('Terrain offset mode is not supported by this browser')();\n    }\n\n    ProgramManager.getDefaultProgramManager(gl).addDefaultModule(terrainModule);\n  }\n\n  preRender(gl: WebGLRenderingContext, opts: PreRenderOptions): void {\n    if (!this.dummyHeightMap) {\n      // First time this effect is in use, initialize resources and register the shader module\n      this.initialize(gl);\n      for (const layer of opts.layers) {\n        // Force the terrain layer (and its descendents) to rebuild their models with the new shader\n        if (layer.props.operation.includes('terrain')) {\n          layer.setChangeFlags({extensionsChanged: true});\n        }\n      }\n    }\n\n    // @ts-expect-error pickZ only defined in picking pass\n    if (opts.pickZ) {\n      // Do not update if picking attributes\n      this.isDrapingEnabled = false;\n      return;\n    }\n\n    const {viewports, isPicking = false} = opts;\n    this.isPicking = isPicking;\n    this.isDrapingEnabled = true;\n\n    // TODO - support multiple views?\n    const viewport = viewports[0];\n    const layers = (isPicking ? this.terrainPickingPass : this.terrainPass).getRenderableLayers(\n      viewport,\n      opts as TerrainPickingPassRenderOptions\n    );\n\n    const terrainLayers = layers.filter(l => l.props.operation.includes('terrain'));\n    if (terrainLayers.length === 0) {\n      return;\n    }\n\n    if (!isPicking) {\n      const offsetLayers = layers.filter(l => l.state.terrainDrawMode === 'offset');\n      if (offsetLayers.length > 0) {\n        this._updateHeightMap(terrainLayers, viewport, opts);\n      }\n    }\n\n    const drapeLayers = layers.filter(l => l.state.terrainDrawMode === 'drape');\n    this._updateTerrainCovers(terrainLayers, drapeLayers, viewport, opts);\n  }\n\n  getModuleParameters(layer: Layer): TerrainModuleSettings {\n    const {terrainDrawMode} = layer.state;\n\n    return {\n      heightMap: this.heightMap?.getRenderFramebuffer(),\n      heightMapBounds: this.heightMap?.bounds,\n      dummyHeightMap: this.dummyHeightMap,\n      terrainCover: this.isDrapingEnabled ? this.terrainCovers.get(layer.id) : null,\n      useTerrainHeightMap: terrainDrawMode === 'offset',\n      terrainSkipRender: terrainDrawMode === 'drape' || !layer.props.operation.includes('draw')\n    };\n  }\n\n  cleanup(): void {\n    if (this.dummyHeightMap) {\n      this.dummyHeightMap.delete();\n      this.dummyHeightMap = undefined;\n    }\n\n    if (this.heightMap) {\n      this.heightMap.delete();\n      this.heightMap = undefined;\n    }\n\n    for (const terrainCover of this.terrainCovers.values()) {\n      terrainCover.delete();\n    }\n    this.terrainCovers.clear();\n  }\n\n  private _updateHeightMap(terrainLayers: Layer[], viewport: Viewport, opts: PreRenderOptions) {\n    if (!this.heightMap) {\n      // Not supported\n      return;\n    }\n\n    const shouldUpdate = this.heightMap.shouldUpdate({layers: terrainLayers, viewport});\n    if (!shouldUpdate) {\n      return;\n    }\n\n    this.terrainPass.renderHeightMap(this.heightMap, {\n      ...opts,\n      layers: terrainLayers,\n      moduleParameters: {\n        heightMapBounds: this.heightMap.bounds,\n        dummyHeightMap: this.dummyHeightMap,\n        devicePixelRatio: 1,\n        drawToTerrainHeightMap: true\n      }\n    });\n  }\n\n  private _updateTerrainCovers(\n    terrainLayers: Layer[],\n    drapeLayers: Layer[],\n    viewport: Viewport,\n    opts: PreRenderOptions\n  ) {\n    // Mark a terrain cover as dirty if one of the drape layers needs redraw\n    const layerNeedsRedraw: Record<string, boolean> = {};\n    for (const layer of drapeLayers) {\n      if (layer.state.terrainCoverNeedsRedraw) {\n        layerNeedsRedraw[layer.id] = true;\n        layer.state.terrainCoverNeedsRedraw = false;\n      }\n    }\n    for (const terrainCover of this.terrainCovers.values()) {\n      terrainCover.isDirty = terrainCover.isDirty || terrainCover.shouldUpdate({layerNeedsRedraw});\n    }\n\n    for (const layer of terrainLayers) {\n      this._updateTerrainCover(layer, drapeLayers, viewport, opts);\n    }\n\n    if (!this.isPicking) {\n      this._pruneTerrainCovers();\n    }\n  }\n\n  private _updateTerrainCover(\n    terrainLayer: Layer,\n    drapeLayers: Layer[],\n    viewport: Viewport,\n    opts: PreRenderOptions\n  ) {\n    const renderPass = this.isPicking ? this.terrainPickingPass : this.terrainPass;\n    let terrainCover = this.terrainCovers.get(terrainLayer.id);\n    if (!terrainCover) {\n      terrainCover = new TerrainCover(terrainLayer);\n      this.terrainCovers.set(terrainLayer.id, terrainCover);\n    }\n    try {\n      const isDirty = terrainCover.shouldUpdate({\n        targetLayer: terrainLayer,\n        viewport,\n        layers: drapeLayers\n      });\n      if (this.isPicking || terrainCover.isDirty || isDirty) {\n        renderPass.renderTerrainCover(terrainCover, {\n          ...opts,\n          layers: drapeLayers,\n          moduleParameters: {\n            dummyHeightMap: this.dummyHeightMap,\n            terrainSkipRender: false,\n            devicePixelRatio: 1\n          }\n        });\n        terrainCover.isDirty = false;\n      }\n    } catch (err) {\n      terrainLayer.raiseError(err as Error, `Error rendering terrain cover ${terrainCover.id}`);\n    }\n  }\n\n  private _pruneTerrainCovers() {\n    /** Prune the cache, remove textures for layers that have been removed */\n    const idsToRemove: string[] = [];\n    for (const [id, terrainCover] of this.terrainCovers) {\n      if (!terrainCover.isActive) {\n        idsToRemove.push(id);\n      }\n    }\n    for (const id of idsToRemove) {\n      this.terrainCovers.delete(id);\n    }\n  }\n}\n", "import {LayerExtension, UpdateParameters} from '@deck.gl/core';\nimport {TerrainEffect} from './terrain-effect';\nimport {terrainModule} from './shader-module';\n\nimport type {Layer} from '@deck.gl/core';\n\nconst defaultProps = {\n  terrainDrawMode: undefined\n};\n\nexport type TerrainExtensionProps = {\n  /**\n   * controls whether an object is drawn over the terrain surface by its anchor (usually defined by an accessor called `getPosition`, e.g. icon, scatterplot) or by its geometry (e.g. path, polygon).\n   * If not specified, it is automatically deduced from the layer.\n   */\n  terrainDrawMode?: 'offset' | 'drape';\n};\n\ntype TerrainExtensionState = {\n  /** Resolved fitting mode */\n  terrainDrawMode: 'offset' | 'drape';\n  /** Set when a layer is flagged as needs redraw */\n  terrainCoverNeedsRedraw: boolean;\n};\n\n/** Allows layers to show/hide objects by a geofence. */\nexport default class TerrainExtension extends LayerExtension {\n  static defaultProps = defaultProps;\n  static extensionName = 'TerrainExtension';\n\n  getShaders(this: Layer<TerrainExtensionProps>): any {\n    return {\n      modules: [terrainModule]\n    };\n  }\n\n  initializeState(this: Layer<TerrainExtensionProps>) {\n    this.context.deck?._addDefaultEffect(new TerrainEffect());\n  }\n\n  updateState(\n    this: Layer<TerrainExtensionProps>,\n    params: UpdateParameters<Layer<TerrainExtensionProps>>\n  ) {\n    const {props, oldProps} = params;\n\n    if (\n      this.state.terrainDrawMode &&\n      props.terrainDrawMode === oldProps.terrainDrawMode &&\n      // @ts-ignore `extruded` may not exist in props\n      props.extruded === oldProps.extruded\n    ) {\n      return;\n    }\n\n    let {terrainDrawMode} = props;\n    if (!terrainDrawMode) {\n      // props.extruded is used as an indication that the layer is 2.5D\n      // @ts-ignore `extruded` may not exist in props\n      const is3d = this.props.extruded as boolean;\n      const attributes = this.getAttributeManager()?.attributes;\n      const hasAnchor = attributes && 'instancePositions' in attributes;\n      terrainDrawMode = is3d || hasAnchor ? 'offset' : 'drape';\n    }\n    this.setState({terrainDrawMode});\n  }\n\n  onNeedsRedraw(this: Layer<{}>): void {\n    const state = this.state as TerrainExtensionState;\n    if (state.terrainDrawMode === 'drape') {\n      state.terrainCoverNeedsRedraw = true;\n    }\n  }\n}\n", "export {default as BrushingExtension} from './brushing/brushing-extension';\nexport {default as DataFilterExtension} from './data-filter/data-filter-extension';\nexport {default as Fp64Extension} from './fp64/fp64-extension';\nexport {default as PathStyleExtension} from './path-style/path-style-extension';\nexport {default as FillStyleExtension} from './fill-style/fill-style-extension';\nexport {default as ClipExtension} from './clip/clip-extension';\nexport {default as CollisionFilterExtension} from './collision-filter/collision-filter-extension';\nexport {default as MaskExtension} from './mask/mask-extension';\nexport {default as _TerrainExtension} from './terrain/terrain-extension';\n\n// Shader module\nexport {default as project64} from './fp64/project64';\n\n// Types\nexport type {BrushingExtensionProps} from './brushing/brushing-extension';\nexport type {DataFilterExtensionProps} from './data-filter/data-filter-extension';\nexport type {PathStyleExtensionProps} from './path-style/path-style-extension';\nexport type {FillStyleExtensionProps} from './fill-style/fill-style-extension';\nexport type {ClipExtensionProps} from './clip/clip-extension';\nexport type {CollisionFilterExtensionProps} from './collision-filter/collision-filter-extension';\nexport type {MaskExtensionProps} from './mask/mask-extension';\nexport type {TerrainExtensionProps} from './terrain/terrain-extension';\n", "import {Viewport} from '@deck.gl/core';\nimport {lerp} from '@math.gl/core';\nimport {GeoBoundingBox} from '../tileset-2d';\n\nconst availableTransformations = {\n  Point,\n  MultiPoint,\n  LineString,\n  MultiLineString,\n  Polygon,\n  MultiPolygon\n};\n\nfunction Point([pointX, pointY]: [number, number], [nw, se]: number[][], viewport: Viewport) {\n  const x = lerp(nw[0], se[0], pointX);\n  const y = lerp(nw[1], se[1], pointY);\n\n  return viewport.unprojectFlat([x, y]);\n}\n\nfunction getPoints(geometry, bbox: number[][], viewport: Viewport) {\n  return geometry.map(g => Point(g, bbox, viewport));\n}\n\nfunction MultiPoint(multiPoint, bbox: number[][], viewport: Viewport) {\n  return getPoints(multiPoint, bbox, viewport);\n}\n\nfunction LineString(line, bbox: number[][], viewport: Viewport) {\n  return getPoints(line, bbox, viewport);\n}\n\nfunction MultiLineString(multiLineString, bbox: number[][], viewport: Viewport) {\n  return multiLineString.map(lineString => LineString(lineString, bbox, viewport));\n}\n\nfunction Polygon(polygon, bbox: number[][], viewport: Viewport) {\n  return polygon.map(polygonRing => getPoints(polygonRing, bbox, viewport));\n}\n\nfunction MultiPolygon(multiPolygon, bbox: number[][], viewport: Viewport) {\n  return multiPolygon.map(polygon => Polygon(polygon, bbox, viewport));\n}\n\nexport function transform(geometry, bbox: GeoBoundingBox, viewport: Viewport) {\n  const nw = viewport.projectFlat([bbox.west, bbox.north]);\n  const se = viewport.projectFlat([bbox.east, bbox.south]);\n  const projectedBbox = [nw, se];\n\n  return {\n    ...geometry,\n    coordinates: availableTransformations[geometry.type](\n      geometry.coordinates,\n      projectedBbox,\n      viewport\n    )\n  };\n}\n", "import type {\n  BinaryFeatures,\n  BinaryLineFeatures,\n  BinaryPointFeatures,\n  BinaryPolygonFeatures\n} from '@loaders.gl/schema';\n\ntype FeatureTypes = BinaryPointFeatures | BinaryLineFeatures | BinaryPolygonFeatures;\n\nconst GEOM_TYPES = ['points', 'lines', 'polygons'];\n/**\n * Return the index of feature (numericProps or featureIds) for given feature id\n * Example: findIndexBinary(data, 'id', 33) will return the index in the array of numericProps\n * of the feature 33.\n * @param {Object} data - The data in binary format\n * @param {String} uniqueIdProperty - Name of the unique id property\n * @param {Number|String} featureId - feature id to find\n * @param {String} layerName - the layer to search in\n */\nexport default function findIndexBinary(\n  data: BinaryFeatures,\n  uniqueIdProperty: string,\n  featureId: string | number,\n  layerName: string\n): number {\n  for (const gt of GEOM_TYPES) {\n    const index = data[gt] && findIndexByType(data[gt], uniqueIdProperty, featureId, layerName);\n    if (index >= 0) {\n      return index;\n    }\n  }\n\n  return -1;\n}\n\nfunction findIndexByType(\n  geomData: FeatureTypes,\n  uniqueIdProperty: string,\n  featureId: string | number,\n  layerName: string\n): number {\n  const featureIds = geomData.featureIds.value;\n\n  if (!featureIds.length) {\n    return -1;\n  }\n\n  let startFeatureIndex = 0;\n  let endFeatureIndex = featureIds[featureIds.length - 1] + 1;\n  if (layerName) {\n    const layerRange = getLayerRange(geomData, layerName);\n    if (layerRange) {\n      startFeatureIndex = layerRange[0];\n      endFeatureIndex = layerRange[1] + 1;\n    } else {\n      return -1;\n    }\n  }\n\n  // Look for the uniqueIdProperty\n  let featureIndex = -1;\n  if (uniqueIdProperty in geomData.numericProps) {\n    const vertexIndex = geomData.numericProps[uniqueIdProperty].value.findIndex(\n      (x, i) =>\n        x === featureId && featureIds[i] >= startFeatureIndex && featureIds[i] < endFeatureIndex\n    );\n    return vertexIndex >= 0 ? geomData.globalFeatureIds.value[vertexIndex] : -1;\n  } else if (uniqueIdProperty) {\n    featureIndex = findIndex(\n      geomData.properties,\n      elem => elem[uniqueIdProperty] === featureId,\n      startFeatureIndex,\n      endFeatureIndex\n    );\n  } else if (geomData.fields) {\n    featureIndex = findIndex(\n      geomData.fields,\n      (elem: any) => elem.id === featureId,\n      startFeatureIndex,\n      endFeatureIndex\n    );\n  }\n  return featureIndex >= 0 ? getGlobalFeatureId(geomData, featureIndex) : -1;\n}\n\ntype LayerRange = [firstFeatureIndex: number, lastFeatureIndex: number];\n\n// Returns [firstFeatureIndex, lastFeatureIndex]\n// MVTLoader parses tiles layer-by-layer, so each layer is a continuous range\nfunction getLayerRange(\n  geomData: FeatureTypes & {\n    __layers?: Record<string, LayerRange>;\n  },\n  layerName: string\n): LayerRange | undefined {\n  if (!geomData.__layers) {\n    // Cache a map from properties.layerName to index ranges\n    const layerNames: Record<string, LayerRange> = {};\n    const {properties} = geomData;\n    for (let i = 0; i < properties.length; i++) {\n      const {layerName: key} = properties[i] as Record<string, any>;\n      if (!key) {\n        // ignore\n      } else if (layerNames[key]) {\n        layerNames[key][1] = i;\n      } else {\n        layerNames[key] = [i, i];\n      }\n    }\n    geomData.__layers = layerNames;\n  }\n  return geomData.__layers[layerName];\n}\n\n// Returns global feature id\nfunction getGlobalFeatureId(geomData, featureIndex: number) {\n  if (!geomData.__ids) {\n    // Cache a map from featureId to globalFeatureId\n    const result: string[] = [];\n    const featureIds = geomData.featureIds.value;\n    const globalFeatureIds = geomData.globalFeatureIds.value;\n    for (let i = 0; i < featureIds.length; i++) {\n      result[featureIds[i]] = globalFeatureIds[i];\n    }\n    geomData.__ids = result;\n  }\n  return geomData.__ids[featureIndex];\n}\n\n// Like array.findIndex, but only search within a range\nfunction findIndex<T>(\n  array: T[],\n  predicate: (v: T, index: number) => boolean,\n  startIndex: number,\n  endIndex: number\n): number {\n  for (let i = startIndex; i < endIndex; i++) {\n    if (predicate(array[i], i)) {\n      return i;\n    }\n  }\n  return -1;\n}\n", "import {\n  Layer,\n  LayersList,\n  log,\n  PickingInfo,\n  UpdateParameters,\n  GetPickingInfoParams,\n  Viewport,\n  COORDINATE_SYSTEM,\n  DefaultProps\n} from '@deck.gl/core';\nimport {GeoJsonLayer, GeoJsonLayerProps} from '@deck.gl/layers';\nimport {ClipExtension} from '@deck.gl/extensions';\n\nimport {Matrix4} from '@math.gl/core';\nimport {MVTWorkerLoader} from '@loaders.gl/mvt';\nimport {binaryToGeojson} from '@loaders.gl/gis';\n\nimport type {Loader} from '@loaders.gl/loader-utils';\nimport type {BinaryFeatures} from '@loaders.gl/schema';\nimport type {Feature} from 'geojson';\n\nimport {transform} from './coordinate-transform';\nimport findIndexBinary from './find-index-binary';\n\nimport TileLayer, {TiledPickingInfo, TileLayerProps} from '../tile-layer/tile-layer';\n\nimport type {Tileset2DProps, TileLoadProps, GeoBoundingBox} from '../tileset-2d';\nimport {\n  urlType,\n  Tileset2D,\n  Tile2DHeader,\n  getURLFromTemplate,\n  isGeoBoundingBox,\n  isURLTemplate\n} from '../tileset-2d';\n\nconst WORLD_SIZE = 512;\n\nconst defaultProps: DefaultProps<MVTLayerProps> = {\n  ...GeoJsonLayer.defaultProps,\n  data: urlType,\n  onDataLoad: {type: 'function', value: null, optional: true, compare: false},\n  uniqueIdProperty: '',\n  highlightedFeatureId: null,\n  loaders: [MVTWorkerLoader],\n  binary: true\n};\n\nexport type TileJson = {\n  tilejson: string;\n  tiles: string[];\n  // eslint-disable-next-line camelcase\n  vector_layers: any[];\n  attribution?: string;\n  scheme?: string;\n  maxzoom?: number;\n  minzoom?: number;\n  version?: string;\n};\n\ntype ParsedMvtTile = Feature[] | BinaryFeatures;\n\n/** All props supported by the MVTLayer */\nexport type MVTLayerProps = _MVTLayerProps &\n  Omit<GeoJsonLayerProps, 'data'> &\n  TileLayerProps<ParsedMvtTile>;\n\n/** Props added by the MVTLayer  */\nexport type _MVTLayerProps = {\n  /** Called if `data` is a TileJSON URL when it is successfully fetched. */\n  onDataLoad?: ((tilejson: TileJson | null) => void) | null;\n\n  /** Needed for highlighting a feature split across two or more tiles. */\n  uniqueIdProperty?: string;\n\n  /** A feature with ID corresponding to the supplied value will be highlighted. */\n  highlightedFeatureId?: string | null;\n\n  /**\n   * Use tile data in binary format.\n   *\n   * @default true\n   */\n  binary?: boolean;\n\n  /**\n   * Loaders used to transform tiles into `data` property passed to `renderSubLayers`.\n   *\n   * @default [MVTWorkerLoader] from `@loaders.gl/mvt`\n   */\n  loaders?: Loader[];\n};\n\ntype ContentWGS84Cache = {_contentWGS84?: Feature[]};\n\n/** Render data formatted as [Mapbox Vector Tiles](https://docs.mapbox.com/vector-tiles/specification/). */\nexport default class MVTLayer<ExtraProps extends {} = {}> extends TileLayer<\n  ParsedMvtTile,\n  Required<_MVTLayerProps> & ExtraProps\n> {\n  static layerName = 'MVTLayer';\n  static defaultProps = defaultProps;\n\n  initializeState(): void {\n    super.initializeState();\n    // GlobeView doesn't work well with binary data\n    const binary = this.context.viewport.resolution !== undefined ? false : this.props.binary;\n    this.setState({\n      binary,\n      data: null,\n      tileJSON: null\n    });\n  }\n\n  get isLoaded(): boolean {\n    return this.state && this.state.data && this.state.tileset && super.isLoaded;\n  }\n\n  updateState({props, oldProps, context, changeFlags}: UpdateParameters<this>) {\n    if (changeFlags.dataChanged) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this._updateTileData();\n    }\n\n    if (this.state?.data) {\n      super.updateState({props, oldProps, context, changeFlags});\n      this._setWGS84PropertyForTiles();\n    }\n    const {highlightColor} = props;\n    if (highlightColor !== oldProps.highlightColor && Array.isArray(highlightColor)) {\n      this.setState({highlightColor});\n    }\n  }\n\n  /* eslint-disable complexity */\n  private async _updateTileData(): Promise<void> {\n    let data: any = this.props.data;\n    let tileJSON: any = null;\n\n    if (typeof data === 'string' && !isURLTemplate(data)) {\n      const {onDataLoad, fetch} = this.props;\n      this.setState({data: null, tileJSON: null});\n      try {\n        tileJSON = await fetch(data, {propName: 'data', layer: this, loaders: []});\n      } catch (error: any) {\n        this.raiseError(error, 'loading TileJSON');\n        data = null;\n      }\n\n      if (onDataLoad) {\n        onDataLoad(tileJSON, {propName: 'data', layer: this});\n      }\n    } else if (data.tilejson) {\n      tileJSON = data;\n    }\n\n    if (tileJSON) {\n      data = tileJSON.tiles;\n    }\n\n    this.setState({data, tileJSON});\n  }\n\n  _getTilesetOptions(): Tileset2DProps {\n    const opts = super._getTilesetOptions();\n    const tileJSON: TileJson | null | undefined = this.state.tileJSON;\n    const {minZoom, maxZoom} = this.props;\n\n    if (tileJSON) {\n      if (Number.isFinite(tileJSON.minzoom) && (tileJSON.minzoom as number) > (minZoom as number)) {\n        opts.minZoom = tileJSON.minzoom as number;\n      }\n\n      if (\n        Number.isFinite(tileJSON.maxzoom) &&\n        (!Number.isFinite(maxZoom) || (tileJSON.maxzoom as number) < (maxZoom as number))\n      ) {\n        opts.maxZoom = tileJSON.maxzoom as number;\n      }\n    }\n    return opts;\n  }\n\n  /* eslint-disable complexity */\n\n  renderLayers(): Layer | null | LayersList {\n    if (!this.state?.data) return null;\n    return super.renderLayers();\n  }\n\n  getTileData(loadProps: TileLoadProps): Promise<ParsedMvtTile> {\n    const {data, binary} = this.state;\n    const {index, signal} = loadProps;\n\n    const url = getURLFromTemplate(data, loadProps);\n    if (!url) {\n      return Promise.reject('Invalid URL');\n    }\n    let loadOptions = this.getLoadOptions();\n    const {fetch} = this.props;\n    loadOptions = {\n      ...loadOptions,\n      mimeType: 'application/x-protobuf',\n      mvt: {\n        ...loadOptions?.mvt,\n        coordinates: this.context.viewport.resolution ? 'wgs84' : 'local',\n        tileIndex: index\n        // Local worker debug\n        // workerUrl: `modules/mvt/dist/mvt-loader.worker.js`\n        // Set worker to null to skip web workers\n        // workerUrl: null\n      },\n      gis: binary ? {format: 'binary'} : {}\n    };\n    return fetch(url, {propName: 'data', layer: this, loadOptions, signal});\n  }\n\n  renderSubLayers(\n    props: TileLayer['props'] & {\n      id: string;\n      data: ParsedMvtTile;\n      _offset: number;\n      tile: Tile2DHeader<ParsedMvtTile>;\n    }\n  ): Layer | null | LayersList {\n    const {x, y, z} = props.tile.index;\n    const worldScale = Math.pow(2, z);\n\n    const xScale = WORLD_SIZE / worldScale;\n    const yScale = -xScale;\n\n    const xOffset = (WORLD_SIZE * x) / worldScale;\n    const yOffset = WORLD_SIZE * (1 - y / worldScale);\n\n    const modelMatrix = new Matrix4().scale([xScale, yScale, 1]);\n\n    props.autoHighlight = false;\n\n    if (!this.context.viewport.resolution) {\n      props.modelMatrix = modelMatrix;\n      props.coordinateOrigin = [xOffset, yOffset, 0];\n      props.coordinateSystem = COORDINATE_SYSTEM.CARTESIAN;\n      props.extensions = [...(props.extensions || []), new ClipExtension()];\n    }\n\n    const subLayers = super.renderSubLayers(props);\n\n    if (this.state.binary && !(subLayers instanceof GeoJsonLayer)) {\n      log.warn('renderSubLayers() must return GeoJsonLayer when using binary:true')();\n    }\n\n    return subLayers;\n  }\n\n  protected _updateAutoHighlight(info: PickingInfo): void {\n    const {uniqueIdProperty} = this.props;\n\n    const {hoveredFeatureId, hoveredFeatureLayerName} = this.state;\n    const hoveredFeature = info.object;\n    let newHoveredFeatureId;\n    let newHoveredFeatureLayerName;\n\n    if (hoveredFeature) {\n      newHoveredFeatureId = getFeatureUniqueId(hoveredFeature, uniqueIdProperty);\n      newHoveredFeatureLayerName = getFeatureLayerName(hoveredFeature);\n    }\n    let {highlightColor} = this.props;\n    if (typeof highlightColor === 'function') {\n      highlightColor = highlightColor(info);\n    }\n\n    if (\n      hoveredFeatureId !== newHoveredFeatureId ||\n      hoveredFeatureLayerName !== newHoveredFeatureLayerName\n    ) {\n      this.setState({\n        highlightColor,\n        hoveredFeatureId: newHoveredFeatureId,\n        hoveredFeatureLayerName: newHoveredFeatureLayerName\n      });\n    }\n  }\n\n  getPickingInfo(params: GetPickingInfoParams): TiledPickingInfo {\n    const info = super.getPickingInfo(params);\n\n    const isWGS84 = Boolean(this.context.viewport.resolution);\n\n    if (this.state.binary && info.index !== -1) {\n      const {data} = params.sourceLayer!.props;\n      info.object = binaryToGeojson(data as BinaryFeatures, {\n        globalFeatureId: info.index\n      }) as Feature;\n    }\n    if (info.object && !isWGS84) {\n      info.object = transformTileCoordsToWGS84(\n        info.object,\n        info.tile!.bbox as GeoBoundingBox, // eslint-disable-line\n        this.context.viewport\n      );\n    }\n\n    return info;\n  }\n\n  getSubLayerPropsByTile(tile: Tile2DHeader<ParsedMvtTile>): Record<string, any> {\n    return {\n      highlightedObjectIndex: this.getHighlightedObjectIndex(tile),\n      highlightColor: this.state.highlightColor\n    };\n  }\n\n  private getHighlightedObjectIndex(tile: Tile2DHeader<ParsedMvtTile>): number {\n    const {hoveredFeatureId, hoveredFeatureLayerName, binary} = this.state;\n    const {uniqueIdProperty, highlightedFeatureId} = this.props;\n    const data = tile.content;\n\n    const isHighlighted = isFeatureIdDefined(highlightedFeatureId);\n    const isFeatureIdPresent = isFeatureIdDefined(hoveredFeatureId) || isHighlighted;\n\n    if (!isFeatureIdPresent) {\n      return -1;\n    }\n\n    const featureIdToHighlight = isHighlighted ? highlightedFeatureId : hoveredFeatureId;\n\n    // Iterable data\n    if (Array.isArray(data)) {\n      return data.findIndex(feature => {\n        const isMatchingId = getFeatureUniqueId(feature, uniqueIdProperty) === featureIdToHighlight;\n        const isMatchingLayer =\n          isHighlighted || getFeatureLayerName(feature) === hoveredFeatureLayerName;\n        return isMatchingId && isMatchingLayer;\n      });\n\n      // Non-iterable data\n    } else if (data && binary) {\n      // Get the feature index of the selected item to highlight\n      return findIndexBinary(\n        data,\n        uniqueIdProperty,\n        featureIdToHighlight,\n        isHighlighted ? '' : hoveredFeatureLayerName\n      );\n    }\n\n    return -1;\n  }\n\n  private _pickObjects(maxObjects: number | null): PickingInfo[] {\n    const {deck, viewport} = this.context;\n    const width = viewport.width;\n    const height = viewport.height;\n    const x = viewport.x;\n    const y = viewport.y;\n    const layerIds = [this.id];\n    return deck!.pickObjects({x, y, width, height, layerIds, maxObjects});\n  }\n\n  /** Get the rendered features in the current viewport. */\n  getRenderedFeatures(maxFeatures: number | null = null): Feature[] {\n    const features = this._pickObjects(maxFeatures);\n    const featureCache = new Set();\n    const renderedFeatures: Feature[] = [];\n\n    for (const f of features) {\n      const featureId = getFeatureUniqueId(f.object, this.props.uniqueIdProperty);\n\n      if (featureId === undefined) {\n        // we have no id for the feature, we just add to the list\n        renderedFeatures.push(f.object as Feature);\n      } else if (!featureCache.has(featureId)) {\n        // Add removing duplicates\n        featureCache.add(featureId);\n        renderedFeatures.push(f.object as Feature);\n      }\n    }\n\n    return renderedFeatures;\n  }\n\n  private _setWGS84PropertyForTiles(): void {\n    const propName = 'dataInWGS84';\n    const tileset: Tileset2D = this.state.tileset;\n\n    // @ts-expect-error selectedTiles are always initialized when tile is being processed\n    tileset.selectedTiles.forEach((tile: Tile2DHeader & ContentWGS84Cache) => {\n      if (!tile.hasOwnProperty(propName)) {\n        // eslint-disable-next-line accessor-pairs\n        Object.defineProperty(tile, propName, {\n          get: () => {\n            // Still loading or encountered an error\n            if (!tile.content) {\n              return null;\n            }\n\n            if (this.state.binary && Array.isArray(tile.content) && !tile.content.length) {\n              // TODO: @loaders.gl/mvt returns [] when no content. It should return a valid empty binary.\n              // https://github.com/visgl/loaders.gl/pull/1137\n              return [];\n            }\n\n            const {bbox} = tile;\n            if (tile._contentWGS84 === undefined && isGeoBoundingBox(bbox)) {\n              // Create a cache to transform only once\n\n              const content = this.state.binary ? binaryToGeojson(tile.content) : tile.content;\n              tile._contentWGS84 = content.map(feature =>\n                transformTileCoordsToWGS84(feature, bbox, this.context.viewport)\n              );\n            }\n            return tile._contentWGS84;\n          }\n        });\n      }\n    });\n  }\n}\n\nfunction getFeatureUniqueId(feature: Feature, uniqueIdProperty: string | undefined) {\n  if (feature.properties && uniqueIdProperty) {\n    return feature.properties[uniqueIdProperty];\n  }\n\n  if ('id' in feature) {\n    return feature.id;\n  }\n\n  return undefined;\n}\n\nfunction getFeatureLayerName(feature: Feature): string | null {\n  return feature.properties?.layerName || null;\n}\n\nfunction isFeatureIdDefined(value: unknown): boolean {\n  return value !== undefined && value !== null && value !== '';\n}\n\nfunction transformTileCoordsToWGS84(\n  object: Feature,\n  bbox: GeoBoundingBox,\n  viewport: Viewport\n): Feature {\n  const feature = {\n    ...object,\n    geometry: {\n      type: object.geometry.type\n    }\n  };\n\n  // eslint-disable-next-line accessor-pairs\n  Object.defineProperty(feature.geometry, 'coordinates', {\n    get: () => {\n      const wgs84Geom = transform(object.geometry, bbox, viewport);\n      return wgs84Geom.coordinates;\n    }\n  });\n\n  return feature as Feature;\n}\n", "const BASE32_CODES = '0123456789bcdefghjkmnpqrstuvwxyz';\nconst BASE32_CODES_DICT = {};\nfor (let i = 0; i < BASE32_CODES.length; i++) {\n  BASE32_CODES_DICT[BASE32_CODES.charAt(i)] = i;\n}\n\nconst MIN_LAT = -90;\nconst MAX_LAT = 90;\nconst MIN_LON = -180;\nconst MAX_LON = 180;\n\n// Adapted from ngeohash decode_bbox\nexport function getGeohashBounds(geohash: string): number[] {\n  let isLon = true;\n  let maxLat = MAX_LAT;\n  let minLat = MIN_LAT;\n  let maxLon = MAX_LON;\n  let minLon = MIN_LON;\n  let mid: number;\n\n  let hashValue = 0;\n  for (let i = 0, l = geohash.length; i < l; i++) {\n    const code = geohash[i].toLowerCase();\n    hashValue = BASE32_CODES_DICT[code];\n\n    for (let bits = 4; bits >= 0; bits--) {\n      const bit = (hashValue >> bits) & 1;\n      if (isLon) {\n        mid = (maxLon + minLon) / 2;\n        if (bit === 1) {\n          minLon = mid;\n        } else {\n          maxLon = mid;\n        }\n      } else {\n        mid = (maxLat + minLat) / 2;\n        if (bit === 1) {\n          minLat = mid;\n        } else {\n          maxLat = mid;\n        }\n      }\n      isLon = !isLon;\n    }\n  }\n\n  return [minLat, minLon, maxLat, maxLon];\n}\n\nexport function getGeohashPolygon(geohash: string): number[] {\n  const [s, w, n, e] = getGeohashBounds(geohash);\n\n  return [e, n, e, s, w, s, w, n, e, n];\n}\n", "import {AccessorFunction, DefaultProps} from '@deck.gl/core';\nimport GeoCellLayer from '../geo-cell-layer/GeoCellLayer';\nimport {getGeohashPolygon} from './geohash-utils';\n\nconst defaultProps: DefaultProps<GeohashLayerProps> = {\n  getGeohash: {type: 'accessor', value: d => d.geohash}\n};\n\n/**\n * Properties of `GeohashLayer`.\n */\ntype GeohashLayerProps<DataT = any> = {\n  /**\n   * Called for each data object to retrieve the geohash string identifier.\n   *\n   * By default, it reads `geohash` property of data object.\n   */\n  getGeohash?: AccessorFunction<DataT, string>;\n};\n\n/** Render filled and/or stroked polygons based on the [Geohash](https://en.wikipedia.org/wiki/Geohash) geospatial indexing system. */\nexport default class GeohashLayer<DataT = any, ExtraProps extends {} = {}> extends GeoCellLayer<\n  DataT,\n  Required<GeohashLayerProps> & ExtraProps\n> {\n  static layerName = 'GeohashLayer';\n  static defaultProps = defaultProps;\n\n  indexToBounds(): Partial<GeoCellLayer['props']> | null {\n    const {data, getGeohash} = this.props;\n\n    return {\n      data,\n      _normalize: false,\n      positionFormat: 'XY',\n      getPolygon: (x: DataT, objectInfo) => getGeohashPolygon(getGeohash(x, objectInfo))\n    };\n  }\n}\n", "// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n/* eslint-disable max-len */\n\nexport {WMSLayer as _WMSLayer} from './wms-layer/wms-layer';\nexport {default as GreatCircleLayer} from './great-circle-layer/great-circle-layer';\nexport {default as S2Layer} from './s2-layer/s2-layer';\nexport {default as QuadkeyLayer} from './quadkey-layer/quadkey-layer';\nexport {default as TileLayer} from './tile-layer/tile-layer';\nexport {default as TripsLayer} from './trips-layer/trips-layer';\nexport {default as H3ClusterLayer} from './h3-layers/h3-cluster-layer';\nexport {default as H3HexagonLayer} from './h3-layers/h3-hexagon-layer';\nexport {default as Tile3DLayer} from './tile-3d-layer/tile-3d-layer';\nexport {default as TerrainLayer} from './terrain-layer/terrain-layer';\nexport {default as MVTLayer} from './mvt-layer/mvt-layer';\nexport {default as GeohashLayer} from './geohash-layer/geohash-layer';\n\nexport {default as _GeoCellLayer} from './geo-cell-layer/GeoCellLayer';\n\n// Types\nexport type {WMSLayerProps} from './wms-layer/wms-layer';\nexport type {H3ClusterLayerProps} from './h3-layers/h3-cluster-layer';\nexport type {H3HexagonLayerProps} from './h3-layers/h3-hexagon-layer';\nexport type {GreatCircleLayerProps} from './great-circle-layer/great-circle-layer';\nexport type {S2LayerProps} from './s2-layer/s2-layer';\nexport type {TileLayerProps} from './tile-layer/tile-layer';\nexport type {QuadkeyLayerProps} from './quadkey-layer/quadkey-layer';\nexport type {TerrainLayerProps} from './terrain-layer/terrain-layer';\nexport type {Tile3DLayerProps} from './tile-3d-layer/tile-3d-layer';\nexport type {MVTLayerProps} from './mvt-layer/mvt-layer';\nexport type {GeoCellLayerProps as _GeoCellLayerProps} from './geo-cell-layer/GeoCellLayer';\n\n// Tileset2D\n\nexport type {GeoBoundingBox, NonGeoBoundingBox} from './tileset-2d';\nexport type {TileLoadProps as _TileLoadProps} from './tileset-2d';\n\nexport {getURLFromTemplate as _getURLFromTemplate} from './tileset-2d';\nexport {Tileset2D as _Tileset2D} from './tileset-2d';\nexport {Tile2DHeader as _Tile2DHeader} from './tileset-2d';\n", "/* eslint-env browser */\n\nimport { H3ClusterLayer } from '@deck.gl/geo-layers';\nimport { ViewMode } from '@nebula.gl/edit-modes';\nimport { polyfill, geoToH3 } from 'h3-js';\nimport { PROJECTED_PIXEL_SIZE_MULTIPLIER } from '../constants';\nimport EditableGeoJsonLayer from './editable-geojson-layer';\nimport EditableLayer, { EditableLayerProps } from './editable-layer';\n\nconst DEFAULT_EDIT_MODE = ViewMode;\nconst DEFAULT_H3_RESOLUTION = 9;\nconst EMPTY_FEATURE_COLLECTION = {\n  type: 'FeatureCollection',\n  features: [],\n};\n\nexport interface EditableH3ClusterLayerProps<D> extends EditableLayerProps<D> {\n  resolution?: number;\n  mode?: any;\n  modeConfig?: any;\n  selectedIndexes?: number[];\n  getEditedCluster?: (updatedHexagons: any[], existingCluster: any) => any;\n  getHexagons?: (d) => number[];\n  onEdit?: (updatedData?, editType?: string, featureIndexes?: number[], editContext?) => void;\n  filled?: boolean;\n  stroked?: boolean;\n  lineWidthScale?: number;\n  lineWidthMinPixels?: number;\n  lineWidthMaxPixels?: number;\n  lineWidthUnits?: string;\n}\n\nconst defaultProps: EditableH3ClusterLayerProps<any> = {\n  mode: DEFAULT_EDIT_MODE,\n\n  ...EditableGeoJsonLayer.defaultProps,\n\n  // h3 layer\n  data: [],\n  selectedIndexes: [],\n  filled: false,\n  stroked: true,\n  lineWidthScale: PROJECTED_PIXEL_SIZE_MULTIPLIER,\n  lineWidthMinPixels: 1,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineWidthUnits: 'pixels',\n  getHexagons: (d) => d.hexIds,\n  getEditedCluster: (updatedHexagons, existingCluster) => {\n    if (existingCluster) {\n      return {\n        ...existingCluster,\n        hexIds: updatedHexagons,\n      };\n    }\n    return {\n      hexIds: updatedHexagons,\n    };\n  },\n  resolution: DEFAULT_H3_RESOLUTION,\n};\n\nexport default class EditableH3ClusterLayer extends EditableLayer<\n  any,\n  EditableH3ClusterLayerProps<any>\n> {\n  static layerName = 'EditableH3ClusterLayer';\n  static defaultProps = defaultProps;\n\n  initializeState() {\n    super.initializeState();\n\n    this.setState({\n      tentativeHexagonIDs: [],\n    });\n  }\n\n  // convert array of (lng, lat) coords to cluster of hexes\n  getDerivedHexagonIDs(coords) {\n    return polyfill(coords, this.props.resolution, true);\n  }\n\n  // convert pair of (lng, lat) coords into single hex\n  getDerivedHexagonID(coords) {\n    return geoToH3(coords[1], coords[0], this.props.resolution);\n  }\n\n  renderLayers() {\n    const layers: any = [\n      new EditableGeoJsonLayer(\n        this.getSubLayerProps({\n          id: 'editable-geojson',\n\n          mode: this.props.mode,\n          data: EMPTY_FEATURE_COLLECTION,\n          selectedFeatureIndexes: [],\n\n          onEdit: (editAction) => {\n            const { editType, editContext } = editAction;\n\n            switch (editType) {\n              case 'updateTentativeFeature':\n                // tentative feature updates, updated on every pointer move\n                if (editContext.feature.geometry.type === 'Polygon') {\n                  const coords = editContext.feature.geometry.coordinates;\n                  const hexIDs = this.getDerivedHexagonIDs(coords);\n\n                  this.setState({ tentativeHexagonIDs: hexIDs });\n                } else if (editContext.feature.geometry.type === 'Point') {\n                  const coords = editContext.feature.geometry.coordinates;\n                  const hexID = this.getDerivedHexagonID(coords);\n\n                  this.setState({ tentativeHexagonIDs: [hexID] });\n                }\n                break;\n              case 'addFeature':\n                const updatedData = [...this.props.data];\n                const { modeConfig } = this.props;\n\n                if (!modeConfig || !modeConfig.booleanOperation) {\n                  // add new h3 cluster\n                  updatedData.push(\n                    this.props.getEditedCluster(this.state.tentativeHexagonIDs, null)\n                  );\n                } else if (this.props.selectedIndexes.length !== 1) {\n                  // eslint-disable-next-line no-console,no-undef\n                  console.warn('booleanOperation only supported for single cluster selection');\n                } else {\n                  // they're affecting a selected cluster\n                  let finalHexagonIDs;\n                  const committedHexagonIDs = new Set(this.getSelectedHexIDs());\n                  const tentativeHexagonIDs = new Set(this.state.tentativeHexagonIDs);\n\n                  switch (modeConfig.booleanOperation) {\n                    case 'union':\n                    default:\n                      finalHexagonIDs = [\n                        ...new Set([...committedHexagonIDs, ...tentativeHexagonIDs]),\n                      ];\n                      break;\n                    case 'intersection':\n                      finalHexagonIDs = [...committedHexagonIDs].filter((hexID: string) =>\n                        tentativeHexagonIDs.has(hexID)\n                      );\n                      break;\n                    case 'difference':\n                      finalHexagonIDs = [...committedHexagonIDs].filter(\n                        (hexID: string) => !tentativeHexagonIDs.has(hexID)\n                      );\n                      break;\n                  }\n\n                  const selectedIndex = this.props.selectedIndexes[0];\n                  const existingCluster = this.props.data[selectedIndex];\n                  updatedData[selectedIndex] = this.props.getEditedCluster(\n                    finalHexagonIDs,\n                    existingCluster\n                  );\n                }\n\n                this.setState({\n                  tentativeHexagonIDs: [],\n                });\n\n                this.props.onEdit({ updatedData });\n\n                break;\n              default:\n                break;\n            }\n          },\n        })\n      ),\n\n      new H3ClusterLayer(\n        this.getSubLayerProps({\n          id: 'hexagons',\n          data: this.props.data,\n          getHexagons: this.props.getHexagons,\n        })\n      ),\n      new H3ClusterLayer(\n        this.getSubLayerProps({\n          id: 'tentative-hexagons',\n          data: [\n            {\n              hexIds: this.state.tentativeHexagonIDs,\n            },\n          ],\n          getHexagons: (d) => d.hexIds,\n        })\n      ),\n    ];\n    return layers;\n  }\n\n  // because data is an array of hexagon data, we take the cumulative of all selected indexes,\n  // using props.getHexagons to support multiple data types\n  getSelectedHexIDs() {\n    let cumulativeHexIDs = [];\n    this.props.selectedIndexes.forEach((index) => {\n      const selectedCluster = this.props.data[index];\n      const hexIDs = this.props.getHexagons(selectedCluster);\n      cumulativeHexIDs = cumulativeHexIDs.concat(hexIDs);\n    });\n    return cumulativeHexIDs;\n  }\n\n  getCursor({ isDragging }: { isDragging: boolean }) {\n    let { cursor } = this.state || {};\n    if (!cursor) {\n      // default cursor\n      cursor = isDragging ? 'grabbing' : 'grab';\n    }\n    return cursor;\n  }\n}\n", "/* eslint-env browser */\n\nimport { CompositeLayer } from '@deck.gl/core';\nimport { PolygonLayer } from '@deck.gl/layers';\nimport { CompositeLayerProps } from '@deck.gl/core/lib/composite-layer';\nimport { polygon } from '@turf/helpers';\nimport turfBuffer from '@turf/buffer';\nimport turfDifference from '@turf/difference';\nimport { DrawRectangleMode, DrawPolygonMode, ViewMode } from '@nebula.gl/edit-modes';\n\nimport EditableGeoJsonLayer from './editable-geojson-layer';\n\nexport const SELECTION_TYPE = {\n  NONE: null,\n  RECTANGLE: 'rectangle',\n  POLYGON: 'polygon',\n};\n\nconst MODE_MAP = {\n  [SELECTION_TYPE.RECTANGLE]: DrawRectangleMode,\n  [SELECTION_TYPE.POLYGON]: DrawPolygonMode,\n};\n\nconst MODE_CONFIG_MAP = {\n  [SELECTION_TYPE.RECTANGLE]: { dragToDraw: true },\n};\n\ninterface SelectionLayerProps extends CompositeLayerProps<any> {\n  layerIds: any[];\n  onSelect: (info: any) => any;\n  selectionType: string | null;\n}\n\nconst defaultProps: SelectionLayerProps = {\n  selectionType: SELECTION_TYPE.RECTANGLE,\n  layerIds: [],\n  onSelect: () => {},\n};\n\nconst EMPTY_DATA = {\n  type: 'FeatureCollection',\n  features: [],\n};\n\nconst EXPANSION_KM = 50;\nconst LAYER_ID_GEOJSON = 'selection-geojson';\nconst LAYER_ID_BLOCKER = 'selection-blocker';\n\nconst PASS_THROUGH_PROPS = [\n  'lineWidthScale',\n  'lineWidthMinPixels',\n  'lineWidthMaxPixels',\n  'lineWidthUnits',\n  'lineJointRounded',\n  'lineCapRounded',\n  'lineMiterLimit',\n  'pointRadiusScale',\n  'pointRadiusMinPixels',\n  'pointRadiusMaxPixels',\n  'lineDashJustified',\n  'getLineColor',\n  'getFillColor',\n  'getRadius',\n  'getLineWidth',\n  'getLineDashArray',\n  'getTentativeLineDashArray',\n  'getTentativeLineColor',\n  'getTentativeFillColor',\n  'getTentativeLineWidth',\n];\nexport default class SelectionLayer<\n  D,\n  P extends SelectionLayerProps = SelectionLayerProps\n> extends CompositeLayer<D, P> {\n  static layerName = 'SelectionLayer';\n  static defaultProps = defaultProps;\n\n  _selectRectangleObjects(coordinates: any) {\n    const { layerIds, onSelect } = this.props;\n    // @ts-ignore\n    const [x1, y1] = this.context.viewport.project(coordinates[0][0]);\n    // @ts-ignore\n    const [x2, y2] = this.context.viewport.project(coordinates[0][2]);\n    // @ts-ignore\n    const pickingInfos = this.context.deck.pickObjects({\n      x: Math.min(x1, x2),\n      y: Math.min(y1, y2),\n      width: Math.abs(x2 - x1),\n      height: Math.abs(y2 - y1),\n      layerIds,\n    });\n\n    onSelect({ pickingInfos });\n  }\n\n  _selectPolygonObjects(coordinates: any) {\n    const { layerIds, onSelect } = this.props;\n    // @ts-ignore\n    const mousePoints = coordinates[0].map((c) => this.context.viewport.project(c));\n\n    const allX = mousePoints.map((mousePoint) => mousePoint[0]);\n    const allY = mousePoints.map((mousePoint) => mousePoint[1]);\n    const x = Math.min(...allX);\n    const y = Math.min(...allY);\n    const maxX = Math.max(...allX);\n    const maxY = Math.max(...allY);\n\n    // Use a polygon to hide the outside, because pickObjects()\n    // does not support polygons\n    const landPointsPoly = polygon(coordinates);\n    const bigBuffer = turfBuffer(landPointsPoly, EXPANSION_KM);\n    let bigPolygon;\n    try {\n      // turfDifference throws an exception if the polygon\n      // intersects with itself (TODO: check if true in all versions)\n      bigPolygon = turfDifference(bigBuffer, landPointsPoly);\n    } catch (e) {\n      // invalid selection polygon\n      console.log('turfDifference() error', e); // eslint-disable-line\n      return;\n    }\n\n    this.setState({\n      pendingPolygonSelection: {\n        bigPolygon,\n      },\n    });\n\n    const blockerId = `${this.props.id}-${LAYER_ID_BLOCKER}`;\n\n    // HACK, find a better way\n    setTimeout(() => {\n      // @ts-ignore\n      const pickingInfos = this.context.deck.pickObjects({\n        x,\n        y,\n        width: maxX - x,\n        height: maxY - y,\n        layerIds: [blockerId, ...layerIds],\n      });\n\n      onSelect({\n        pickingInfos: pickingInfos.filter((item) => item.layer.id !== this.props.id),\n      });\n    }, 250);\n  }\n\n  renderLayers() {\n    const { pendingPolygonSelection } = this.state;\n\n    const mode = MODE_MAP[this.props.selectionType] || ViewMode;\n    const modeConfig = MODE_CONFIG_MAP[this.props.selectionType];\n\n    const inheritedProps = {};\n    PASS_THROUGH_PROPS.forEach((p) => {\n      if (this.props[p] !== undefined) inheritedProps[p] = this.props[p];\n    });\n\n    const layers = [\n      new EditableGeoJsonLayer(\n        this.getSubLayerProps({\n          id: LAYER_ID_GEOJSON,\n          pickable: true,\n          mode,\n          modeConfig,\n          selectedFeatureIndexes: [],\n          data: EMPTY_DATA,\n          onEdit: ({ updatedData, editType }) => {\n            if (editType === 'addFeature') {\n              const { coordinates } = updatedData.features[0].geometry;\n\n              if (this.props.selectionType === SELECTION_TYPE.RECTANGLE) {\n                this._selectRectangleObjects(coordinates);\n              } else if (this.props.selectionType === SELECTION_TYPE.POLYGON) {\n                this._selectPolygonObjects(coordinates);\n              }\n            }\n          },\n          ...inheritedProps,\n        })\n      ),\n    ];\n\n    if (pendingPolygonSelection) {\n      const { bigPolygon } = pendingPolygonSelection;\n      layers.push(\n        // @ts-ignore\n        new PolygonLayer(\n          // @ts-ignore\n          this.getSubLayerProps({\n            id: LAYER_ID_BLOCKER,\n            pickable: true,\n            stroked: false,\n            opacity: 1.0,\n            data: [bigPolygon],\n            getLineColor: (obj) => [0, 0, 0, 1],\n            getFillColor: (obj) => [0, 0, 0, 1],\n            getPolygon: (o) => o.geometry.coordinates,\n          })\n        )\n      );\n    }\n\n    return layers;\n  }\n\n  shouldUpdateState({ changeFlags: { stateChanged, propsOrDataChanged } }: Record<string, any>) {\n    return stateChanged || propsOrDataChanged;\n  }\n}\n", "/* eslint-env browser */\n\nimport { CompositeLayer } from '@deck.gl/core';\nimport { ScatterplotLayer, LineLayer } from '@deck.gl/layers';\n\nconst defaultProps = {};\n\nexport default class ElevatedEditHandleLayer extends CompositeLayer<any> {\n  static layerName = 'ElevatedEditHandleLayer';\n  static defaultProps = defaultProps;\n  renderLayers() {\n    const handles = new ScatterplotLayer(\n      Object.assign({}, this.props, {\n        id: `${this.props.id}-ScatterplotLayer`,\n        data: this.props.data,\n      })\n    );\n\n    const lines = new LineLayer(\n      Object.assign({}, this.props, {\n        id: `${this.props.id}-LineLayer`,\n        data: this.props.data,\n        pickable: false,\n        getSourcePosition: ({ position }) => [position[0], position[1], 0],\n        getTargetPosition: ({ position }) => [position[0], position[1], position[2] || 0],\n        getColor: [150, 150, 150, 200],\n        getStrokeWidth: 3,\n      })\n    );\n\n    return [handles, lines];\n  }\n}\n", "// GL constants, copied from Mozilla documentation\n// https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Constants\n\n// Standard WebGL 1 constants\n// These constants are defined on the WebGLRenderingContext interface.\n\n/* eslint-disable key-spacing, max-len, no-inline-comments, camelcase */\n// eslint-disable-next-line\nexport default {\n  // Clearing buffers\n  // Constants passed to clear() to clear buffer masks.\n\n  DEPTH_BUFFER_BIT: 0x00000100,\n  STENCIL_BUFFER_BIT: 0x00000400,\n  COLOR_BUFFER_BIT: 0x00004000,\n\n  // Rendering primitives\n  // Constants passed to drawElements() or drawArrays() to specify what kind of primitive to render.\n\n  POINTS: 0x0000,\n  LINES: 0x0001,\n  LINE_LOOP: 0x0002,\n  LINE_STRIP: 0x0003,\n  TRIANGLES: 0x0004,\n  TRIANGLE_STRIP: 0x0005,\n  TRIANGLE_FAN: 0x0006,\n\n  // Blending modes\n  // Constants passed to blendFunc() or blendFuncSeparate() to specify the blending mode (for both, RBG and alpha, or separately).\n\n  ZERO: 0,\n  ONE: 1,\n  SRC_COLOR: 0x0300,\n  ONE_MINUS_SRC_COLOR: 0x0301,\n  SRC_ALPHA: 0x0302,\n  ONE_MINUS_SRC_ALPHA: 0x0303,\n  DST_ALPHA: 0x0304,\n  ONE_MINUS_DST_ALPHA: 0x0305,\n  DST_COLOR: 0x0306,\n  ONE_MINUS_DST_COLOR: 0x0307,\n  SRC_ALPHA_SATURATE: 0x0308,\n  CONSTANT_COLOR: 0x8001,\n  ONE_MINUS_CONSTANT_COLOR: 0x8002,\n  CONSTANT_ALPHA: 0x8003,\n  ONE_MINUS_CONSTANT_ALPHA: 0x8004,\n\n  // Blending equations\n  // Constants passed to blendEquation() or blendEquationSeparate() to control\n  // how the blending is calculated (for both, RBG and alpha, or separately).\n\n  FUNC_ADD: 0x8006,\n  FUNC_SUBTRACT: 0x800a,\n  FUNC_REVERSE_SUBTRACT: 0x800b,\n\n  // Getting GL parameter information\n  // Constants passed to getParameter() to specify what information to return.\n\n  BLEND_EQUATION: 0x8009,\n  BLEND_EQUATION_RGB: 0x8009,\n  BLEND_EQUATION_ALPHA: 0x883d,\n  BLEND_DST_RGB: 0x80c8,\n  BLEND_SRC_RGB: 0x80c9,\n  BLEND_DST_ALPHA: 0x80ca,\n  BLEND_SRC_ALPHA: 0x80cb,\n  BLEND_COLOR: 0x8005,\n  ARRAY_BUFFER_BINDING: 0x8894,\n  ELEMENT_ARRAY_BUFFER_BINDING: 0x8895,\n  LINE_WIDTH: 0x0b21,\n  ALIASED_POINT_SIZE_RANGE: 0x846d,\n  ALIASED_LINE_WIDTH_RANGE: 0x846e,\n  CULL_FACE_MODE: 0x0b45,\n  FRONT_FACE: 0x0b46,\n  DEPTH_RANGE: 0x0b70,\n  DEPTH_WRITEMASK: 0x0b72,\n  DEPTH_CLEAR_VALUE: 0x0b73,\n  DEPTH_FUNC: 0x0b74,\n  STENCIL_CLEAR_VALUE: 0x0b91,\n  STENCIL_FUNC: 0x0b92,\n  STENCIL_FAIL: 0x0b94,\n  STENCIL_PASS_DEPTH_FAIL: 0x0b95,\n  STENCIL_PASS_DEPTH_PASS: 0x0b96,\n  STENCIL_REF: 0x0b97,\n  STENCIL_VALUE_MASK: 0x0b93,\n  STENCIL_WRITEMASK: 0x0b98,\n  STENCIL_BACK_FUNC: 0x8800,\n  STENCIL_BACK_FAIL: 0x8801,\n  STENCIL_BACK_PASS_DEPTH_FAIL: 0x8802,\n  STENCIL_BACK_PASS_DEPTH_PASS: 0x8803,\n  STENCIL_BACK_REF: 0x8ca3,\n  STENCIL_BACK_VALUE_MASK: 0x8ca4,\n  STENCIL_BACK_WRITEMASK: 0x8ca5,\n  VIEWPORT: 0x0ba2,\n  SCISSOR_BOX: 0x0c10,\n  COLOR_CLEAR_VALUE: 0x0c22,\n  COLOR_WRITEMASK: 0x0c23,\n  UNPACK_ALIGNMENT: 0x0cf5,\n  PACK_ALIGNMENT: 0x0d05,\n  MAX_TEXTURE_SIZE: 0x0d33,\n  MAX_VIEWPORT_DIMS: 0x0d3a,\n  SUBPIXEL_BITS: 0x0d50,\n  RED_BITS: 0x0d52,\n  GREEN_BITS: 0x0d53,\n  BLUE_BITS: 0x0d54,\n  ALPHA_BITS: 0x0d55,\n  DEPTH_BITS: 0x0d56,\n  STENCIL_BITS: 0x0d57,\n  POLYGON_OFFSET_UNITS: 0x2a00,\n  POLYGON_OFFSET_FACTOR: 0x8038,\n  TEXTURE_BINDING_2D: 0x8069,\n  SAMPLE_BUFFERS: 0x80a8,\n  SAMPLES: 0x80a9,\n  SAMPLE_COVERAGE_VALUE: 0x80aa,\n  SAMPLE_COVERAGE_INVERT: 0x80ab,\n  COMPRESSED_TEXTURE_FORMATS: 0x86a3,\n  VENDOR: 0x1f00,\n  RENDERER: 0x1f01,\n  VERSION: 0x1f02,\n  IMPLEMENTATION_COLOR_READ_TYPE: 0x8b9a,\n  IMPLEMENTATION_COLOR_READ_FORMAT: 0x8b9b,\n  BROWSER_DEFAULT_WEBGL: 0x9244,\n\n  // Buffers\n  // Constants passed to bufferData(), bufferSubData(), bindBuffer(), or\n  // getBufferParameter().\n\n  STATIC_DRAW: 0x88e4,\n  STREAM_DRAW: 0x88e0,\n  DYNAMIC_DRAW: 0x88e8,\n  ARRAY_BUFFER: 0x8892,\n  ELEMENT_ARRAY_BUFFER: 0x8893,\n  BUFFER_SIZE: 0x8764,\n  BUFFER_USAGE: 0x8765,\n\n  // Vertex attributes\n  // Constants passed to getVertexAttrib().\n\n  CURRENT_VERTEX_ATTRIB: 0x8626,\n  VERTEX_ATTRIB_ARRAY_ENABLED: 0x8622,\n  VERTEX_ATTRIB_ARRAY_SIZE: 0x8623,\n  VERTEX_ATTRIB_ARRAY_STRIDE: 0x8624,\n  VERTEX_ATTRIB_ARRAY_TYPE: 0x8625,\n  VERTEX_ATTRIB_ARRAY_NORMALIZED: 0x886a,\n  VERTEX_ATTRIB_ARRAY_POINTER: 0x8645,\n  VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 0x889f,\n\n  // Culling\n  // Constants passed to cullFace().\n\n  CULL_FACE: 0x0b44,\n  FRONT: 0x0404,\n  BACK: 0x0405,\n  FRONT_AND_BACK: 0x0408,\n\n  // Enabling and disabling\n  // Constants passed to enable() or disable().\n\n  BLEND: 0x0be2,\n  DEPTH_TEST: 0x0b71,\n  DITHER: 0x0bd0,\n  POLYGON_OFFSET_FILL: 0x8037,\n  SAMPLE_ALPHA_TO_COVERAGE: 0x809e,\n  SAMPLE_COVERAGE: 0x80a0,\n  SCISSOR_TEST: 0x0c11,\n  STENCIL_TEST: 0x0b90,\n\n  // Errors\n  // Constants returned from getError().\n\n  NO_ERROR: 0,\n  INVALID_ENUM: 0x0500,\n  INVALID_VALUE: 0x0501,\n  INVALID_OPERATION: 0x0502,\n  OUT_OF_MEMORY: 0x0505,\n  CONTEXT_LOST_WEBGL: 0x9242,\n\n  // Front face directions\n  // Constants passed to frontFace().\n\n  CW: 0x0900,\n  CCW: 0x0901,\n\n  // Hints\n  // Constants passed to hint()\n\n  DONT_CARE: 0x1100,\n  FASTEST: 0x1101,\n  NICEST: 0x1102,\n  GENERATE_MIPMAP_HINT: 0x8192,\n\n  // Data types\n\n  BYTE: 0x1400,\n  UNSIGNED_BYTE: 0x1401,\n  SHORT: 0x1402,\n  UNSIGNED_SHORT: 0x1403,\n  INT: 0x1404,\n  UNSIGNED_INT: 0x1405,\n  FLOAT: 0x1406,\n  DOUBLE: 0x140a,\n\n  // Pixel formats\n\n  DEPTH_COMPONENT: 0x1902,\n  ALPHA: 0x1906,\n  RGB: 0x1907,\n  RGBA: 0x1908,\n  LUMINANCE: 0x1909,\n  LUMINANCE_ALPHA: 0x190a,\n\n  // Pixel types\n\n  // UNSIGNED_BYTE: 0x1401,\n  UNSIGNED_SHORT_4_4_4_4: 0x8033,\n  UNSIGNED_SHORT_5_5_5_1: 0x8034,\n  UNSIGNED_SHORT_5_6_5: 0x8363,\n\n  // Shaders\n  // Constants passed to createShader() or getShaderParameter()\n\n  FRAGMENT_SHADER: 0x8b30,\n  VERTEX_SHADER: 0x8b31,\n  COMPILE_STATUS: 0x8b81,\n  DELETE_STATUS: 0x8b80,\n  LINK_STATUS: 0x8b82,\n  VALIDATE_STATUS: 0x8b83,\n  ATTACHED_SHADERS: 0x8b85,\n  ACTIVE_ATTRIBUTES: 0x8b89,\n  ACTIVE_UNIFORMS: 0x8b86,\n  MAX_VERTEX_ATTRIBS: 0x8869,\n  MAX_VERTEX_UNIFORM_VECTORS: 0x8dfb,\n  MAX_VARYING_VECTORS: 0x8dfc,\n  MAX_COMBINED_TEXTURE_IMAGE_UNITS: 0x8b4d,\n  MAX_VERTEX_TEXTURE_IMAGE_UNITS: 0x8b4c,\n  MAX_TEXTURE_IMAGE_UNITS: 0x8872,\n  MAX_FRAGMENT_UNIFORM_VECTORS: 0x8dfd,\n  SHADER_TYPE: 0x8b4f,\n  SHADING_LANGUAGE_VERSION: 0x8b8c,\n  CURRENT_PROGRAM: 0x8b8d,\n\n  // Depth or stencil tests\n  // Constants passed to depthFunc() or stencilFunc().\n\n  NEVER: 0x0200,\n  ALWAYS: 0x0207,\n  LESS: 0x0201,\n  EQUAL: 0x0202,\n  LEQUAL: 0x0203,\n  GREATER: 0x0204,\n  GEQUAL: 0x0206,\n  NOTEQUAL: 0x0205,\n\n  // Stencil actions\n  // Constants passed to stencilOp().\n\n  KEEP: 0x1e00,\n  REPLACE: 0x1e01,\n  INCR: 0x1e02,\n  DECR: 0x1e03,\n  INVERT: 0x150a,\n  INCR_WRAP: 0x8507,\n  DECR_WRAP: 0x8508,\n\n  // Textures\n  // Constants passed to texParameteri(),\n  // texParameterf(), bindTexture(), texImage2D(), and others.\n\n  NEAREST: 0x2600,\n  LINEAR: 0x2601,\n  NEAREST_MIPMAP_NEAREST: 0x2700,\n  LINEAR_MIPMAP_NEAREST: 0x2701,\n  NEAREST_MIPMAP_LINEAR: 0x2702,\n  LINEAR_MIPMAP_LINEAR: 0x2703,\n  TEXTURE_MAG_FILTER: 0x2800,\n  TEXTURE_MIN_FILTER: 0x2801,\n  TEXTURE_WRAP_S: 0x2802,\n  TEXTURE_WRAP_T: 0x2803,\n  TEXTURE_2D: 0x0de1,\n  TEXTURE: 0x1702,\n  TEXTURE_CUBE_MAP: 0x8513,\n  TEXTURE_BINDING_CUBE_MAP: 0x8514,\n  TEXTURE_CUBE_MAP_POSITIVE_X: 0x8515,\n  TEXTURE_CUBE_MAP_NEGATIVE_X: 0x8516,\n  TEXTURE_CUBE_MAP_POSITIVE_Y: 0x8517,\n  TEXTURE_CUBE_MAP_NEGATIVE_Y: 0x8518,\n  TEXTURE_CUBE_MAP_POSITIVE_Z: 0x8519,\n  TEXTURE_CUBE_MAP_NEGATIVE_Z: 0x851a,\n  MAX_CUBE_MAP_TEXTURE_SIZE: 0x851c,\n  // TEXTURE0 - 31 0x84C0 - 0x84DF A texture unit.\n  TEXTURE0: 0x84c0,\n  ACTIVE_TEXTURE: 0x84e0,\n  REPEAT: 0x2901,\n  CLAMP_TO_EDGE: 0x812f,\n  MIRRORED_REPEAT: 0x8370,\n\n  // Emulation\n  TEXTURE_WIDTH: 0x1000,\n  TEXTURE_HEIGHT: 0x1001,\n\n  // Uniform types\n\n  FLOAT_VEC2: 0x8b50,\n  FLOAT_VEC3: 0x8b51,\n  FLOAT_VEC4: 0x8b52,\n  INT_VEC2: 0x8b53,\n  INT_VEC3: 0x8b54,\n  INT_VEC4: 0x8b55,\n  BOOL: 0x8b56,\n  BOOL_VEC2: 0x8b57,\n  BOOL_VEC3: 0x8b58,\n  BOOL_VEC4: 0x8b59,\n  FLOAT_MAT2: 0x8b5a,\n  FLOAT_MAT3: 0x8b5b,\n  FLOAT_MAT4: 0x8b5c,\n  SAMPLER_2D: 0x8b5e,\n  SAMPLER_CUBE: 0x8b60,\n\n  // Shader precision-specified types\n\n  LOW_FLOAT: 0x8df0,\n  MEDIUM_FLOAT: 0x8df1,\n  HIGH_FLOAT: 0x8df2,\n  LOW_INT: 0x8df3,\n  MEDIUM_INT: 0x8df4,\n  HIGH_INT: 0x8df5,\n\n  // Framebuffers and renderbuffers\n\n  FRAMEBUFFER: 0x8d40,\n  RENDERBUFFER: 0x8d41,\n  RGBA4: 0x8056,\n  RGB5_A1: 0x8057,\n  RGB565: 0x8d62,\n  DEPTH_COMPONENT16: 0x81a5,\n  STENCIL_INDEX: 0x1901,\n  STENCIL_INDEX8: 0x8d48,\n  DEPTH_STENCIL: 0x84f9,\n  RENDERBUFFER_WIDTH: 0x8d42,\n  RENDERBUFFER_HEIGHT: 0x8d43,\n  RENDERBUFFER_INTERNAL_FORMAT: 0x8d44,\n  RENDERBUFFER_RED_SIZE: 0x8d50,\n  RENDERBUFFER_GREEN_SIZE: 0x8d51,\n  RENDERBUFFER_BLUE_SIZE: 0x8d52,\n  RENDERBUFFER_ALPHA_SIZE: 0x8d53,\n  RENDERBUFFER_DEPTH_SIZE: 0x8d54,\n  RENDERBUFFER_STENCIL_SIZE: 0x8d55,\n  FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 0x8cd0,\n  FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 0x8cd1,\n  FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 0x8cd2,\n  FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 0x8cd3,\n  COLOR_ATTACHMENT0: 0x8ce0,\n  DEPTH_ATTACHMENT: 0x8d00,\n  STENCIL_ATTACHMENT: 0x8d20,\n  DEPTH_STENCIL_ATTACHMENT: 0x821a,\n  NONE: 0,\n  FRAMEBUFFER_COMPLETE: 0x8cd5,\n  FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 0x8cd6,\n  FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 0x8cd7,\n  FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 0x8cd9,\n  FRAMEBUFFER_UNSUPPORTED: 0x8cdd,\n  FRAMEBUFFER_BINDING: 0x8ca6,\n  RENDERBUFFER_BINDING: 0x8ca7,\n  READ_FRAMEBUFFER: 0x8ca8,\n  DRAW_FRAMEBUFFER: 0x8ca9,\n  MAX_RENDERBUFFER_SIZE: 0x84e8,\n  INVALID_FRAMEBUFFER_OPERATION: 0x0506,\n\n  // Pixel storage modes\n  // Constants passed to pixelStorei().\n\n  UNPACK_FLIP_Y_WEBGL: 0x9240,\n  UNPACK_PREMULTIPLY_ALPHA_WEBGL: 0x9241,\n  UNPACK_COLORSPACE_CONVERSION_WEBGL: 0x9243,\n\n  // /////////////////////////////////////////////////////\n  // Additional constants defined WebGL 2\n  // These constants are defined on the WebGL2RenderingContext interface.\n  // All WebGL 1 constants are also available in a WebGL 2 context.\n  // /////////////////////////////////////////////////////\n\n  // Getting GL parameter information\n  // Constants passed to getParameter()\n  // to specify what information to return.\n\n  READ_BUFFER: 0x0c02,\n  UNPACK_ROW_LENGTH: 0x0cf2,\n  UNPACK_SKIP_ROWS: 0x0cf3,\n  UNPACK_SKIP_PIXELS: 0x0cf4,\n  PACK_ROW_LENGTH: 0x0d02,\n  PACK_SKIP_ROWS: 0x0d03,\n  PACK_SKIP_PIXELS: 0x0d04,\n  TEXTURE_BINDING_3D: 0x806a,\n  UNPACK_SKIP_IMAGES: 0x806d,\n  UNPACK_IMAGE_HEIGHT: 0x806e,\n  MAX_3D_TEXTURE_SIZE: 0x8073,\n  MAX_ELEMENTS_VERTICES: 0x80e8,\n  MAX_ELEMENTS_INDICES: 0x80e9,\n  MAX_TEXTURE_LOD_BIAS: 0x84fd,\n  MAX_FRAGMENT_UNIFORM_COMPONENTS: 0x8b49,\n  MAX_VERTEX_UNIFORM_COMPONENTS: 0x8b4a,\n  MAX_ARRAY_TEXTURE_LAYERS: 0x88ff,\n  MIN_PROGRAM_TEXEL_OFFSET: 0x8904,\n  MAX_PROGRAM_TEXEL_OFFSET: 0x8905,\n  MAX_VARYING_COMPONENTS: 0x8b4b,\n  FRAGMENT_SHADER_DERIVATIVE_HINT: 0x8b8b,\n  RASTERIZER_DISCARD: 0x8c89,\n  VERTEX_ARRAY_BINDING: 0x85b5,\n  MAX_VERTEX_OUTPUT_COMPONENTS: 0x9122,\n  MAX_FRAGMENT_INPUT_COMPONENTS: 0x9125,\n  MAX_SERVER_WAIT_TIMEOUT: 0x9111,\n  MAX_ELEMENT_INDEX: 0x8d6b,\n\n  // Textures\n  // Constants passed to texParameteri(),\n  // texParameterf(), bindTexture(), texImage2D(), and others.\n\n  RED: 0x1903,\n  RGB8: 0x8051,\n  RGBA8: 0x8058,\n  RGB10_A2: 0x8059,\n  TEXTURE_3D: 0x806f,\n  TEXTURE_WRAP_R: 0x8072,\n  TEXTURE_MIN_LOD: 0x813a,\n  TEXTURE_MAX_LOD: 0x813b,\n  TEXTURE_BASE_LEVEL: 0x813c,\n  TEXTURE_MAX_LEVEL: 0x813d,\n  TEXTURE_COMPARE_MODE: 0x884c,\n  TEXTURE_COMPARE_FUNC: 0x884d,\n  SRGB: 0x8c40,\n  SRGB8: 0x8c41,\n  SRGB8_ALPHA8: 0x8c43,\n  COMPARE_REF_TO_TEXTURE: 0x884e,\n  RGBA32F: 0x8814,\n  RGB32F: 0x8815,\n  RGBA16F: 0x881a,\n  RGB16F: 0x881b,\n  TEXTURE_2D_ARRAY: 0x8c1a,\n  TEXTURE_BINDING_2D_ARRAY: 0x8c1d,\n  R11F_G11F_B10F: 0x8c3a,\n  RGB9_E5: 0x8c3d,\n  RGBA32UI: 0x8d70,\n  RGB32UI: 0x8d71,\n  RGBA16UI: 0x8d76,\n  RGB16UI: 0x8d77,\n  RGBA8UI: 0x8d7c,\n  RGB8UI: 0x8d7d,\n  RGBA32I: 0x8d82,\n  RGB32I: 0x8d83,\n  RGBA16I: 0x8d88,\n  RGB16I: 0x8d89,\n  RGBA8I: 0x8d8e,\n  RGB8I: 0x8d8f,\n  RED_INTEGER: 0x8d94,\n  RGB_INTEGER: 0x8d98,\n  RGBA_INTEGER: 0x8d99,\n  R8: 0x8229,\n  RG8: 0x822b,\n  R16F: 0x822d,\n  R32F: 0x822e,\n  RG16F: 0x822f,\n  RG32F: 0x8230,\n  R8I: 0x8231,\n  R8UI: 0x8232,\n  R16I: 0x8233,\n  R16UI: 0x8234,\n  R32I: 0x8235,\n  R32UI: 0x8236,\n  RG8I: 0x8237,\n  RG8UI: 0x8238,\n  RG16I: 0x8239,\n  RG16UI: 0x823a,\n  RG32I: 0x823b,\n  RG32UI: 0x823c,\n  R8_SNORM: 0x8f94,\n  RG8_SNORM: 0x8f95,\n  RGB8_SNORM: 0x8f96,\n  RGBA8_SNORM: 0x8f97,\n  RGB10_A2UI: 0x906f,\n\n  /* covered by extension\n  COMPRESSED_R11_EAC : 0x9270,\n  COMPRESSED_SIGNED_R11_EAC: 0x9271,\n  COMPRESSED_RG11_EAC: 0x9272,\n  COMPRESSED_SIGNED_RG11_EAC : 0x9273,\n  COMPRESSED_RGB8_ETC2 : 0x9274,\n  COMPRESSED_SRGB8_ETC2: 0x9275,\n  COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 : 0x9276,\n  COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC : 0x9277,\n  COMPRESSED_RGBA8_ETC2_EAC: 0x9278,\n  COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : 0x9279,\n  */\n  TEXTURE_IMMUTABLE_FORMAT: 0x912f,\n  TEXTURE_IMMUTABLE_LEVELS: 0x82df,\n\n  // Pixel types\n\n  UNSIGNED_INT_2_10_10_10_REV: 0x8368,\n  UNSIGNED_INT_10F_11F_11F_REV: 0x8c3b,\n  UNSIGNED_INT_5_9_9_9_REV: 0x8c3e,\n  FLOAT_32_UNSIGNED_INT_24_8_REV: 0x8dad,\n  UNSIGNED_INT_24_8: 0x84fa,\n  HALF_FLOAT: 0x140b,\n  RG: 0x8227,\n  RG_INTEGER: 0x8228,\n  INT_2_10_10_10_REV: 0x8d9f,\n\n  // Queries\n\n  CURRENT_QUERY: 0x8865,\n  QUERY_RESULT: 0x8866,\n  QUERY_RESULT_AVAILABLE: 0x8867,\n  ANY_SAMPLES_PASSED: 0x8c2f,\n  ANY_SAMPLES_PASSED_CONSERVATIVE: 0x8d6a,\n\n  // Draw buffers\n\n  MAX_DRAW_BUFFERS: 0x8824,\n  DRAW_BUFFER0: 0x8825,\n  DRAW_BUFFER1: 0x8826,\n  DRAW_BUFFER2: 0x8827,\n  DRAW_BUFFER3: 0x8828,\n  DRAW_BUFFER4: 0x8829,\n  DRAW_BUFFER5: 0x882a,\n  DRAW_BUFFER6: 0x882b,\n  DRAW_BUFFER7: 0x882c,\n  DRAW_BUFFER8: 0x882d,\n  DRAW_BUFFER9: 0x882e,\n  DRAW_BUFFER10: 0x882f,\n  DRAW_BUFFER11: 0x8830,\n  DRAW_BUFFER12: 0x8831,\n  DRAW_BUFFER13: 0x8832,\n  DRAW_BUFFER14: 0x8833,\n  DRAW_BUFFER15: 0x8834,\n  MAX_COLOR_ATTACHMENTS: 0x8cdf,\n  COLOR_ATTACHMENT1: 0x8ce1,\n  COLOR_ATTACHMENT2: 0x8ce2,\n  COLOR_ATTACHMENT3: 0x8ce3,\n  COLOR_ATTACHMENT4: 0x8ce4,\n  COLOR_ATTACHMENT5: 0x8ce5,\n  COLOR_ATTACHMENT6: 0x8ce6,\n  COLOR_ATTACHMENT7: 0x8ce7,\n  COLOR_ATTACHMENT8: 0x8ce8,\n  COLOR_ATTACHMENT9: 0x8ce9,\n  COLOR_ATTACHMENT10: 0x8cea,\n  COLOR_ATTACHMENT11: 0x8ceb,\n  COLOR_ATTACHMENT12: 0x8cec,\n  COLOR_ATTACHMENT13: 0x8ced,\n  COLOR_ATTACHMENT14: 0x8cee,\n  COLOR_ATTACHMENT15: 0x8cef,\n\n  // Samplers\n\n  SAMPLER_3D: 0x8b5f,\n  SAMPLER_2D_SHADOW: 0x8b62,\n  SAMPLER_2D_ARRAY: 0x8dc1,\n  SAMPLER_2D_ARRAY_SHADOW: 0x8dc4,\n  SAMPLER_CUBE_SHADOW: 0x8dc5,\n  INT_SAMPLER_2D: 0x8dca,\n  INT_SAMPLER_3D: 0x8dcb,\n  INT_SAMPLER_CUBE: 0x8dcc,\n  INT_SAMPLER_2D_ARRAY: 0x8dcf,\n  UNSIGNED_INT_SAMPLER_2D: 0x8dd2,\n  UNSIGNED_INT_SAMPLER_3D: 0x8dd3,\n  UNSIGNED_INT_SAMPLER_CUBE: 0x8dd4,\n  UNSIGNED_INT_SAMPLER_2D_ARRAY: 0x8dd7,\n  MAX_SAMPLES: 0x8d57,\n  SAMPLER_BINDING: 0x8919,\n\n  // Buffers\n\n  PIXEL_PACK_BUFFER: 0x88eb,\n  PIXEL_UNPACK_BUFFER: 0x88ec,\n  PIXEL_PACK_BUFFER_BINDING: 0x88ed,\n  PIXEL_UNPACK_BUFFER_BINDING: 0x88ef,\n  COPY_READ_BUFFER: 0x8f36,\n  COPY_WRITE_BUFFER: 0x8f37,\n  COPY_READ_BUFFER_BINDING: 0x8f36,\n  COPY_WRITE_BUFFER_BINDING: 0x8f37,\n\n  // Data types\n\n  FLOAT_MAT2x3: 0x8b65,\n  FLOAT_MAT2x4: 0x8b66,\n  FLOAT_MAT3x2: 0x8b67,\n  FLOAT_MAT3x4: 0x8b68,\n  FLOAT_MAT4x2: 0x8b69,\n  FLOAT_MAT4x3: 0x8b6a,\n  UNSIGNED_INT_VEC2: 0x8dc6,\n  UNSIGNED_INT_VEC3: 0x8dc7,\n  UNSIGNED_INT_VEC4: 0x8dc8,\n  UNSIGNED_NORMALIZED: 0x8c17,\n  SIGNED_NORMALIZED: 0x8f9c,\n\n  // Vertex attributes\n\n  VERTEX_ATTRIB_ARRAY_INTEGER: 0x88fd,\n  VERTEX_ATTRIB_ARRAY_DIVISOR: 0x88fe,\n\n  // Transform feedback\n\n  TRANSFORM_FEEDBACK_BUFFER_MODE: 0x8c7f,\n  MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: 0x8c80,\n  TRANSFORM_FEEDBACK_VARYINGS: 0x8c83,\n  TRANSFORM_FEEDBACK_BUFFER_START: 0x8c84,\n  TRANSFORM_FEEDBACK_BUFFER_SIZE: 0x8c85,\n  TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: 0x8c88,\n  MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: 0x8c8a,\n  MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: 0x8c8b,\n  INTERLEAVED_ATTRIBS: 0x8c8c,\n  SEPARATE_ATTRIBS: 0x8c8d,\n  TRANSFORM_FEEDBACK_BUFFER: 0x8c8e,\n  TRANSFORM_FEEDBACK_BUFFER_BINDING: 0x8c8f,\n  TRANSFORM_FEEDBACK: 0x8e22,\n  TRANSFORM_FEEDBACK_PAUSED: 0x8e23,\n  TRANSFORM_FEEDBACK_ACTIVE: 0x8e24,\n  TRANSFORM_FEEDBACK_BINDING: 0x8e25,\n\n  // Framebuffers and renderbuffers\n\n  FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: 0x8210,\n  FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: 0x8211,\n  FRAMEBUFFER_ATTACHMENT_RED_SIZE: 0x8212,\n  FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: 0x8213,\n  FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: 0x8214,\n  FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: 0x8215,\n  FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: 0x8216,\n  FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: 0x8217,\n  FRAMEBUFFER_DEFAULT: 0x8218,\n  // DEPTH_STENCIL_ATTACHMENT : 0x821A,\n  // DEPTH_STENCIL: 0x84F9,\n  DEPTH24_STENCIL8: 0x88f0,\n  DRAW_FRAMEBUFFER_BINDING: 0x8ca6,\n  READ_FRAMEBUFFER_BINDING: 0x8caa,\n  RENDERBUFFER_SAMPLES: 0x8cab,\n  FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: 0x8cd4,\n  FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: 0x8d56,\n\n  // Uniforms\n\n  UNIFORM_BUFFER: 0x8a11,\n  UNIFORM_BUFFER_BINDING: 0x8a28,\n  UNIFORM_BUFFER_START: 0x8a29,\n  UNIFORM_BUFFER_SIZE: 0x8a2a,\n  MAX_VERTEX_UNIFORM_BLOCKS: 0x8a2b,\n  MAX_FRAGMENT_UNIFORM_BLOCKS: 0x8a2d,\n  MAX_COMBINED_UNIFORM_BLOCKS: 0x8a2e,\n  MAX_UNIFORM_BUFFER_BINDINGS: 0x8a2f,\n  MAX_UNIFORM_BLOCK_SIZE: 0x8a30,\n  MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: 0x8a31,\n  MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: 0x8a33,\n  UNIFORM_BUFFER_OFFSET_ALIGNMENT: 0x8a34,\n  ACTIVE_UNIFORM_BLOCKS: 0x8a36,\n  UNIFORM_TYPE: 0x8a37,\n  UNIFORM_SIZE: 0x8a38,\n  UNIFORM_BLOCK_INDEX: 0x8a3a,\n  UNIFORM_OFFSET: 0x8a3b,\n  UNIFORM_ARRAY_STRIDE: 0x8a3c,\n  UNIFORM_MATRIX_STRIDE: 0x8a3d,\n  UNIFORM_IS_ROW_MAJOR: 0x8a3e,\n  UNIFORM_BLOCK_BINDING: 0x8a3f,\n  UNIFORM_BLOCK_DATA_SIZE: 0x8a40,\n  UNIFORM_BLOCK_ACTIVE_UNIFORMS: 0x8a42,\n  UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: 0x8a43,\n  UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: 0x8a44,\n  UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: 0x8a46,\n\n  // Sync objects\n\n  OBJECT_TYPE: 0x9112,\n  SYNC_CONDITION: 0x9113,\n  SYNC_STATUS: 0x9114,\n  SYNC_FLAGS: 0x9115,\n  SYNC_FENCE: 0x9116,\n  SYNC_GPU_COMMANDS_COMPLETE: 0x9117,\n  UNSIGNALED: 0x9118,\n  SIGNALED: 0x9119,\n  ALREADY_SIGNALED: 0x911a,\n  TIMEOUT_EXPIRED: 0x911b,\n  CONDITION_SATISFIED: 0x911c,\n  WAIT_FAILED: 0x911d,\n  SYNC_FLUSH_COMMANDS_BIT: 0x00000001,\n\n  // Miscellaneous constants\n\n  COLOR: 0x1800,\n  DEPTH: 0x1801,\n  STENCIL: 0x1802,\n  MIN: 0x8007,\n  MAX: 0x8008,\n  DEPTH_COMPONENT24: 0x81a6,\n  STREAM_READ: 0x88e1,\n  STREAM_COPY: 0x88e2,\n  STATIC_READ: 0x88e5,\n  STATIC_COPY: 0x88e6,\n  DYNAMIC_READ: 0x88e9,\n  DYNAMIC_COPY: 0x88ea,\n  DEPTH_COMPONENT32F: 0x8cac,\n  DEPTH32F_STENCIL8: 0x8cad,\n  INVALID_INDEX: 0xffffffff,\n  TIMEOUT_IGNORED: -1,\n  MAX_CLIENT_WAIT_TIMEOUT_WEBGL: 0x9247,\n\n  // Constants defined in WebGL extensions\n\n  // ANGLE_instanced_arrays\n\n  VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE: 0x88fe,\n\n  // WEBGL_debug_renderer_info\n\n  UNMASKED_VENDOR_WEBGL: 0x9245,\n  UNMASKED_RENDERER_WEBGL: 0x9246,\n\n  // EXT_texture_filter_anisotropic\n\n  MAX_TEXTURE_MAX_ANISOTROPY_EXT: 0x84ff,\n  TEXTURE_MAX_ANISOTROPY_EXT: 0x84fe,\n\n  // WEBGL_compressed_texture_s3tc\n\n  COMPRESSED_RGB_S3TC_DXT1_EXT: 0x83f0,\n  COMPRESSED_RGBA_S3TC_DXT1_EXT: 0x83f1,\n  COMPRESSED_RGBA_S3TC_DXT3_EXT: 0x83f2,\n  COMPRESSED_RGBA_S3TC_DXT5_EXT: 0x83f3,\n\n  // WEBGL_compressed_texture_es3\n\n  COMPRESSED_R11_EAC: 0x9270,\n  COMPRESSED_SIGNED_R11_EAC: 0x9271,\n  COMPRESSED_RG11_EAC: 0x9272,\n  COMPRESSED_SIGNED_RG11_EAC: 0x9273,\n  COMPRESSED_RGB8_ETC2: 0x9274,\n  COMPRESSED_RGBA8_ETC2_EAC: 0x9275,\n  COMPRESSED_SRGB8_ETC2: 0x9276,\n  COMPRESSED_SRGB8_ALPHA8_ETC2_EAC: 0x9277,\n  COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2: 0x9278,\n  COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2: 0x9279,\n\n  // WEBGL_compressed_texture_pvrtc\n\n  COMPRESSED_RGB_PVRTC_4BPPV1_IMG: 0x8c00,\n  COMPRESSED_RGBA_PVRTC_4BPPV1_IMG: 0x8c02,\n  COMPRESSED_RGB_PVRTC_2BPPV1_IMG: 0x8c01,\n  COMPRESSED_RGBA_PVRTC_2BPPV1_IMG: 0x8c03,\n\n  // WEBGL_compressed_texture_etc1\n\n  COMPRESSED_RGB_ETC1_WEBGL: 0x8d64,\n\n  // WEBGL_compressed_texture_atc\n\n  COMPRESSED_RGB_ATC_WEBGL: 0x8c92,\n  COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL: 0x8c92,\n  COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL: 0x87ee,\n\n  // WEBGL_depth_texture\n\n  UNSIGNED_INT_24_8_WEBGL: 0x84fa,\n\n  // OES_texture_half_float\n\n  HALF_FLOAT_OES: 0x8d61,\n\n  // WEBGL_color_buffer_float\n\n  RGBA32F_EXT: 0x8814,\n  RGB32F_EXT: 0x8815,\n  FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT: 0x8211,\n  UNSIGNED_NORMALIZED_EXT: 0x8c17,\n\n  // EXT_blend_minmax\n\n  MIN_EXT: 0x8007,\n  MAX_EXT: 0x8008,\n\n  // EXT_sRGB\n\n  SRGB_EXT: 0x8c40,\n  SRGB_ALPHA_EXT: 0x8c42,\n  SRGB8_ALPHA8_EXT: 0x8c43,\n  FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT: 0x8210,\n\n  // OES_standard_derivatives\n\n  FRAGMENT_SHADER_DERIVATIVE_HINT_OES: 0x8b8b,\n\n  // WEBGL_draw_buffers\n\n  COLOR_ATTACHMENT0_WEBGL: 0x8ce0,\n  COLOR_ATTACHMENT1_WEBGL: 0x8ce1,\n  COLOR_ATTACHMENT2_WEBGL: 0x8ce2,\n  COLOR_ATTACHMENT3_WEBGL: 0x8ce3,\n  COLOR_ATTACHMENT4_WEBGL: 0x8ce4,\n  COLOR_ATTACHMENT5_WEBGL: 0x8ce5,\n  COLOR_ATTACHMENT6_WEBGL: 0x8ce6,\n  COLOR_ATTACHMENT7_WEBGL: 0x8ce7,\n  COLOR_ATTACHMENT8_WEBGL: 0x8ce8,\n  COLOR_ATTACHMENT9_WEBGL: 0x8ce9,\n  COLOR_ATTACHMENT10_WEBGL: 0x8cea,\n  COLOR_ATTACHMENT11_WEBGL: 0x8ceb,\n  COLOR_ATTACHMENT12_WEBGL: 0x8cec,\n  COLOR_ATTACHMENT13_WEBGL: 0x8ced,\n  COLOR_ATTACHMENT14_WEBGL: 0x8cee,\n  COLOR_ATTACHMENT15_WEBGL: 0x8cef,\n  DRAW_BUFFER0_WEBGL: 0x8825,\n  DRAW_BUFFER1_WEBGL: 0x8826,\n  DRAW_BUFFER2_WEBGL: 0x8827,\n  DRAW_BUFFER3_WEBGL: 0x8828,\n  DRAW_BUFFER4_WEBGL: 0x8829,\n  DRAW_BUFFER5_WEBGL: 0x882a,\n  DRAW_BUFFER6_WEBGL: 0x882b,\n  DRAW_BUFFER7_WEBGL: 0x882c,\n  DRAW_BUFFER8_WEBGL: 0x882d,\n  DRAW_BUFFER9_WEBGL: 0x882e,\n  DRAW_BUFFER10_WEBGL: 0x882f,\n  DRAW_BUFFER11_WEBGL: 0x8830,\n  DRAW_BUFFER12_WEBGL: 0x8831,\n  DRAW_BUFFER13_WEBGL: 0x8832,\n  DRAW_BUFFER14_WEBGL: 0x8833,\n  DRAW_BUFFER15_WEBGL: 0x8834,\n  MAX_COLOR_ATTACHMENTS_WEBGL: 0x8cdf,\n  MAX_DRAW_BUFFERS_WEBGL: 0x8824,\n\n  // OES_vertex_array_object\n\n  VERTEX_ARRAY_BINDING_OES: 0x85b5,\n\n  // EXT_disjoint_timer_query\n\n  QUERY_COUNTER_BITS_EXT: 0x8864,\n  CURRENT_QUERY_EXT: 0x8865,\n  QUERY_RESULT_EXT: 0x8866,\n  QUERY_RESULT_AVAILABLE_EXT: 0x8867,\n  TIME_ELAPSED_EXT: 0x88bf,\n  TIMESTAMP_EXT: 0x8e28,\n  GPU_DISJOINT_EXT: 0x8fbb // A Boolean indicating whether or not the GPU performed any disjoint operation.\n};\n", "/* eslint-disable camelcase */\nconst INITIAL_STATE: Record<string, any> = {\n  outlineEnabled: false,\n  outlineRenderShadowmap: false,\n  outlineShadowmap: null,\n};\n\nfunction getUniforms({ outlineEnabled, outlineRenderShadowmap, outlineShadowmap } = INITIAL_STATE) {\n  const uniforms: Record<string, any> = {};\n  if (outlineEnabled !== undefined) {\n    // ? 1.0 : 0.0;\n    uniforms.outline_uEnabled = outlineEnabled;\n  }\n  if (outlineRenderShadowmap !== undefined) {\n    // ? 1.0 : 0.0;\n    uniforms.outline_uRenderOutlines = outlineRenderShadowmap;\n  }\n  if (outlineShadowmap !== undefined) {\n    uniforms.outline_uShadowmap = outlineShadowmap;\n  }\n  return uniforms;\n}\n\nconst vs = `\\\nattribute float instanceZLevel;\nvarying float outline_vzLevel;\nvarying vec4 outline_vPosition;\n\n// Set the z level for the outline shadowmap rendering\nvoid outline_setZLevel(float zLevel) {\n  outline_vzLevel = zLevel;\n}\n\n// Store an adjusted position for texture2DProj\nvoid outline_setUV(vec4 position) {\n  // mat4(\n  //   0.5, 0.0, 0.0, 0.0,\n  //   0.0, 0.5, 0.0, 0.0,\n  //   0.0, 0.0, 0.5, 0.0,\n  //   0.5, 0.5, 0.5, 1.0\n  // ) * position;\n  outline_vPosition = vec4(position.xyz * 0.5 + position.w * 0.5, position.w);\n}\n`;\n\nconst fs = `\\\nuniform bool outline_uEnabled;\nuniform bool outline_uRenderOutlines;\nuniform sampler2D outline_uShadowmap;\n\nvarying float outline_vzLevel;\n// varying vec2 outline_vUV;\nvarying vec4 outline_vPosition;\n\nconst float OUTLINE_Z_LEVEL_ERROR = 0.01;\n\n// Return a darker color in shadowmap\nvec4 outline_filterShadowColor(vec4 color) {\n  return vec4(outline_vzLevel / 255., outline_vzLevel / 255., outline_vzLevel / 255., 1.);\n}\n\n// Return a darker color if in shadowmap\nvec4 outline_filterDarkenColor(vec4 color) {\n  if (outline_uEnabled) {\n    float maxZLevel;\n    if (outline_vPosition.q > 0.0) {\n      maxZLevel = texture2DProj(outline_uShadowmap, outline_vPosition).r * 255.;\n    } else {\n      discard;\n    }\n    if (maxZLevel < outline_vzLevel + OUTLINE_Z_LEVEL_ERROR) {\n      vec4(color.rgb * 0.5, color.a);\n    } else {\n      discard;\n    }\n  }\n  return color;\n}\n\n// if enabled and rendering outlines - Render depth to shadowmap\n// if enabled and rendering colors - Return a darker color if in shadowmap\n// if disabled, just return color\nvec4 outline_filterColor(vec4 color) {\n  if (outline_uEnabled) {\n    return outline_uRenderOutlines ?\n      outline_filterShadowColor(color) :\n      outline_filterDarkenColor(color);\n  }\n  return color;\n}\n`;\n\nexport default {\n  name: 'outline',\n  vs,\n  fs,\n  getUniforms,\n};\n", "import { PathLayer } from '@deck.gl/layers';\nimport { PathLayerProps } from '@deck.gl/layers/path-layer/path-layer';\nimport GL from '@luma.gl/constants';\nimport { Framebuffer, Texture2D } from '@luma.gl/core';\nimport outline from '../../shaderlib/outline/outline';\nimport { UNIT } from '../../constants';\n\n// TODO - this should be built into assembleShaders\nfunction injectShaderCode({ source, code = '' }) {\n  const INJECT_CODE = /}[^{}]*$/;\n  return source.replace(INJECT_CODE, code.concat('\\n}\\n'));\n}\n\nconst VS_CODE = `\\\n  outline_setUV(gl_Position);\n  outline_setZLevel(instanceZLevel);\n`;\n\nconst FS_CODE = `\\\n  gl_FragColor = outline_filterColor(gl_FragColor);\n`;\n\nexport interface PathOutlineLayerProps<D> extends PathLayerProps<D> {\n  dashJustified?: boolean;\n  getDashArray?: [number, number] | ((d: D) => [number, number] | null);\n  getZLevel?: (d: D, index: number) => number;\n}\n\nconst defaultProps: PathOutlineLayerProps<any> = {\n  getZLevel: () => 0,\n};\n\nexport default class PathOutlineLayer<\n  D,\n  P extends PathOutlineLayerProps<D> = PathOutlineLayerProps<D>\n> extends PathLayer<D, P> {\n  static layerName = 'PathOutlineLayer';\n  static defaultProps = defaultProps;\n\n  // Override getShaders to inject the outline module\n  getShaders() {\n    const shaders = super.getShaders();\n    return Object.assign({}, shaders, {\n      modules: shaders.modules.concat([outline]),\n      vs: injectShaderCode({ source: shaders.vs, code: VS_CODE }),\n      fs: injectShaderCode({ source: shaders.fs, code: FS_CODE }),\n    });\n  }\n\n  initializeState(context: any) {\n    super.initializeState(context);\n\n    // Create an outline \"shadow\" map\n    // TODO - we should create a single outlineMap for all layers\n    this.setState({\n      outlineFramebuffer: new Framebuffer(context.gl),\n      dummyTexture: new Texture2D(context.gl),\n    });\n\n    // Create an attribute manager\n    this.state.attributeManager.addInstanced({\n      instanceZLevel: {\n        size: 1,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getZLevel',\n      },\n    });\n  }\n\n  // Override draw to add render module\n  draw({ moduleParameters = {}, parameters, uniforms, context }) {\n    // Need to calculate same uniforms as base layer\n    const {\n      jointRounded,\n      capRounded,\n      billboard,\n      miterLimit,\n      widthUnits,\n      widthScale,\n      widthMinPixels,\n      widthMaxPixels,\n    } = this.props;\n\n    uniforms = Object.assign({}, uniforms, {\n      jointType: Number(jointRounded),\n      capType: Number(capRounded),\n      billboard,\n      widthUnits: UNIT[widthUnits],\n      widthScale,\n      miterLimit,\n      widthMinPixels,\n      widthMaxPixels,\n    });\n\n    // Render the outline shadowmap (based on segment z orders)\n    const { outlineFramebuffer, dummyTexture } = this.state;\n    outlineFramebuffer.resize();\n    outlineFramebuffer.clear({ color: true, depth: true });\n\n    this.state.model.updateModuleSettings({\n      outlineEnabled: true,\n      outlineRenderShadowmap: true,\n      outlineShadowmap: dummyTexture,\n    });\n\n    this.state.model.draw({\n      uniforms: Object.assign({}, uniforms, {\n        jointType: 0,\n        widthScale: this.props.widthScale * 1.3,\n      }),\n      parameters: {\n        depthTest: false,\n        // Biggest value needs to go into buffer\n        blendEquation: GL.MAX,\n      },\n      framebuffer: outlineFramebuffer,\n    });\n\n    // Now use the outline shadowmap to render the lines (with outlines)\n    this.state.model.updateModuleSettings({\n      outlineEnabled: true,\n      outlineRenderShadowmap: false,\n      outlineShadowmap: outlineFramebuffer,\n    });\n    this.state.model.draw({\n      uniforms: Object.assign({}, uniforms, {\n        jointType: Number(jointRounded),\n        capType: Number(capRounded),\n        widthScale: this.props.widthScale,\n      }),\n      parameters: {\n        depthTest: false,\n      },\n    });\n  }\n}\n", "import { Geometry } from '@luma.gl/core';\n\nexport default class Arrow2DGeometry extends Geometry {\n  constructor(opts = {}) {\n    super(\n      Object.assign({}, opts, {\n        attributes: getArrowAttributes(opts),\n      })\n    );\n  }\n}\n\nfunction getArrowAttributes({ length = 1, headSize = 0.2, tailWidth = 0.05, tailStart = 0.05 }) {\n  const texCoords = [\n    // HEAD\n    0.5,\n    1.0,\n    0,\n    0.5 - headSize / 2,\n    1.0 - headSize,\n    0,\n    0.5 + headSize / 2,\n    1.0 - headSize,\n    0,\n    0.5 - tailWidth / 2,\n    tailStart,\n    0,\n    0.5 + tailWidth / 2,\n    1.0 - headSize,\n    0,\n    0.5 + tailWidth / 2,\n    tailStart,\n    0,\n    0.5 - tailWidth / 2,\n    tailStart,\n    0,\n    0.5 - tailWidth / 2,\n    1.0 - headSize,\n    0,\n    0.5 + tailWidth / 2,\n    1.0 - headSize,\n    0,\n  ];\n\n  const normals = [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1];\n\n  // Center and scale\n  const positions = new Array(texCoords.length);\n  for (let i = 0; i < texCoords.length / 3; i++) {\n    const i3 = i * 3;\n    positions[i3 + 0] = (texCoords[i3 + 0] - 0.5) * length;\n    positions[i3 + 1] = (texCoords[i3 + 1] - 0.5) * length;\n    positions[i3 + 2] = 0;\n  }\n  return {\n    positions: new Float32Array(positions),\n    normals: new Float32Array(normals),\n    texCoords: new Float32Array(texCoords),\n  };\n}\n", "export * from '@math.gl/core';\n", "import { Vector2 } from 'math.gl';\n\nfunction getLineLength(vPoints) {\n  // calculate total length\n  let lineLength = 0;\n  for (let i = 0; i < vPoints.length - 1; i++) {\n    lineLength += vPoints[i].distance(vPoints[i + 1]);\n  }\n  return lineLength;\n}\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst DEFAULT_DIRECTION = { forward: true, backward: false };\n\nexport default function createPathMarkers({\n  data,\n  getPath = (x) => x.path,\n  getDirection = (x) => x.direction,\n  getColor = (x) => DEFAULT_COLOR,\n  getMarkerPercentages = (x, info) => [0.5],\n  projectFlat,\n}) {\n  const markers = [];\n\n  for (const object of data) {\n    const path = getPath(object);\n    const direction = getDirection(object) || DEFAULT_DIRECTION;\n    const color = getColor(object);\n\n    const vPoints = path.map((p) => new Vector2(p));\n    const vPointsReverse = vPoints.slice(0).reverse();\n\n    // calculate total length\n    const lineLength = getLineLength(vPoints);\n\n    // Ask for where to put markers\n    // @ts-ignore\n    const percentages = getMarkerPercentages(object, { lineLength });\n\n    // Create the markers\n    for (const percentage of percentages) {\n      if (direction.forward) {\n        const marker = createMarkerAlongPath({\n          path: vPoints,\n          percentage,\n          lineLength,\n          color,\n          object,\n          projectFlat,\n        });\n        markers.push(marker);\n      }\n\n      if (direction.backward) {\n        const marker = createMarkerAlongPath({\n          path: vPointsReverse,\n          percentage,\n          lineLength,\n          color,\n          object,\n          projectFlat,\n        });\n        markers.push(marker);\n      }\n    }\n  }\n\n  return markers;\n}\n\nfunction createMarkerAlongPath({ path, percentage, lineLength, color, object, projectFlat }) {\n  const distanceAlong = lineLength * percentage;\n  let currentDistance = 0;\n  let previousDistance = 0;\n  let i = 0;\n  for (i = 0; i < path.length - 1; i++) {\n    currentDistance += path[i].distance(path[i + 1]);\n    if (currentDistance > distanceAlong) {\n      break;\n    }\n    previousDistance = currentDistance;\n  }\n\n  // If reached the end of the loop without exiting early,\n  // undo the final increment to avoid a null-pointer exception\n  if (i === path.length - 1) {\n    i -= 1;\n  }\n\n  const vDirection = path[i + 1].clone().subtract(path[i]).normalize();\n  const along = distanceAlong - previousDistance;\n  const vCenter = vDirection.clone().multiply(new Vector2(along, along)).add(path[i]);\n\n  const vDirection2 = new Vector2(projectFlat(path[i + 1])).subtract(projectFlat(path[i]));\n\n  const angle = (vDirection2.verticalAngle() * 180) / Math.PI;\n\n  return { position: [vCenter.x, vCenter.y, 0], angle, color, object };\n}\n", "import { Vector3, clamp } from 'math.gl';\n\n// Return the closest point on a line segment\nexport function getClosestPointOnLine({ p, p1, p2, clampToLine = true }) {\n  const lineVector = new Vector3(p2).subtract(p1);\n  const pointVector = new Vector3(p).subtract(p1);\n  let dotProduct = lineVector.dot(pointVector);\n  if (clampToLine) {\n    dotProduct = clamp(dotProduct, 0, 1);\n  }\n  // @ts-ignore\n  return lineVector.lerp(dotProduct);\n}\n\n// Return the closest point on a line segment\nexport function getClosestPointOnPolyline({ p, points }) {\n  p = new Vector3(p);\n  let pClosest = null;\n  let distanceSquared = Infinity;\n  let index = -1;\n  for (let i = 0; i < points.length - 1; ++i) {\n    const p1 = points[i];\n    const p2 = points[i + 1];\n    const pClosestOnLine = getClosestPointOnLine({ p, p1, p2 });\n    const distanceToLineSquared = p.distanceSquared(pClosestOnLine);\n    if (distanceToLineSquared < distanceSquared) {\n      distanceSquared = distanceToLineSquared;\n      pClosest = pClosestOnLine;\n      index = i;\n    }\n  }\n  return {\n    point: pClosest,\n    index,\n    p1: points[index],\n    p2: points[index + 1],\n    distanceSquared,\n    distance: Math.sqrt(distanceSquared),\n  };\n}\n", "import { CompositeLayer, COORDINATE_SYSTEM } from '@deck.gl/core';\nimport { ScatterplotLayer } from '@deck.gl/layers';\nimport { SimpleMeshLayer } from '@deck.gl/mesh-layers';\nimport PathOutlineLayer, { PathOutlineLayerProps } from '../path-outline-layer/path-outline-layer';\nimport Arrow2DGeometry from './arrow-2d-geometry';\n\nimport createPathMarkers from './create-path-markers';\nimport { getClosestPointOnPolyline } from './polyline';\n\nconst DISTANCE_FOR_MULTI_ARROWS = 0.1;\nconst ARROW_HEAD_SIZE = 0.2;\nconst ARROW_TAIL_WIDTH = 0.05;\n// const ARROW_CENTER_ADJUST = -0.8;\n\nconst DEFAULT_MARKER_LAYER = SimpleMeshLayer;\n\nexport interface PathMarkerLayerProps<D> extends PathOutlineLayerProps<D> {\n  getDirection?: (x) => any;\n  getMarkerColor?: (x) => number[];\n  getMarkerPercentages?: (x: any, info: any) => number[];\n  highlightPoint?: any;\n  highlightIndex?: number;\n  MarkerLayer?: any;\n  markerLayerProps?: any;\n  sizeScale?: number;\n  fp64?: boolean;\n  nebulaLayer?: any;\n}\n\nconst DEFAULT_MARKER_LAYER_PROPS = {\n  mesh: new Arrow2DGeometry({ headSize: ARROW_HEAD_SIZE, tailWidth: ARROW_TAIL_WIDTH }),\n};\n\nconst defaultProps: PathMarkerLayerProps<any> = Object.assign({}, PathOutlineLayer.defaultProps, {\n  MarkerLayer: DEFAULT_MARKER_LAYER,\n  markerLayerProps: DEFAULT_MARKER_LAYER_PROPS,\n\n  sizeScale: 100,\n  fp64: false,\n\n  highlightIndex: -1,\n  highlightPoint: null,\n\n  getPath: (x) => x.path,\n  getColor: (x) => x.color,\n  getMarkerColor: (x) => [0, 0, 0, 255],\n  getDirection: (x) => x.direction,\n  getMarkerPercentages: (object, { lineLength }) =>\n    lineLength > DISTANCE_FOR_MULTI_ARROWS ? [0.25, 0.5, 0.75] : [0.5],\n});\n\nexport default class PathMarkerLayer extends CompositeLayer<any, PathMarkerLayerProps<any>> {\n  static layerName = 'PathMarkerLayer';\n  static defaultProps = defaultProps;\n\n  initializeState() {\n    this.state = {\n      markers: [],\n      mesh: new Arrow2DGeometry({ headSize: ARROW_HEAD_SIZE, tailWidth: ARROW_TAIL_WIDTH }),\n      closestPoint: null,\n    };\n  }\n  // @ts-ignore\n  projectFlat(xyz, viewport, coordinateSystem, coordinateOrigin) {\n    if (coordinateSystem === COORDINATE_SYSTEM.METER_OFFSETS) {\n      const [dx, dy] = viewport.metersToLngLatDelta(xyz);\n      const [x, y] = coordinateOrigin;\n      return viewport.projectFlat([x + dx, dy + y]);\n    } else if (coordinateSystem === COORDINATE_SYSTEM.LNGLAT_OFFSETS) {\n      const [dx, dy] = xyz;\n      const [x, y] = coordinateOrigin;\n      return viewport.projectFlat([x + dx, dy + y]);\n    }\n\n    return viewport.projectFlat(xyz);\n  }\n\n  updateState({ props, oldProps, changeFlags }) {\n    if (changeFlags.dataChanged || changeFlags.updateTriggersChanged) {\n      const {\n        data,\n        getPath,\n        getDirection,\n        getMarkerColor,\n        getMarkerPercentages,\n        coordinateSystem,\n        coordinateOrigin,\n      } = this.props;\n      // @ts-ignore\n      const { viewport } = this.context;\n      const projectFlat = (o) => this.projectFlat(o, viewport, coordinateSystem, coordinateOrigin);\n      this.state.markers = createPathMarkers({\n        data,\n        getPath,\n        getDirection,\n        getColor: getMarkerColor,\n        getMarkerPercentages,\n        projectFlat,\n      });\n      this._recalculateClosestPoint();\n    }\n    if (changeFlags.propsChanged) {\n      if (props.point !== oldProps.point) {\n        this._recalculateClosestPoint();\n      }\n    }\n  }\n\n  _recalculateClosestPoint() {\n    const { highlightPoint, highlightIndex } = this.props;\n    if (highlightPoint && highlightIndex >= 0) {\n      const object = this.props.data[highlightIndex];\n      const points = this.props.getPath(object);\n      const { point } = getClosestPointOnPolyline({ points, p: highlightPoint });\n      this.state.closestPoints = [\n        {\n          position: point,\n        },\n      ];\n    } else {\n      this.state.closestPoints = [];\n    }\n  }\n\n  getPickingInfo({ info }) {\n    return Object.assign(info, {\n      // override object with picked feature\n      object: (info.object && info.object.path) || info.object,\n    });\n  }\n\n  renderLayers() {\n    return [\n      new PathOutlineLayer(\n        this.props,\n        // @ts-ignore\n        this.getSubLayerProps({\n          id: 'paths',\n          // Note: data has to be passed explicitly like this to avoid being empty\n          data: this.props.data,\n        })\n      ),\n      new this.props.MarkerLayer(\n        this.getSubLayerProps(\n          Object.assign({}, this.props.markerLayerProps, {\n            id: 'markers',\n            data: this.state.markers,\n            getOrientation: (x) => [0, -x.angle, 0],\n            getColor: (x) => x.color,\n            sizeScale: this.props.sizeScale,\n            fp64: this.props.fp64,\n            pickable: false,\n            parameters: {\n              blend: false,\n              depthTest: false,\n            },\n          })\n        )\n      ),\n      this.state.closestPoints &&\n        new ScatterplotLayer({\n          id: `${this.props.id}-highlight`,\n          data: this.state.closestPoints,\n          // @ts-ignore\n          fp64: this.props.fp64,\n        }),\n    ];\n  }\n}\n", "import { CompositeLayer, RGBAColor } from '@deck.gl/core';\nimport { ScatterplotLayer } from '@deck.gl/layers';\nimport { CompositeLayerProps } from '@deck.gl/core/lib/composite-layer';\n\ninterface JunctionScatterplotLayerProps extends CompositeLayerProps<any> {\n  getFillColor?: RGBAColor | ((d) => RGBAColor);\n  getStrokeColor?: RGBAColor | ((d) => RGBAColor);\n  getInnerRadius?: number | ((d) => number);\n}\n\nexport default class JunctionScatterplotLayer extends CompositeLayer<\n  any,\n  JunctionScatterplotLayerProps\n> {\n  static layerName = 'JunctionScatterplotLayer';\n  static defaultProps: JunctionScatterplotLayerProps = {\n    ...ScatterplotLayer.defaultProps,\n    getFillColor: (d) => [0, 0, 0, 255],\n    getStrokeColor: (d) => [255, 255, 255, 255],\n    getInnerRadius: (d) => 1,\n  };\n\n  renderLayers() {\n    const { id, getFillColor, getStrokeColor, getInnerRadius, updateTriggers } = this.props;\n\n    // data needs to be passed explicitly after deck.gl 5.3\n    return [\n      // the full circles\n      new ScatterplotLayer({\n        ...this.props,\n        id: `${id}-full`,\n        data: this.props.data,\n        getLineColor: getStrokeColor,\n        updateTriggers: {\n          ...updateTriggers,\n          getStrokeColor: updateTriggers.getStrokeColor,\n        },\n      }), // the inner part\n      new ScatterplotLayer({\n        ...this.props,\n        id: `${id}-inner`,\n        data: this.props.data,\n        getFillColor,\n        getRadius: getInnerRadius,\n        pickable: false,\n        updateTriggers: {\n          ...updateTriggers,\n          getFillColor: updateTriggers.getFillColor,\n          getRadius: updateTriggers.getInnerRadius,\n        },\n      }),\n    ];\n  }\n}\n", "export { ArrowStyles, DEFAULT_ARROWS, MAX_ARROWS } from './style';\n\n// Layers\nexport { default as EditableGeoJsonLayer } from './layers/editable-geojson-layer';\nexport { default as EditableH3ClusterLayer } from './layers/editable-h3-cluster-layer';\nexport { default as SelectionLayer } from './layers/selection-layer';\nexport { default as ElevatedEditHandleLayer } from './layers/elevated-edit-handle-layer';\n\n// Layers moved from deck.gl\nexport { default as PathOutlineLayer } from './layers/path-outline-layer/path-outline-layer';\nexport { default as PathMarkerLayer } from './layers/path-marker-layer/path-marker-layer';\nexport { default as JunctionScatterplotLayer } from './layers/junction-scatterplot-layer';\n\n// Utils\nexport { toDeckColor } from './utils';\n\n// Types\nexport type { Color, Viewport } from './types';\n"],
  "mappings": "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",
  "names": ["ArrowStyles", "NONE", "FORWARD", "BACKWARD", "BOTH", "DEFAULT_ARROWS", "MAX_ARROWS", "PROJECTED_PIXEL_SIZE_MULTIPLIER", "UNIT", "common", "meters", "pixels", "EVENT_TYPES", "EditableLayer", "event", "setState", "_editableLayerState", "pointerDownPicks", "pointerDownScreenCoords", "pointerDownMapCoords", "eventHandler", "_forwardEventToCurrentLayer", "bind", "_addEventHandlers", "_removeEventHandlers", "eventManager", "context", "deck", "state", "eventType", "on", "priority", "off", "currentLayer", "getCurrentLayer", "func", "type", "console", "warn", "srcEvent", "screenCoords", "getScreenCoords", "mapCoords", "getMapCoords", "picks", "getPicks", "onLayerClick", "sourceEvent", "onLayerKeyUp", "onStartDragging", "cancelPan", "stopImmediatePropagation", "onDragging", "onStopDragging", "onPointerMove", "pickMultipleObjects", "x", "y", "layerIds", "props", "id", "radius", "pickingRadius", "depth", "pickingDepth", "pointerEvent", "clientX", "gl", "canvas", "getBoundingClientRect", "left", "clientY", "top", "viewport", "unproject", "CompositeLayer", "toDeckColor", "color", "defaultColor", "Array", "isArray", "recursivelyTraverseNestedArrays", "array", "prefix", "fn", "i", "length", "generatePointsParallelToLinePoints", "p1", "p2", "groundCoords", "lineString", "type", "coordinates", "pt", "ddistance", "lineBearing", "isPointToLeftOfLine", "orthogonalBearing", "p3", "p4", "geometry", "distance2d", "x1", "y1", "x2", "y2", "dx", "dy", "Math", "sqrt", "mix", "a", "b", "ratio", "nearestPointOnProjectedLine", "line", "inPoint", "viewport", "wmViewport", "WebMercatorViewport", "projectedCoords", "map", "x", "y", "z", "project", "minDistance", "Infinity", "minPointInfo", "forEach", "index", "A", "B", "C", "div", "distance", "abs", "x0", "y0", "z1", "z2", "lineLength", "startToPointLength", "z0", "unproject", "properties", "dist", "insertBefore", "base", "toInsert", "at", "indexOf", "slice", "defaultProps", "PathLayer", "pickingLineWidthExtraPixels", "type", "min", "value", "Number", "MAX_SAFE_INTEGER", "EditablePathLayer", "shaders", "vs", "inject", "concat", "props", "uniforms", "layerName", "DEFAULT_LINE_COLOR", "DEFAULT_FILL_COLOR", "DEFAULT_SELECTED_LINE_COLOR", "DEFAULT_SELECTED_FILL_COLOR", "DEFAULT_TENTATIVE_LINE_COLOR", "DEFAULT_TENTATIVE_FILL_COLOR", "DEFAULT_EDITING_EXISTING_POINT_COLOR", "DEFAULT_EDITING_INTERMEDIATE_POINT_COLOR", "DEFAULT_EDITING_SNAP_POINT_COLOR", "DEFAULT_EDITING_POINT_OUTLINE_COLOR", "DEFAULT_EDITING_EXISTING_POINT_RADIUS", "DEFAULT_EDITING_INTERMEDIATE_POINT_RADIUS", "DEFAULT_EDITING_SNAP_POINT_RADIUS", "DEFAULT_TOOLTIP_FONT_SIZE", "PROJECTED_PIXEL_SIZE_MULTIPLIER", "DEFAULT_EDIT_MODE", "DrawPolygonMode", "guideAccessor", "accessor", "guideMaybeWrapped", "unwrapGuide", "__source", "object", "sourceFeature", "feature", "getEditHandleColor", "handle", "properties", "editHandleType", "getEditHandleOutlineColor", "getEditHandleRadius", "defaultProps", "mode", "onEdit", "pickable", "pickingRadius", "pickingDepth", "fp64", "filled", "stroked", "lineWidthScale", "lineWidthMinPixels", "lineWidthMaxPixels", "Number", "MAX_SAFE_INTEGER", "pickingLineWidthExtraPixels", "lineWidthUnits", "lineJointRounded", "lineCapRounded", "lineMiterLimit", "pointRadiusScale", "pointRadiusMinPixels", "pointRadiusMaxPixels", "getLineColor", "isSelected", "getFillColor", "getRadius", "f", "radius", "size", "getLineWidth", "lineWidth", "getTentativeLineColor", "getTentativeFillColor", "getTentativeLineWidth", "editHandlePointRadiusScale", "editHandlePointOutline", "editHandlePointStrokeWidth", "editHandlePointRadiusUnits", "editHandlePointRadiusMinPixels", "editHandlePointRadiusMaxPixels", "getEditHandlePointColor", "getEditHandlePointOutlineColor", "getEditHandlePointRadius", "editHandleIconAtlas", "editHandleIconMapping", "editHandleIconSizeScale", "editHandleIconSizeUnits", "getEditHandleIcon", "getEditHandleIconSize", "getEditHandleIconColor", "getEditHandleIconAngle", "billboard", "modeNameMapping", "view", "ViewMode", "modify", "ModifyMode", "translate", "SnappableMode", "TranslateMode", "transform", "TransformMode", "scale", "ScaleMode", "rotate", "RotateMode", "duplicate", "DuplicateMode", "split", "SplitPolygonMode", "extrude", "ExtrudeMode", "elevation", "ElevationMode", "drawPoint", "DrawPointMode", "drawLineString", "DrawLineStringMode", "drawPolygon", "drawRectangle", "DrawRectangleMode", "drawSquare", "DrawSquareMode", "drawRectangleFromCenter", "DrawRectangleFromCenterMode", "drawSquareFromCenter", "DrawSquareFromCenterMode", "drawCircleFromCenter", "DrawCircleFromCenterMode", "drawCircleByBoundingBox", "DrawCircleByDiameterMode", "drawEllipseByBoundingBox", "DrawEllipseByBoundingBoxMode", "drawRectangleUsing3Points", "DrawRectangleUsingThreePointsMode", "drawEllipseUsing3Points", "DrawEllipseUsingThreePointsMode", "draw90DegreePolygon", "Draw90DegreePolygonMode", "drawPolygonByDragging", "DrawPolygonByDraggingMode", "EditableGeoJsonLayer", "subLayerProps", "getSubLayerProps", "id", "data", "props", "selectionAwareAccessor", "getPointRadius", "_subLayerProps", "linestrings", "updateTriggers", "all", "selectedFeatureIndexes", "type", "EditablePathLayer", "layers", "GeoJsonLayer", "concat", "createGuidesLayers", "createTooltipsLayers", "setState", "selectedFeatures", "editHandles", "opts", "changeFlags", "stateChanged", "oldProps", "context", "propsOrDataChanged", "modePropChanged", "Object", "keys", "length", "ModeConstructor", "console", "warn", "String", "state", "cursor", "Array", "isArray", "map", "elem", "features", "modeConfig", "selectedIndexes", "lastPointerMoveEvent", "editAction", "setNeedsUpdate", "onUpdateCursor", "isFeatureSelected", "featureIndex", "indexOf", "includes", "info", "sourceLayer", "endsWith", "isGuide", "getSubLayers", "layer", "updateAutoHighlight", "getActiveMode", "guides", "getGuides", "getModeProps", "autoHighlight", "IconLayer", "iconAtlas", "iconMapping", "sizeUnits", "sizeScale", "getIcon", "getSize", "getColor", "getAngle", "ScatterplotLayer", "radiusScale", "radiusUnits", "radiusMinPixels", "radiusMaxPixels", "pointType", "tooltips", "getTooltips", "TextLayer", "event", "handleClick", "handleKeyUp", "handleStartDragging", "handleDragging", "handleStopDragging", "handlePointerMove", "isDragging", "undefined", "EditableLayer", "WGS84ToPseudoMercator", "coord", "mercator", "lngLatToWorld", "HALF_EARTH_CIRCUMFERENCE", "init_esm", "Math", "PI", "defaultProps", "WMSLayer", "init_esm", "id", "data", "serviceType", "srs", "layers", "type", "compare", "value", "onMetadataLoad", "onMetadataLoadError", "console", "error", "onImageLoadStart", "onImageLoad", "onImageLoadError", "requestId", "CompositeLayer", "isLoaded", "Boolean", "state", "loadCounter", "shouldUpdateState", "initializeState", "_nextRequestId", "lastRequestId", "updateState", "changeFlags", "props", "oldProps", "viewport", "context", "dataChanged", "imageSource", "_createImageSource", "_loadMetadata", "debounce", "loadImage", "deepEqual", "viewportChanged", "finalizeState", "renderLayers", "bounds", "image", "lastRequestParameters", "BitmapLayer", "getSubLayerProps", "_imageCoordinateSystem", "COORDINATE_SYSTEM", "LNGLAT", "CARTESIAN", "getFeatureInfoText", "x", "y", "featureInfo", "query_layers", "info_format", "ImageSource", "createImageSource", "url", "loadOptions", "Error", "metadata", "getMetadata", "getCurrentLayer", "reason", "length", "getBounds", "width", "height", "getRequestId", "resolution", "requestParams", "bbox", "minX", "minY", "WGS84ToPseudoMercator", "maxX", "maxY", "getImage", "setState", "raiseError", "fn", "ms", "clearTimeout", "_timeoutId", "setTimeout", "defaultProps", "GreatCircleLayer", "init_esm", "getHeight", "type", "value", "greatCircle", "ArcLayer", "defaultProps", "GeoCellLayer", "init_esm", "PolygonLayer", "CompositeLayer", "indexToBounds", "renderLayers", "elevationScale", "extruded", "wireframe", "filled", "stroked", "lineWidthUnits", "lineWidthScale", "lineWidthMinPixels", "lineWidthMaxPixels", "lineJointRounded", "lineMiterLimit", "lineDashJustified", "getElevation", "getFillColor", "getLineColor", "getLineWidth", "props", "updateTriggers", "material", "transitions", "CellLayer", "getSubLayerClass", "getSubLayerProps", "id", "IJToST", "ij", "order", "offsets", "maxSize", "singleSTtoUV", "st", "STToUV", "FaceUVToXYZ", "face", "u", "v", "Error", "XYZToLngLat", "x", "y", "z", "lat", "Math", "atan2", "sqrt", "lng", "RADIAN_TO_DEGREE", "toHilbertQuadkey", "idS", "bin", "Long", "fromString", "toString", "length", "FACE_BITS", "POS_BITS", "lsbIndex", "lastIndexOf", "faceB", "substring", "posB", "levelN", "faceS", "posS", "rotateAndFlipQuadrant", "n", "point", "rx", "ry", "FromHilbertQuadKey", "hilbertQuadkey", "parts", "split", "parseInt", "position", "maxLevel", "level", "i", "bit", "val", "pow", "t", "MAX_LEVEL", "PI", "getIdFromToken", "token", "paddedToken", "padEnd", "Long", "fromString", "getGeoBounds", "face", "ij", "level", "offsets", "resolution", "Math", "max", "ceil", "MAX_RESOLUTION", "pow", "result", "Float64Array", "ptIndex", "prevLng", "i", "offset", "slice", "nextOffset", "stepI", "stepJ", "j", "st", "IJToST", "uv", "STToUV", "xyz", "FaceUVToXYZ", "lngLat", "XYZToLngLat", "abs", "deltaLng", "getS2QuadKey", "indexOf", "toHilbertQuadkey", "toString", "getS2Polygon", "key", "s2cell", "FromHilbertQuadKey", "import_long", "defaultProps", "S2Layer", "getS2Token", "type", "value", "d", "token", "GeoCellLayer", "indexToBounds", "data", "props", "_normalize", "positionFormat", "getPolygon", "x", "objectInfo", "getS2Polygon", "quadkeyToWorldBounds", "quadkey", "x", "y", "mask", "length", "scale", "TILE_SIZE", "i", "q", "parseInt", "getQuadkeyPolygon", "topLeft", "bottomRight", "w", "n", "worldToLngLat", "e", "s", "init_esm", "defaultProps", "QuadkeyLayer", "getQuadkey", "type", "value", "d", "quadkey", "GeoCellLayer", "indexToBounds", "data", "props", "_normalize", "positionFormat", "getPolygon", "x", "objectInfo", "getQuadkeyPolygon", "Tile2DHeader", "constructor", "index", "isVisible", "isSelected", "parent", "children", "content", "_loader", "undefined", "_abortController", "_loaderId", "_isLoaded", "_isCancelled", "_needsReload", "bbox", "_bbox", "value", "boundingBox", "west", "south", "east", "north", "left", "top", "right", "bottom", "data", "isLoading", "then", "isLoaded", "Boolean", "needsReload", "byteLength", "result", "Number", "isFinite", "console", "error", "_loadData", "getData", "requestScheduler", "onLoad", "onError", "id", "userData", "zoom", "loaderId", "AbortController", "signal", "requestToken", "scheduleRequest", "tile", "done", "tileData", "err", "loadData", "opts", "setNeedsReload", "abort", "getOSMTileIndices", "viewport", "maxZ", "zRange", "bounds", "project", "_GlobeViewport", "resolution", "projectPosition", "planes", "Object", "values", "getFrustumPlanes", "map", "normal", "distance", "Plane", "clone", "negate", "cullingVolume", "CullingVolume", "unitsPerMeter", "distanceScales", "elevationMin", "elevationMax", "minZ", "WebMercatorViewport", "pitch", "minLng", "minLat", "maxLng", "maxLat", "topLeft", "lngLatToWorld", "bottomRight", "TILE_SIZE", "root", "OSMNode", "traversalParams", "elevationBounds", "offset", "update", "subViewports", "length", "MAX_MAPS", "getSelected", "REF_POINTS_5", "REF_POINTS_9", "REF_POINTS_11", "init_esm", "init_utils", "concat", "constructor", "x", "y", "z", "children", "_children", "params", "boundingVolume", "getBoundingVolume", "insideBounds", "isInside", "computeVisibility", "childVisible", "distanceTo", "cameraPosition", "scale", "height", "Math", "floor", "log2", "selected", "child", "result", "push", "node", "minX", "minY", "maxX", "maxY", "pow", "extent", "worldOffset", "refPoints", "refPointPositions", "p", "lngLat", "osmTile2lngLat", "makeOrientedBoundingBoxFromPoints", "originX", "originY", "AxisAlignedBoundingBox", "transformBox", "bbox", "modelMatrix", "transformedCoords", "transformAsPoint", "transformedBox", "Math", "min", "map", "i", "max", "stringHash", "s", "abs", "split", "reduce", "a", "b", "charCodeAt", "getURLFromTemplate", "template", "tile", "length", "index", "id", "Array", "isArray", "url", "key", "Object", "keys", "regex", "RegExp", "replace", "String", "Number", "isInteger", "y", "z", "pow", "getBoundingBox", "viewport", "zRange", "extent", "bounds", "minZ", "maxZ", "bounds0", "getBounds", "bounds1", "isGeospatial", "getCullBounds", "cullRect", "subViewports", "v", "getCullBoundsInViewport", "x", "width", "height", "unprojectOption", "targetZ", "topLeft", "unproject", "topRight", "bottomLeft", "bottomRight", "getIndexingCoords", "scale", "modelMatrixInverse", "transformedTileIndex", "TILE_SIZE", "getScale", "tileSize", "osmTile2lngLat", "lng", "n", "PI", "lat", "atan", "exp", "tile2XY", "tileToBoundingBox", "west", "north", "east", "south", "left", "top", "right", "bottom", "getIdentityTileIndices", "minX", "minY", "maxX", "maxY", "indices", "floor", "push", "getTileIndices", "maxZoom", "minZoom", "zoomOffset", "round", "zoom", "log2", "ceil", "isFinite", "transformedExtent", "getOSMTileIndices", "DEFAULT_EXTENT", "isURLTemplate", "test", "isGeoBoundingBox", "urlType", "init_utils", "Infinity", "type", "value", "validate", "propType", "optional", "every", "equal", "value1", "value2", "len", "memoize", "compute", "cachedArgs", "cachedResult", "args", "key", "isEqual", "a", "b", "Array", "isArray", "len", "length", "i", "updateTileStateDefault", "allTiles", "tile", "state", "isSelected", "getPlaceholderInAncestors", "getPlaceholderInChildren", "isVisible", "Boolean", "TILE_STATE_VISIBLE", "updateTileStateReplace", "sortedTiles", "Array", "from", "sort", "t1", "t2", "zoom", "children", "TILE_STATE_VISITED", "child", "startTile", "isLoaded", "content", "parent", "STRATEGY_NEVER", "STRATEGY_REPLACE", "STRATEGY_DEFAULT", "DEFAULT_CACHE_SCALE", "STRATEGIES", "DEFAULT_TILESET2D_PROPS", "Tileset2D", "init_esm", "init_utils", "extent", "tileSize", "maxZoom", "minZoom", "maxCacheSize", "maxCacheByteSize", "refinementStrategy", "zRange", "maxRequests", "zoomOffset", "onTileLoad", "onTileUnload", "onTileError", "constructor", "opts", "memoize", "getCullBounds", "_cacheByteSize", "byteLength", "_resizeCache", "_requestScheduler", "RequestScheduler", "throttleRequests", "_cache", "Map", "_tiles", "_dirty", "_viewport", "_selectedTiles", "_frameNumber", "_modelMatrix", "Matrix4", "_modelMatrixInverse", "setOptions", "tiles", "selectedTiles", "every", "needsReload", "some", "Object", "assign", "Number", "isFinite", "_maxZoom", "Math", "floor", "_minZoom", "ceil", "finalize", "values", "isLoading", "abort", "clear", "reloadAll", "id", "keys", "get", "includes", "delete", "setNeedsReload", "update", "viewport", "modelMatrix", "modelMatrixAsMatrix4", "isModelMatrixNew", "equals", "_zRange", "clone", "invert", "tileIndices", "getTileIndices", "modelMatrixInverse", "map", "index", "_getTile", "_rebuildTree", "changed", "updateTileStates", "_pruneRequests", "isTileVisible", "cullRect", "boundsArr", "_getCullBounds", "z", "bbox", "minX", "minY", "maxX", "maxY", "overlaps", "west", "east", "south", "north", "y0", "min", "top", "bottom", "y1", "max", "left", "right", "getTileId", "x", "y", "getTileZoom", "getTileMetadata", "tileToBoundingBox", "getParentIndex", "visibilities", "size", "i", "abortCandidates", "ongoingRequestCount", "push", "length", "shift", "_getNearestAncestor", "Infinity", "overflown", "create", "Tile2DHeader", "set", "loadData", "getData", "getTileData", "requestScheduler", "onLoad", "onError", "init_tileset_2d", "init_utils", "defaultProps", "TileLayer", "init_esm", "init_tileset_2d", "TilesetClass", "Tileset2D", "data", "type", "value", "dataComparator", "urlType", "equal", "renderSubLayers", "props", "GeoJsonLayer", "getTileData", "optional", "onViewportLoad", "onTileLoad", "tile", "onTileUnload", "onTileError", "err", "console", "error", "extent", "compare", "tileSize", "maxZoom", "minZoom", "maxCacheSize", "maxCacheByteSize", "refinementStrategy", "STRATEGY_DEFAULT", "zRange", "maxRequests", "zoomOffset", "CompositeLayer", "initializeState", "state", "tileset", "isLoaded", "finalizeState", "finalize", "selectedTiles", "every", "layers", "layer", "shouldUpdateState", "changeFlags", "somethingChanged", "updateState", "propsChanged", "propsOrDataChanged", "updateTriggersChanged", "dataChanged", "all", "_getTilesetOptions", "setState", "setOptions", "reloadAll", "tiles", "forEach", "_updateTileset", "bind", "_onTileLoad", "_onTileError", "_onTileUnload", "modelMatrix", "frameNumber", "update", "context", "viewport", "loadingStateChanged", "tilesetChanged", "_onViewportLoad", "setNeedsUpdate", "fetch", "signal", "url", "Array", "isArray", "getURLFromTemplate", "propName", "getSubLayerPropsByTile", "getPickingInfo", "info", "sourceLayer", "sourceTile", "picked", "_updateAutoHighlight", "updateAutoHighlight", "renderLayers", "map", "subLayerProps", "content", "id", "_offset", "flatten", "Boolean", "clone", "Object", "keys", "some", "filterSubLayer", "cullRect", "isTileVisible", "defaultProps", "TripsLayer", "init_esm", "fadeTrail", "trailLength", "type", "value", "min", "currentTime", "getTimestamps", "d", "timestamps", "PathLayer", "getShaders", "shaders", "inject", "initializeState", "attributeManager", "getAttributeManager", "addInstanced", "size", "accessor", "shaderAttributes", "instanceTimestamps", "vertexOffset", "instanceNextTimestamps", "draw", "params", "props", "uniforms", "normalizeLongitudes", "vertices", "refLng", "undefined", "pt", "deltaLng", "scalePolygon", "hexId", "factor", "lat", "lng", "h3ToGeo", "actualCount", "length", "vertexCount", "i", "lerp", "getHexagonCentroid", "getHexagon", "object", "objectInfo", "hexagonId", "h3ToPolygon", "coverage", "h3ToGeoBoundary", "flattenPolygon", "positions", "Float64Array", "mergeTriggers", "trigger", "UPDATE_THRESHOLD_KM", "defaultProps", "H3HexagonLayer", "init_esm", "PolygonLayer", "highPrecision", "type", "min", "max", "value", "centerHexagon", "x", "hexagon", "extruded", "CompositeLayer", "initializeState", "_checkH3Lib", "state", "edgeLengthKM", "resolution", "shouldUpdateState", "changeFlags", "_shouldUseHighPrecision", "propsOrDataChanged", "somethingChanged", "updateState", "props", "dataChanged", "updateTriggersChanged", "dataProps", "_calculateH3DataProps", "setState", "_updateVertices", "context", "viewport", "hasPentagon", "hasMultipleRes", "iterable", "createIterable", "data", "index", "hexResolution", "h3GetResolution", "h3IsPentagon", "edgeLength", "Boolean", "centerHex", "hex", "geoToH3", "latitude", "longitude", "distance", "h3Distance", "unitsPerMeter", "distanceScales", "centerLat", "centerLng", "centerX", "centerY", "projectFlat", "map", "p", "worldPosition", "renderLayers", "_renderPolygonLayer", "_renderColumnLayer", "_getForwardProps", "elevationScale", "material", "wireframe", "stroked", "filled", "lineWidthUnits", "lineWidthScale", "lineWidthMinPixels", "lineWidthMaxPixels", "getFillColor", "getElevation", "getLineColor", "getLineWidth", "transitions", "updateTriggers", "SubLayerClass", "getSubLayerClass", "forwardProps", "getPolygon", "getSubLayerProps", "id", "_normalize", "_windingOrder", "positionFormat", "ColumnLayer", "getPosition", "flatShading", "diskResolution", "radius", "bind", "defaultProps", "H3ClusterLayer", "init_esm", "getHexagons", "type", "value", "d", "hexagons", "GeoCellLayer", "initializeState", "H3HexagonLayer", "_checkH3Lib", "updateState", "props", "changeFlags", "dataChanged", "updateTriggersChanged", "data", "polygons", "iterable", "objectInfo", "createIterable", "object", "index", "multiPolygon", "h3SetToMultiPolygon", "polygon", "push", "getSubLayerRow", "setState", "indexToBounds", "getElevation", "getFillColor", "getLineColor", "getLineWidth", "state", "getPolygon", "getSubLayerAccessor", "calculateTransformMatrix", "targetMatrix", "orientation", "scale", "pitch", "RADIAN_PER_DEGREE", "yaw", "roll", "sr", "Math", "sin", "sp", "sw", "cr", "cos", "cp", "cw", "scx", "scy", "scz", "getExtendedMat3FromMat4", "mat4", "subarray", "shouldComposeModelMatrix", "viewport", "coordinateSystem", "COORDINATE_SYSTEM", "CARTESIAN", "METER_OFFSETS", "DEFAULT", "isGeospatial", "modelMatrix", "valueArray", "MATRIX_ATTRIBUTES", "init_esm", "PI", "Float32Array", "size", "accessor", "shaderAttributes", "instanceModelMatrix__LOCATION_0", "elementOffset", "instanceModelMatrix__LOCATION_1", "instanceModelMatrix__LOCATION_2", "instanceTranslation", "update", "attribute", "startRow", "endRow", "data", "getOrientation", "getScale", "getTranslation", "getTransformMatrix", "props", "arrayMatrix", "Array", "isArray", "constantMatrix", "length", "constantScale", "constantOrientation", "constantTranslation", "hasMatrix", "Boolean", "constant", "instanceModelMatrixData", "value", "matrix", "set", "i", "iterable", "objectInfo", "createIterable", "object", "index", "validateGeometryAttributes", "attributes", "useMeshColors", "hasColorAttribute", "COLOR_0", "colors", "useColorAttribute", "constant", "value", "Float32Array", "log", "assert", "positions", "POSITION", "getGeometry", "data", "Geometry", "Error", "DEFAULT_COLOR", "defaultProps", "SimpleMeshLayer", "init_esm", "mesh", "type", "async", "texture", "sizeScale", "min", "_useMeshColors", "_instanced", "wireframe", "material", "getPosition", "x", "position", "getColor", "getOrientation", "getScale", "getTranslation", "getTransformMatrix", "textureParameters", "ignore", "Layer", "getShaders", "transpileToGLSL100", "isWebGL2", "context", "gl", "defines", "hasFeature", "FEATURES", "GLSL_DERIVATIVES", "DERIVATIVES_AVAILABLE", "vs", "fs", "modules", "project32", "phongLighting", "picking", "getBounds", "props", "result", "state", "positionBounds", "header", "boundingBox", "getMeshBoundingBox", "initializeState", "attributeManager", "getAttributeManager", "addInstanced", "instancePositions", "transition", "fp64", "use64bitPositions", "size", "accessor", "instanceColors", "colorFormat", "length", "normalized", "defaultValue", "instanceModelMatrix", "MATRIX_ATTRIBUTES", "setState", "emptyTexture", "Texture2D", "Uint8Array", "width", "height", "updateState", "params", "oldProps", "changeFlags", "extensionsChanged", "model", "delete", "getModel", "hasNormals", "Boolean", "NORMAL", "normals", "invalidateAll", "setTexture", "setDrawMode", "finalizeState", "draw", "uniforms", "viewport", "coordinateSystem", "setUniforms", "composeModelMatrix", "shouldComposeModelMatrix", "flatShading", "Model", "id", "geometry", "isInstanced", "sampler", "hasTexture", "waitForGLTFAssets", "gltfObjects", "remaining", "scenes", "forEach", "scene", "traverse", "model", "Object", "values", "getUniforms", "uniform", "loaded", "push", "waitWhileCondition", "some", "condition", "Promise", "resolve", "requestAnimationFrame", "DEFAULT_COLOR", "defaultProps", "ScenegraphLayer", "init_esm", "scenegraph", "type", "value", "async", "getScene", "gltf", "scenes", "scene", "getAnimator", "animator", "_animations", "sizeScale", "min", "sizeMinPixels", "sizeMaxPixels", "Number", "MAX_SAFE_INTEGER", "getPosition", "x", "position", "getColor", "_lighting", "_imageBasedLightingEnvironment", "getOrientation", "getScale", "getTranslation", "getTransformMatrix", "loaders", "GLTFLoader", "Layer", "getShaders", "modules", "project32", "picking", "props", "push", "pbr", "vs", "fs", "initializeState", "attributeManager", "getAttributeManager", "addInstanced", "instancePositions", "size", "fp64", "use64bitPositions", "accessor", "transition", "instanceColors", "colorFormat", "length", "normalized", "defaultValue", "instanceModelMatrix", "MATRIX_ATTRIBUTES", "updateState", "params", "oldProps", "_updateScenegraph", "_applyAnimationsProp", "state", "finalizeState", "context", "_deleteScenegraph", "gl", "scenegraphData", "ScenegraphNode", "gltfObjects", "createGLTFObjects", "_getModelOptions", "waitForGLTFAssets", "then", "setNeedsRedraw", "log", "deprecated", "options", "layer", "_applyAllAttributes", "setState", "warn", "attributesAvailable", "allAttributes", "getAttributes", "traverse", "model", "_setModelAttributes", "animationsProp", "animations", "getAnimations", "Object", "keys", "sort", "forEach", "key", "animation", "assign", "isFinite", "number", "findResult", "find", "name", "delete", "env", "waitForFullLoad", "imageBasedLightingEnvironment", "modelOptions", "isInstanced", "transpileToGLSL100", "isWebGL2", "useTangents", "updateAttributes", "changedAttributes", "draw", "moduleParameters", "parameters", "animate", "timeline", "getTime", "viewport", "opacity", "coordinateSystem", "numInstances", "getNumInstances", "worldMatrix", "setInstanceCount", "updateModuleSettings", "uniforms", "composeModelMatrix", "shouldComposeModelMatrix", "sceneModelMatrix", "u_Camera", "getUniforms", "project_uCameraPosition", "esm_exports", "init_esm", "validateGeometryAttributes", "attributes", "hasColorAttribute", "COLOR_0", "colors", "constant", "value", "Float32Array", "defaultProps", "MeshLayer", "init_esm", "pbrMaterial", "type", "featureIds", "optional", "SimpleMeshLayer", "getShaders", "shaders", "modules", "push", "pbr", "vs", "fs", "initializeState", "props", "attributeManager", "getAttributeManager", "add", "featureIdsPickingColors", "size", "noAlloc", "update", "calculateFeatureIdsPickingColors", "updateState", "params", "oldProps", "updatePbrMaterialUniforms", "draw", "opts", "state", "model", "setUniforms", "u_Camera", "getUniforms", "project_uCameraPosition", "pickFeatureIds", "Boolean", "getModel", "mesh", "id", "materialParser", "parseMaterial", "setState", "Model", "context", "gl", "geometry", "defines", "HAS_UV_REGIONS", "uvRegions", "parameters", "isInstanced", "uniforms", "unlit", "pbrMetallicRoughness", "baseColorTexture", "delete", "GLTFMaterialParser", "NORMAL", "normals", "TEXCOORD_0", "texCoords", "material", "pbrDebug", "imageBasedLightingEnvironment", "lights", "useTangents", "attribute", "Uint8ClampedArray", "length", "pickingColor", "index", "encodePickingColor", "finalizeState", "getMeshGeometry", "contentAttributes", "attributes", "positions", "value", "Float32Array", "normals", "texCoords", "colors", "uvRegions", "SINGLE_DATA", "defaultProps", "Tile3DLayer", "init_esm", "getPointColor", "type", "pointSize", "data", "loader", "Tiles3DLoader", "onTilesetLoad", "tileset3d", "onTileLoad", "tileHeader", "onTileUnload", "onTileError", "tile", "message", "url", "_getMeshColor", "CompositeLayer", "initializeState", "props", "log", "removed", "state", "layerMap", "activeViewports", "lastUpdatedViewports", "isLoaded", "shouldUpdateState", "changeFlags", "somethingChanged", "updateState", "oldProps", "_loadTileset", "viewportChanged", "viewportsNumber", "Object", "keys", "length", "_updateTileset", "propsChanged", "key", "needsUpdate", "activateViewport", "viewport", "internalState", "id", "lastViewport", "equals", "setChangeFlags", "setNeedsUpdate", "getPickingInfo", "info", "sourceLayer", "sourceTile", "picked", "object", "filterSubLayer", "layer", "viewportId", "selected", "viewportIds", "includes", "_updateAutoHighlight", "layerCache", "updateAutoHighlight", "tilesetUrl", "loadOptions", "loaders", "Array", "isArray", "options", "preload", "preloadOptions", "headers", "fetch", "assign", "tilesetJson", "load", "Tileset3D", "_onTileLoad", "bind", "_onTileUnload", "setState", "viewports", "timeline", "context", "selectTiles", "values", "then", "frameNumber", "tilesetChanged", "_getSubLayer", "oldLayer", "content", "TILE_TYPE", "POINTCLOUD", "_makePointCloudLayer", "SCENEGRAPH", "_make3DModelLayer", "MESH", "_makeSimpleMeshLayer", "Error", "pointCount", "constantRGBA", "cartographicOrigin", "modelMatrix", "header", "vertexCount", "POSITION", "NORMAL", "COLOR_0", "SubLayerClass", "getSubLayerClass", "PointCloudLayer", "getSubLayerProps", "coordinateSystem", "COORDINATE_SYSTEM", "METER_OFFSETS", "coordinateOrigin", "getColor", "_offset", "gltf", "instances", "ScenegraphLayer", "_lighting", "scenegraph", "getTransformMatrix", "instance", "getPosition", "indices", "material", "featureIds", "geometry", "mesh", "Geometry", "drawMode", "MeshLayer", "pbrMaterial", "renderLayers", "tiles", "map", "filter", "Boolean", "urlTemplateToUpdateTrigger", "template", "Array", "isArray", "join", "DUMMY_DATA", "defaultProps", "TerrainLayer", "init_esm", "init_tileset_2d", "TileLayer", "elevationData", "urlType", "texture", "optional", "meshMaxError", "type", "value", "bounds", "compare", "color", "elevationDecoder", "rScaler", "gScaler", "bScaler", "offset", "workerUrl", "wireframe", "material", "loaders", "TerrainWorkerLoader", "CompositeLayer", "updateState", "props", "oldProps", "elevationDataChanged", "isTiled", "includes", "setState", "shouldReload", "state", "terrain", "loadTerrain", "log", "removed", "signal", "loadOptions", "getLoadOptions", "skirtHeight", "fetch", "propName", "layer", "getTiledTerrainData", "tile", "viewport", "context", "dataUrl", "getURLFromTemplate", "textureUrl", "bottomLeft", "topRight", "isGeospatial", "bbox", "projectFlat", "west", "south", "east", "north", "left", "bottom", "right", "top", "surface", "catch", "_", "Promise", "resolve", "all", "renderSubLayers", "SubLayerClass", "getSubLayerClass", "SimpleMeshLayer", "data", "mesh", "_instanced", "coordinateSystem", "COORDINATE_SYSTEM", "CARTESIAN", "getPosition", "d", "getColor", "onViewportLoad", "tiles", "zRange", "ranges", "map", "content", "filter", "Boolean", "arr", "header", "boundingBox", "bound", "length", "minZ", "Math", "min", "x", "maxZ", "max", "renderLayers", "tileSize", "maxZoom", "minZoom", "extent", "maxRequests", "onTileLoad", "onTileUnload", "onTileError", "maxCacheSize", "maxCacheByteSize", "refinementStrategy", "getSubLayerProps", "id", "getTileData", "bind", "updateTriggers", "vs", "fs", "TARGET", "inject", "init_esm", "source", "target", "custom", "source_target", "name", "dependencies", "project", "getUniforms", "opts", "brushingEnabled", "brushingRadius", "brushingTarget", "mousePosition", "viewport", "brushing_enabled", "Boolean", "containsPixel", "brushing_radius", "brushing_target", "brushing_mousePos", "unproject", "x", "y", "defaultProps", "BrushingExtension", "init_esm", "getBrushingTarget", "type", "value", "brushingTarget", "brushingEnabled", "brushingRadius", "LayerExtension", "getShaders", "modules", "shaderModule", "initializeState", "context", "extension", "attributeManager", "getAttributeManager", "add", "brushingTargets", "size", "accessor", "shaderAttributes", "divisor", "instanceBrushingTargets", "state", "onMouseMove", "getCurrentLayer", "setNeedsRedraw", "deck", "eventManager", "on", "pointermove", "pointerleave", "finalizeState", "off", "getUniforms", "opts", "filterRange", "filterEnabled", "filterTransformSize", "filterTransformColor", "filterSoftRange", "Number", "isFinite", "filter_min", "filter_softMin", "filter_softMax", "filter_max", "map", "r", "filter_enabled", "filter_useSoftMargin", "Boolean", "filter_transformSize", "filter_transformColor", "getUniforms64", "uniforms", "min64High", "Math", "fround", "filter_min64High", "max64High", "filter_max64High", "x", "i", "vs", "fs", "inject", "shaderModule", "shaderModule64", "init_shader_module", "name", "supportsFloatTarget", "gl", "Boolean", "getExtension", "getFramebuffer", "useFloatTarget", "Framebuffer", "width", "height", "attachments", "Texture2D", "format", "isWebGL2", "type", "mipmaps", "depth", "getModel", "shaderOptions", "defines", "NON_INSTANCED_MODEL", "FLOAT_TARGET", "Model", "id", "vertexCount", "isInstanced", "drawMode", "vs", "AGGREGATE_VS", "fs", "AGGREGATE_FS", "parameters", "init_esm", "blend", "blendFunc", "blendEquation", "depthTest", "defaultProps", "DATA_TYPE_FROM_SIZE", "DataFilterExtension", "init_esm", "init_shader_module", "getFilterValue", "type", "value", "onFilteredItemsChange", "optional", "filterEnabled", "filterRange", "filterSoftRange", "filterTransformSize", "filterTransformColor", "LayerExtension", "constructor", "filterSize", "fp64", "countItems", "Error", "getShaders", "extension", "opts", "modules", "shaderModule64", "shaderModule", "defines", "DATAFILTER_TYPE", "DATAFILTER_DOUBLE", "Boolean", "initializeState", "context", "attributeManager", "getAttributeManager", "add", "filterValues", "size", "accessor", "shaderAttributes", "divisor", "instanceFilterValues", "gl", "useFloatTarget", "supportsFloatTarget", "filterIndices", "vertexOffset", "normalized", "object", "index", "i", "__source", "Math", "floor", "filterPrevIndices", "filterFBO", "getFramebuffer", "filterModel", "getModel", "call", "setState", "updateState", "props", "oldProps", "state", "filterNeedsUpdate", "attributes", "needsUpdate", "draw", "params", "setVertexCount", "getNumInstances", "clear", "framebuffer", "color", "updateModuleSettings", "moduleParameters", "setAttributes", "getShaderAttributes", "parameters", "viewport", "width", "height", "readPixelsToArray", "count", "length", "id", "finalizeState", "delete", "getUniforms", "opts", "viewProjectionMatrix", "scale", "viewport", "getMemoizedUniforms", "calculateUniforms", "glViewProjectionMatrixFP64", "fp64ifyMatrix4", "scaleFP64", "fp64ify", "project_uViewProjectionMatrixFP64", "project64_uViewProjectionMatrix", "project64_uScale", "init_esm", "fp64", "name", "dependencies", "project", "vs", "project64Shader", "memoize", "Fp64Extension", "init_esm", "LayerExtension", "getShaders", "coordinateSystem", "props", "COORDINATE_SYSTEM", "LNGLAT", "DEFAULT", "Error", "modules", "project64", "dashShaders", "offsetShaders", "inject", "defaultProps", "PathStyleExtension", "init_esm", "getDashArray", "type", "value", "getOffset", "dashJustified", "dashGapPickable", "LayerExtension", "constructor", "dash", "offset", "highPrecisionDash", "isEnabled", "layer", "state", "getShaders", "extension", "result", "opts", "mergeShaders", "dashShaders", "offsetShaders", "initializeState", "context", "attributeManager", "getAttributeManager", "addInstanced", "instanceDashArrays", "size", "accessor", "instanceDashOffsets", "transform", "getDashOffsets", "bind", "instanceOffsets", "updateState", "params", "uniforms", "dashAlignMode", "props", "Boolean", "model", "setUniforms", "path", "positionSize", "positionFormat", "isNested", "Array", "isArray", "geometrySize", "length", "p", "prevP", "i", "slice", "projectPosition", "dist", "getPatternUniforms", "opts", "uniforms", "fillPatternTexture", "fill_patternTexture", "fill_patternTextureSize", "width", "height", "fillPatternMask", "fillPatternEnabled", "project_uCommonOrigin", "coordinateOriginCommon", "coordinateOriginCommon64Low", "fp64LowPart", "fill_uvCoordinateOrigin", "slice", "fill_uvCoordinateOrigin64Low", "fill_patternMask", "fill_patternEnabled", "patternVs", "patternFs", "inject", "patternShaders", "init_shaders_glsl", "init_esm", "name", "vs", "fs", "dependencies", "project", "getUniforms", "defaultProps", "FillStyleExtension", "init_esm", "init_shaders_glsl", "fillPatternEnabled", "fillPatternAtlas", "type", "value", "async", "parameters", "fillPatternMapping", "fillPatternMask", "getFillPattern", "d", "pattern", "getFillPatternScale", "getFillPatternOffset", "LayerExtension", "constructor", "isEnabled", "layer", "getAttributeManager", "state", "getShaders", "extension", "modules", "opts", "patternShaders", "filter", "Boolean", "initializeState", "context", "attributeManager", "add", "fillPatternFrames", "size", "accessor", "transform", "getPatternFrame", "bind", "shaderAttributes", "divisor", "instanceFillPatternFrames", "fillPatternScales", "defaultValue", "instanceFillPatternScales", "fillPatternOffsets", "instanceFillPatternOffsets", "setState", "emptyTexture", "Texture2D", "gl", "data", "Uint8Array", "width", "height", "updateState", "props", "oldProps", "invalidate", "draw", "params", "setModuleParameters", "fillPatternTexture", "finalizeState", "delete", "name", "getCurrentLayer", "def", "x", "y", "defaultProps", "shaderFunction", "shaderModuleVs", "injectionVs", "shaderModuleFs", "injectionFs", "ClipExtension", "init_esm", "clipBounds", "clipByInstance", "undefined", "name", "vs", "fs", "LayerExtension", "getShaders", "getAttributeManager", "attributes", "props", "Boolean", "state", "modules", "inject", "draw", "uniforms", "clip_bounds", "corner0", "projectPosition", "corner1", "Math", "min", "max", "vs", "inject", "getCollisionUniforms", "shader_module_default", "init_shader_module", "init_esm", "opts", "uniforms", "collisionFBO", "drawToCollisionMap", "dummyCollisionMap", "collision_sort", "Boolean", "collision_texture", "name", "dependencies", "project", "getUniforms", "CollisionFilterPass", "init_esm", "LayersPass", "renderCollisionMap", "target", "options", "gl", "padding", "withParameters", "scissorTest", "scissor", "width", "height", "clearColor", "blend", "depthTest", "depthRange", "render", "pass", "getModuleParameters", "drawToCollisionMap", "pickingActive", "pickingAttribute", "lightSources", "MaskPass", "init_esm", "LayersPass", "constructor", "gl", "props", "mapSize", "maskMap", "Texture2D", "width", "height", "parameters", "fbo", "Framebuffer", "id", "attachments", "render", "options", "colorMask", "channel", "withParameters", "clearColor", "blend", "blendFunc", "blendEquation", "depthTest", "target", "pass", "shouldDrawLayer", "layer", "operation", "includes", "delete", "joinLayerBounds", "layers", "viewport", "bounds", "Infinity", "layer", "layerBounds", "getBounds", "bottomLeftCommon", "projectPosition", "autoOffset", "topRightCommon", "Math", "min", "max", "Number", "isFinite", "makeViewport", "opts", "border", "isGeospatial", "centerWorld", "unprojectPosition", "width", "height", "zoom", "undefined", "scale", "log2", "round", "abs", "maxSize", "MAX_VIEWPORT_SIZE", "r", "WebMercatorViewport", "id", "x", "y", "longitude", "latitude", "orthographic", "OrthographicViewport", "target", "flipY", "getViewportBounds", "zRange", "viewportBoundsWorld", "length", "minZ", "maxZ", "bounds0", "z", "bounds1", "viewportBottomLeftCommon", "slice", "viewportTopRightCommon", "getRenderBounds", "viewportBounds", "paddedBounds", "doubleBounds", "dx", "dy", "centerX", "centerY", "init_esm", "MaskEffect", "init_esm", "preRender", "gl", "layers", "layerFilter", "viewports", "onViewportActive", "views", "isPicking", "didRender", "dummyMaskMap", "Texture2D", "width", "height", "maskLayers", "filter", "l", "props", "visible", "operation", "includes", "length", "masks", "channels", "maskPass", "MaskPass", "id", "maskMap", "channelMap", "_sortMaskChannels", "viewport", "viewportChanged", "lastViewport", "equals", "resolution", "undefined", "log", "warn", "maskId", "result", "_renderChannel", "channelInfo", "oldChannelInfo", "index", "maskChanged", "some", "layer", "i", "transitions", "layerBounds", "b", "bounds", "maskBounds", "joinLayerBounds", "getRenderBounds", "maskViewport", "makeViewport", "border", "getBounds", "render", "pass", "channel", "moduleParameters", "devicePixelRatio", "coordinateOrigin", "coordinateSystem", "channelCount", "root", "findIndex", "c", "push", "getModuleParameters", "maskChannels", "cleanup", "delete", "DOWNSCALE", "CollisionFilterEffect", "init_esm", "preRender", "gl", "effects", "allEffects", "layers", "layerFilter", "viewports", "onViewportActive", "views", "isPicking", "preRenderStats", "dummyCollisionMap", "Texture2D", "width", "height", "collisionLayers", "filter", "props", "visible", "collisionEnabled", "length", "channels", "collisionFilterPass", "CollisionFilterPass", "id", "e", "constructor", "MaskEffect", "maskEffectRendered", "didRender", "_groupByCollisionGroup", "viewport", "viewportChanged", "lastViewport", "equals", "collisionGroup", "collisionFBO", "collisionFBOs", "renderInfo", "resize", "canvas", "_render", "oldRenderInfo", "needsRender", "deepEqual", "layerBounds", "some", "b", "i", "allLayersLoaded", "layer", "transitions", "renderCollisionMap", "pass", "moduleParameters", "devicePixelRatio", "cssToDeviceRatio", "channelMap", "channelInfo", "push", "getBounds", "isLoaded", "Object", "keys", "createFBO", "destroyFBO", "getModuleParameters", "cleanup", "delete", "undefined", "collisionMap", "parameters", "depthBuffer", "Renderbuffer", "format", "Framebuffer", "attachments", "fbo", "attachment", "values", "defaultProps", "CollisionFilterExtension", "init_esm", "init_shader_module", "getCollisionPriority", "type", "value", "collisionEnabled", "collisionGroup", "collisionTestProps", "LayerExtension", "getShaders", "modules", "collision", "draw", "uniforms", "context", "moduleParameters", "props", "collisionFBO", "drawToCollisionMap", "enabled", "Boolean", "collision_enabled", "clone", "initializeState", "extension", "getAttributeManager", "deck", "_addDefaultEffect", "CollisionFilterEffect", "attributeManager", "add", "collisionPriorities", "size", "accessor", "shaderAttributes", "divisor", "instanceCollisionPriorities", "getNeedsPickingBuffer", "vs", "fs", "inject", "getMaskUniforms", "shader_module_default", "init_shader_module", "init_esm", "opts", "mask_texture", "maskMap", "name", "dependencies", "project", "getUniforms", "defaultProps", "MaskExtension", "init_esm", "init_shader_module", "maskId", "maskByInstance", "undefined", "maskInverted", "LayerExtension", "initializeState", "context", "deck", "_addDefaultEffect", "MaskEffect", "getShaders", "getAttributeManager", "attributes", "props", "Boolean", "state", "modules", "mask", "draw", "uniforms", "moduleParameters", "mask_maskByInstance", "maskChannels", "viewport", "index", "bounds", "coordinateOrigin", "fromCoordinateOrigin", "coordinateSystem", "fromCoordinateSystem", "mask_enabled", "mask_channel", "mask_inverted", "COORDINATE_SYSTEM", "DEFAULT", "isGeospatial", "LNGLAT", "CARTESIAN", "opts", "modelMatrix", "bl", "projectPosition", "tr", "mask_bounds", "log", "warn", "TERRAIN_MODE", "TERRAIN_MODE_CONSTANTS", "terrainModule", "init_shader_module", "init_esm", "NONE", "WRITE_HEIGHT_MAP", "USE_HEIGHT_MAP", "USE_COVER", "USE_COVER_ONLY", "SKIP", "Object", "keys", "map", "key", "join", "name", "dependencies", "project", "inject", "getUniforms", "opts", "uniforms", "drawToTerrainHeightMap", "heightMap", "heightMapBounds", "dummyHeightMap", "terrainCover", "useTerrainHeightMap", "terrainSkipRender", "project_uCommonOrigin", "mode", "sampler", "bounds", "isPicking", "pickingActive", "getPickingFramebuffer", "getRenderFramebuffer", "terrain_mode", "terrain_map", "terrain_bounds", "createRenderTarget", "gl", "opts", "Framebuffer", "id", "attachments", "Texture2D", "float", "format", "isWebGL2", "type", "mipmaps", "parameters", "init_utils", "init_esm", "getIntersectingLayers", "sourceTile", "layers", "filter", "layer", "tile", "getTile", "intersect", "boundingBox", "props", "parent", "b1", "b2", "TerrainCover", "init_utils", "constructor", "targetLayer", "id", "isActive", "Boolean", "getCurrentLayer", "shouldUpdate", "viewport", "layerNeedsRedraw", "sizeChanged", "_updateViewport", "layersChanged", "_updateLayers", "needsRedraw", "length", "i", "map", "shouldRedraw", "targetBounds", "bottomLeftCommon", "projectPosition", "topRightCommon", "targetBoundsCommon", "getBounds", "joinLayerBounds", "newZoom", "Math", "ceil", "zoom", "bounds", "oldZoom", "renderViewport", "newBounds", "getRenderBounds", "oldBounds", "some", "x", "makeViewport", "getRenderFramebuffer", "fbo", "createRenderTarget", "context", "gl", "getPickingFramebuffer", "pickable", "pickingFbo", "filterLayers", "includes", "delete", "texture", "TerrainPass", "init_esm", "LayersPass", "getRenderableLayers", "viewport", "opts", "layers", "result", "drawParamsByIndex", "_getDrawLayerParams", "i", "length", "layer", "isComposite", "shouldDrawLayer", "push", "renderHeightMap", "heightMap", "target", "getRenderFramebuffer", "renderViewport", "resize", "withParameters", "gl", "clearColor", "blend", "blendFunc", "blendEquation", "depthTest", "render", "pass", "viewports", "effects", "renderTerrainCover", "terrainCover", "filterLayers", "id", "TerrainPickingPass", "init_esm", "PickLayersPass", "getRenderableLayers", "viewport", "opts", "layers", "result", "drawParameters", "_resetColorEncoder", "pickZ", "drawParamsByIndex", "_getDrawLayerParams", "i", "length", "layer", "isComposite", "shouldDrawLayer", "push", "id", "layerParameters", "renderTerrainCover", "terrainCover", "target", "getPickingFramebuffer", "renderViewport", "filterLayers", "terrainLayer", "targetLayer", "props", "pickable", "unshift", "resize", "withParameters", "gl", "depthTest", "render", "pickingFBO", "pass", "effects", "viewports", "cullRect", "undefined", "deviceRect", "getLayerParameters", "layerIndex", "parameters", "blend", "MAP_MAX_SIZE", "HeightMapBuilder", "init_esm", "init_utils", "isSupported", "gl", "Framebuffer", "colorBufferFloat", "constructor", "getRenderFramebuffer", "renderViewport", "fbo", "createRenderTarget", "id", "float", "shouldUpdate", "layers", "viewport", "layersChanged", "length", "some", "layer", "i", "props", "transitions", "getBounds", "layersBounds", "map", "layersBoundsCommon", "joinLayerBounds", "viewportChanged", "lastViewport", "equals", "bounds", "getRenderBounds", "scale", "pixelWidth", "pixelHeight", "makeViewport", "center", "zoom", "width", "Math", "min", "height", "delete", "color", "TerrainEffect", "init_esm", "init_shader_module", "Map", "initialize", "gl", "dummyHeightMap", "Texture2D", "width", "height", "data", "Uint8Array", "terrainPass", "TerrainPass", "id", "terrainPickingPass", "TerrainPickingPass", "HeightMapBuilder", "isSupported", "heightMap", "log", "warn", "ProgramManager", "getDefaultProgramManager", "addDefaultModule", "terrainModule", "preRender", "opts", "layer", "layers", "props", "operation", "includes", "setChangeFlags", "extensionsChanged", "pickZ", "isDrapingEnabled", "viewports", "isPicking", "viewport", "getRenderableLayers", "terrainLayers", "filter", "l", "length", "offsetLayers", "state", "terrainDrawMode", "_updateHeightMap", "drapeLayers", "_updateTerrainCovers", "getModuleParameters", "getRenderFramebuffer", "heightMapBounds", "bounds", "terrainCover", "terrainCovers", "get", "useTerrainHeightMap", "terrainSkipRender", "cleanup", "delete", "undefined", "values", "clear", "shouldUpdate", "renderHeightMap", "moduleParameters", "devicePixelRatio", "drawToTerrainHeightMap", "layerNeedsRedraw", "terrainCoverNeedsRedraw", "isDirty", "_updateTerrainCover", "_pruneTerrainCovers", "terrainLayer", "renderPass", "TerrainCover", "set", "targetLayer", "renderTerrainCover", "err", "raiseError", "idsToRemove", "isActive", "push", "defaultProps", "TerrainExtension", "init_esm", "init_shader_module", "terrainDrawMode", "undefined", "LayerExtension", "getShaders", "modules", "terrainModule", "initializeState", "context", "deck", "_addDefaultEffect", "TerrainEffect", "updateState", "params", "props", "oldProps", "state", "extruded", "is3d", "attributes", "getAttributeManager", "hasAnchor", "setState", "onNeedsRedraw", "terrainCoverNeedsRedraw", "init_esm", "Point", "pointX", "pointY", "nw", "se", "viewport", "x", "lerp", "y", "unprojectFlat", "getPoints", "geometry", "bbox", "map", "g", "MultiPoint", "multiPoint", "LineString", "line", "MultiLineString", "multiLineString", "lineString", "Polygon", "polygon", "polygonRing", "MultiPolygon", "multiPolygon", "transform", "projectFlat", "west", "north", "east", "south", "projectedBbox", "coordinates", "availableTransformations", "type", "init_esm", "data", "uniqueIdProperty", "featureId", "layerName", "gt", "GEOM_TYPES", "index", "findIndexByType", "geomData", "featureIds", "value", "length", "startFeatureIndex", "endFeatureIndex", "layerRange", "getLayerRange", "featureIndex", "numericProps", "vertexIndex", "findIndex", "x", "i", "globalFeatureIds", "properties", "elem", "fields", "id", "getGlobalFeatureId", "__layers", "layerNames", "key", "__ids", "result", "array", "predicate", "startIndex", "endIndex", "getFeatureUniqueId", "feature", "uniqueIdProperty", "properties", "id", "undefined", "getFeatureLayerName", "layerName", "isFeatureIdDefined", "value", "transformTileCoordsToWGS84", "object", "bbox", "viewport", "geometry", "type", "Object", "defineProperty", "get", "wgs84Geom", "transform", "coordinates", "WORLD_SIZE", "defaultProps", "MVTLayer", "init_esm", "init_tileset_2d", "GeoJsonLayer", "data", "urlType", "onDataLoad", "optional", "compare", "highlightedFeatureId", "loaders", "MVTWorkerLoader", "binary", "TileLayer", "initializeState", "context", "resolution", "props", "setState", "tileJSON", "isLoaded", "state", "tileset", "updateState", "oldProps", "changeFlags", "dataChanged", "_updateTileData", "_setWGS84PropertyForTiles", "highlightColor", "Array", "isArray", "isURLTemplate", "fetch", "propName", "layer", "error", "raiseError", "tilejson", "tiles", "_getTilesetOptions", "opts", "minZoom", "maxZoom", "Number", "isFinite", "minzoom", "maxzoom", "renderLayers", "getTileData", "loadProps", "index", "signal", "url", "getURLFromTemplate", "Promise", "reject", "loadOptions", "getLoadOptions", "mimeType", "mvt", "tileIndex", "gis", "format", "renderSubLayers", "x", "y", "z", "tile", "worldScale", "Math", "pow", "xScale", "yScale", "xOffset", "yOffset", "modelMatrix", "Matrix4", "scale", "autoHighlight", "coordinateOrigin", "coordinateSystem", "COORDINATE_SYSTEM", "CARTESIAN", "extensions", "ClipExtension", "subLayers", "log", "warn", "_updateAutoHighlight", "info", "hoveredFeatureId", "hoveredFeatureLayerName", "hoveredFeature", "newHoveredFeatureId", "newHoveredFeatureLayerName", "getPickingInfo", "params", "isWGS84", "Boolean", "sourceLayer", "binaryToGeojson", "globalFeatureId", "getSubLayerPropsByTile", "highlightedObjectIndex", "getHighlightedObjectIndex", "content", "isHighlighted", "isFeatureIdPresent", "featureIdToHighlight", "findIndex", "isMatchingId", "isMatchingLayer", "findIndexBinary", "_pickObjects", "maxObjects", "deck", "width", "height", "layerIds", "pickObjects", "getRenderedFeatures", "maxFeatures", "features", "featureCache", "Set", "renderedFeatures", "f", "featureId", "push", "has", "add", "selectedTiles", "forEach", "hasOwnProperty", "length", "_contentWGS84", "isGeoBoundingBox", "map", "getGeohashBounds", "geohash", "isLon", "maxLat", "MAX_LAT", "minLat", "MIN_LAT", "maxLon", "MAX_LON", "minLon", "MIN_LON", "mid", "hashValue", "i", "l", "length", "code", "toLowerCase", "BASE32_CODES_DICT", "bits", "bit", "getGeohashPolygon", "s", "w", "n", "e", "BASE32_CODES", "charAt", "defaultProps", "GeohashLayer", "getGeohash", "type", "value", "d", "geohash", "GeoCellLayer", "indexToBounds", "data", "props", "_normalize", "positionFormat", "getPolygon", "x", "objectInfo", "getGeohashPolygon", "esm_exports", "init_esm", "init_tileset_2d", "DEFAULT_EDIT_MODE", "ViewMode", "DEFAULT_H3_RESOLUTION", "EMPTY_FEATURE_COLLECTION", "type", "features", "defaultProps", "mode", "EditableGeoJsonLayer", "data", "selectedIndexes", "filled", "stroked", "lineWidthScale", "PROJECTED_PIXEL_SIZE_MULTIPLIER", "lineWidthMinPixels", "lineWidthMaxPixels", "Number", "MAX_SAFE_INTEGER", "lineWidthUnits", "getHexagons", "d", "hexIds", "getEditedCluster", "updatedHexagons", "existingCluster", "resolution", "EditableH3ClusterLayer", "setState", "tentativeHexagonIDs", "coords", "props", "layers", "getSubLayerProps", "id", "selectedFeatureIndexes", "onEdit", "editAction", "editType", "editContext", "feature", "geometry", "coordinates", "hexIDs", "getDerivedHexagonIDs", "hexID", "getDerivedHexagonID", "updatedData", "modeConfig", "booleanOperation", "push", "state", "length", "console", "warn", "finalHexagonIDs", "committedHexagonIDs", "Set", "getSelectedHexIDs", "filter", "has", "selectedIndex", "H3ClusterLayer", "cumulativeHexIDs", "forEach", "index", "selectedCluster", "concat", "isDragging", "cursor", "EditableLayer", "SELECTION_TYPE", "NONE", "RECTANGLE", "POLYGON", "MODE_MAP", "_defineProperty", "DrawRectangleMode", "DrawPolygonMode", "MODE_CONFIG_MAP", "dragToDraw", "defaultProps", "selectionType", "layerIds", "onSelect", "EMPTY_DATA", "type", "features", "EXPANSION_KM", "LAYER_ID_GEOJSON", "LAYER_ID_BLOCKER", "PASS_THROUGH_PROPS", "SelectionLayer", "coordinates", "props", "context", "viewport", "project", "x1", "y1", "x2", "y2", "pickingInfos", "deck", "pickObjects", "x", "Math", "min", "y", "width", "abs", "height", "mousePoints", "map", "c", "allX", "mousePoint", "allY", "maxX", "max", "maxY", "landPointsPoly", "bigBuffer", "bigPolygon", "e", "console", "log", "setState", "pendingPolygonSelection", "blockerId", "id", "setTimeout", "filter", "item", "layer", "state", "mode", "ViewMode", "modeConfig", "inheritedProps", "forEach", "p", "undefined", "layers", "EditableGeoJsonLayer", "getSubLayerProps", "pickable", "selectedFeatureIndexes", "data", "onEdit", "updatedData", "editType", "geometry", "_selectRectangleObjects", "_selectPolygonObjects", "push", "PolygonLayer", "stroked", "opacity", "getLineColor", "obj", "getFillColor", "getPolygon", "o", "changeFlags", "stateChanged", "propsOrDataChanged", "CompositeLayer", "defaultProps", "ElevatedEditHandleLayer", "handles", "ScatterplotLayer", "Object", "assign", "props", "id", "data", "lines", "LineLayer", "pickable", "getSourcePosition", "position", "getTargetPosition", "getColor", "getStrokeWidth", "CompositeLayer", "esm_exports", "init_esm", "DEPTH_BUFFER_BIT", "STENCIL_BUFFER_BIT", "COLOR_BUFFER_BIT", "POINTS", "LINES", "LINE_LOOP", "LINE_STRIP", "TRIANGLES", "TRIANGLE_STRIP", "TRIANGLE_FAN", "ZERO", "ONE", "SRC_COLOR", "ONE_MINUS_SRC_COLOR", "SRC_ALPHA", "ONE_MINUS_SRC_ALPHA", "DST_ALPHA", "ONE_MINUS_DST_ALPHA", "DST_COLOR", "ONE_MINUS_DST_COLOR", "SRC_ALPHA_SATURATE", "CONSTANT_COLOR", "ONE_MINUS_CONSTANT_COLOR", "CONSTANT_ALPHA", "ONE_MINUS_CONSTANT_ALPHA", "FUNC_ADD", "FUNC_SUBTRACT", "FUNC_REVERSE_SUBTRACT", "BLEND_EQUATION", "BLEND_EQUATION_RGB", "BLEND_EQUATION_ALPHA", "BLEND_DST_RGB", "BLEND_SRC_RGB", "BLEND_DST_ALPHA", "BLEND_SRC_ALPHA", "BLEND_COLOR", "ARRAY_BUFFER_BINDING", "ELEMENT_ARRAY_BUFFER_BINDING", "LINE_WIDTH", "ALIASED_POINT_SIZE_RANGE", "ALIASED_LINE_WIDTH_RANGE", "CULL_FACE_MODE", "FRONT_FACE", "DEPTH_RANGE", "DEPTH_WRITEMASK", "DEPTH_CLEAR_VALUE", "DEPTH_FUNC", "STENCIL_CLEAR_VALUE", "STENCIL_FUNC", "STENCIL_FAIL", "STENCIL_PASS_DEPTH_FAIL", "STENCIL_PASS_DEPTH_PASS", "STENCIL_REF", "STENCIL_VALUE_MASK", "STENCIL_WRITEMASK", "STENCIL_BACK_FUNC", "STENCIL_BACK_FAIL", "STENCIL_BACK_PASS_DEPTH_FAIL", "STENCIL_BACK_PASS_DEPTH_PASS", "STENCIL_BACK_REF", "STENCIL_BACK_VALUE_MASK", "STENCIL_BACK_WRITEMASK", "VIEWPORT", "SCISSOR_BOX", "COLOR_CLEAR_VALUE", "COLOR_WRITEMASK", "UNPACK_ALIGNMENT", "PACK_ALIGNMENT", "MAX_TEXTURE_SIZE", "MAX_VIEWPORT_DIMS", "SUBPIXEL_BITS", "RED_BITS", "GREEN_BITS", "BLUE_BITS", "ALPHA_BITS", "DEPTH_BITS", "STENCIL_BITS", "POLYGON_OFFSET_UNITS", "POLYGON_OFFSET_FACTOR", "TEXTURE_BINDING_2D", "SAMPLE_BUFFERS", "SAMPLES", "SAMPLE_COVERAGE_VALUE", "SAMPLE_COVERAGE_INVERT", "COMPRESSED_TEXTURE_FORMATS", "VENDOR", "RENDERER", "VERSION", "IMPLEMENTATION_COLOR_READ_TYPE", "IMPLEMENTATION_COLOR_READ_FORMAT", "BROWSER_DEFAULT_WEBGL", "STATIC_DRAW", "STREAM_DRAW", "DYNAMIC_DRAW", "ARRAY_BUFFER", "ELEMENT_ARRAY_BUFFER", "BUFFER_SIZE", "BUFFER_USAGE", "CURRENT_VERTEX_ATTRIB", "VERTEX_ATTRIB_ARRAY_ENABLED", "VERTEX_ATTRIB_ARRAY_SIZE", "VERTEX_ATTRIB_ARRAY_STRIDE", "VERTEX_ATTRIB_ARRAY_TYPE", "VERTEX_ATTRIB_ARRAY_NORMALIZED", "VERTEX_ATTRIB_ARRAY_POINTER", "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING", "CULL_FACE", "FRONT", "BACK", "FRONT_AND_BACK", "BLEND", "DEPTH_TEST", "DITHER", "POLYGON_OFFSET_FILL", "SAMPLE_ALPHA_TO_COVERAGE", "SAMPLE_COVERAGE", "SCISSOR_TEST", "STENCIL_TEST", "NO_ERROR", "INVALID_ENUM", "INVALID_VALUE", "INVALID_OPERATION", "OUT_OF_MEMORY", "CONTEXT_LOST_WEBGL", "CW", "CCW", "DONT_CARE", "FASTEST", "NICEST", "GENERATE_MIPMAP_HINT", "BYTE", "UNSIGNED_BYTE", "SHORT", "UNSIGNED_SHORT", "INT", "UNSIGNED_INT", "FLOAT", "DOUBLE", "DEPTH_COMPONENT", "ALPHA", "RGB", "RGBA", "LUMINANCE", "LUMINANCE_ALPHA", "UNSIGNED_SHORT_4_4_4_4", "UNSIGNED_SHORT_5_5_5_1", "UNSIGNED_SHORT_5_6_5", "FRAGMENT_SHADER", "VERTEX_SHADER", "COMPILE_STATUS", "DELETE_STATUS", "LINK_STATUS", "VALIDATE_STATUS", "ATTACHED_SHADERS", "ACTIVE_ATTRIBUTES", "ACTIVE_UNIFORMS", "MAX_VERTEX_ATTRIBS", "MAX_VERTEX_UNIFORM_VECTORS", "MAX_VARYING_VECTORS", "MAX_COMBINED_TEXTURE_IMAGE_UNITS", "MAX_VERTEX_TEXTURE_IMAGE_UNITS", "MAX_TEXTURE_IMAGE_UNITS", "MAX_FRAGMENT_UNIFORM_VECTORS", "SHADER_TYPE", "SHADING_LANGUAGE_VERSION", "CURRENT_PROGRAM", "NEVER", "ALWAYS", "LESS", "EQUAL", "LEQUAL", "GREATER", "GEQUAL", "NOTEQUAL", "KEEP", "REPLACE", "INCR", "DECR", "INVERT", "INCR_WRAP", "DECR_WRAP", "NEAREST", "LINEAR", "NEAREST_MIPMAP_NEAREST", "LINEAR_MIPMAP_NEAREST", "NEAREST_MIPMAP_LINEAR", "LINEAR_MIPMAP_LINEAR", "TEXTURE_MAG_FILTER", "TEXTURE_MIN_FILTER", "TEXTURE_WRAP_S", "TEXTURE_WRAP_T", "TEXTURE_2D", "TEXTURE", "TEXTURE_CUBE_MAP", "TEXTURE_BINDING_CUBE_MAP", "TEXTURE_CUBE_MAP_POSITIVE_X", "TEXTURE_CUBE_MAP_NEGATIVE_X", "TEXTURE_CUBE_MAP_POSITIVE_Y", "TEXTURE_CUBE_MAP_NEGATIVE_Y", "TEXTURE_CUBE_MAP_POSITIVE_Z", "TEXTURE_CUBE_MAP_NEGATIVE_Z", "MAX_CUBE_MAP_TEXTURE_SIZE", "TEXTURE0", "ACTIVE_TEXTURE", "REPEAT", "CLAMP_TO_EDGE", "MIRRORED_REPEAT", "TEXTURE_WIDTH", "TEXTURE_HEIGHT", "FLOAT_VEC2", "FLOAT_VEC3", "FLOAT_VEC4", "INT_VEC2", "INT_VEC3", "INT_VEC4", "BOOL", "BOOL_VEC2", "BOOL_VEC3", "BOOL_VEC4", "FLOAT_MAT2", "FLOAT_MAT3", "FLOAT_MAT4", "SAMPLER_2D", "SAMPLER_CUBE", "LOW_FLOAT", "MEDIUM_FLOAT", "HIGH_FLOAT", "LOW_INT", "MEDIUM_INT", "HIGH_INT", "FRAMEBUFFER", "RENDERBUFFER", "RGBA4", "RGB5_A1", "RGB565", "DEPTH_COMPONENT16", "STENCIL_INDEX", "STENCIL_INDEX8", "DEPTH_STENCIL", "RENDERBUFFER_WIDTH", "RENDERBUFFER_HEIGHT", "RENDERBUFFER_INTERNAL_FORMAT", "RENDERBUFFER_RED_SIZE", "RENDERBUFFER_GREEN_SIZE", "RENDERBUFFER_BLUE_SIZE", "RENDERBUFFER_ALPHA_SIZE", "RENDERBUFFER_DEPTH_SIZE", "RENDERBUFFER_STENCIL_SIZE", "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE", "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME", "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL", "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE", "COLOR_ATTACHMENT0", "DEPTH_ATTACHMENT", "STENCIL_ATTACHMENT", "DEPTH_STENCIL_ATTACHMENT", "NONE", "FRAMEBUFFER_COMPLETE", "FRAMEBUFFER_INCOMPLETE_ATTACHMENT", "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT", "FRAMEBUFFER_INCOMPLETE_DIMENSIONS", "FRAMEBUFFER_UNSUPPORTED", "FRAMEBUFFER_BINDING", "RENDERBUFFER_BINDING", "READ_FRAMEBUFFER", "DRAW_FRAMEBUFFER", "MAX_RENDERBUFFER_SIZE", "INVALID_FRAMEBUFFER_OPERATION", "UNPACK_FLIP_Y_WEBGL", "UNPACK_PREMULTIPLY_ALPHA_WEBGL", "UNPACK_COLORSPACE_CONVERSION_WEBGL", "READ_BUFFER", "UNPACK_ROW_LENGTH", "UNPACK_SKIP_ROWS", "UNPACK_SKIP_PIXELS", "PACK_ROW_LENGTH", "PACK_SKIP_ROWS", "PACK_SKIP_PIXELS", "TEXTURE_BINDING_3D", "UNPACK_SKIP_IMAGES", "UNPACK_IMAGE_HEIGHT", "MAX_3D_TEXTURE_SIZE", "MAX_ELEMENTS_VERTICES", "MAX_ELEMENTS_INDICES", "MAX_TEXTURE_LOD_BIAS", "MAX_FRAGMENT_UNIFORM_COMPONENTS", "MAX_VERTEX_UNIFORM_COMPONENTS", "MAX_ARRAY_TEXTURE_LAYERS", "MIN_PROGRAM_TEXEL_OFFSET", "MAX_PROGRAM_TEXEL_OFFSET", "MAX_VARYING_COMPONENTS", "FRAGMENT_SHADER_DERIVATIVE_HINT", "RASTERIZER_DISCARD", "VERTEX_ARRAY_BINDING", "MAX_VERTEX_OUTPUT_COMPONENTS", "MAX_FRAGMENT_INPUT_COMPONENTS", "MAX_SERVER_WAIT_TIMEOUT", "MAX_ELEMENT_INDEX", "RED", "RGB8", "RGBA8", "RGB10_A2", "TEXTURE_3D", "TEXTURE_WRAP_R", "TEXTURE_MIN_LOD", "TEXTURE_MAX_LOD", "TEXTURE_BASE_LEVEL", "TEXTURE_MAX_LEVEL", "TEXTURE_COMPARE_MODE", "TEXTURE_COMPARE_FUNC", "SRGB", "SRGB8", "SRGB8_ALPHA8", "COMPARE_REF_TO_TEXTURE", "RGBA32F", "RGB32F", "RGBA16F", "RGB16F", "TEXTURE_2D_ARRAY", "TEXTURE_BINDING_2D_ARRAY", "R11F_G11F_B10F", "RGB9_E5", "RGBA32UI", "RGB32UI", "RGBA16UI", "RGB16UI", "RGBA8UI", "RGB8UI", "RGBA32I", "RGB32I", "RGBA16I", "RGB16I", "RGBA8I", "RGB8I", "RED_INTEGER", "RGB_INTEGER", "RGBA_INTEGER", "R8", "RG8", "R16F", "R32F", "RG16F", "RG32F", "R8I", "R8UI", "R16I", "R16UI", "R32I", "R32UI", "RG8I", "RG8UI", "RG16I", "RG16UI", "RG32I", "RG32UI", "R8_SNORM", "RG8_SNORM", "RGB8_SNORM", "RGBA8_SNORM", "RGB10_A2UI", "TEXTURE_IMMUTABLE_FORMAT", "TEXTURE_IMMUTABLE_LEVELS", "UNSIGNED_INT_2_10_10_10_REV", "UNSIGNED_INT_10F_11F_11F_REV", "UNSIGNED_INT_5_9_9_9_REV", "FLOAT_32_UNSIGNED_INT_24_8_REV", "UNSIGNED_INT_24_8", "HALF_FLOAT", "RG", "RG_INTEGER", "INT_2_10_10_10_REV", "CURRENT_QUERY", "QUERY_RESULT", "QUERY_RESULT_AVAILABLE", "ANY_SAMPLES_PASSED", "ANY_SAMPLES_PASSED_CONSERVATIVE", "MAX_DRAW_BUFFERS", "DRAW_BUFFER0", "DRAW_BUFFER1", "DRAW_BUFFER2", "DRAW_BUFFER3", "DRAW_BUFFER4", "DRAW_BUFFER5", "DRAW_BUFFER6", "DRAW_BUFFER7", "DRAW_BUFFER8", "DRAW_BUFFER9", "DRAW_BUFFER10", "DRAW_BUFFER11", "DRAW_BUFFER12", "DRAW_BUFFER13", "DRAW_BUFFER14", "DRAW_BUFFER15", "MAX_COLOR_ATTACHMENTS", "COLOR_ATTACHMENT1", "COLOR_ATTACHMENT2", "COLOR_ATTACHMENT3", "COLOR_ATTACHMENT4", "COLOR_ATTACHMENT5", "COLOR_ATTACHMENT6", "COLOR_ATTACHMENT7", "COLOR_ATTACHMENT8", "COLOR_ATTACHMENT9", "COLOR_ATTACHMENT10", "COLOR_ATTACHMENT11", "COLOR_ATTACHMENT12", "COLOR_ATTACHMENT13", "COLOR_ATTACHMENT14", "COLOR_ATTACHMENT15", "SAMPLER_3D", "SAMPLER_2D_SHADOW", "SAMPLER_2D_ARRAY", "SAMPLER_2D_ARRAY_SHADOW", "SAMPLER_CUBE_SHADOW", "INT_SAMPLER_2D", "INT_SAMPLER_3D", "INT_SAMPLER_CUBE", "INT_SAMPLER_2D_ARRAY", "UNSIGNED_INT_SAMPLER_2D", "UNSIGNED_INT_SAMPLER_3D", "UNSIGNED_INT_SAMPLER_CUBE", "UNSIGNED_INT_SAMPLER_2D_ARRAY", "MAX_SAMPLES", "SAMPLER_BINDING", "PIXEL_PACK_BUFFER", "PIXEL_UNPACK_BUFFER", "PIXEL_PACK_BUFFER_BINDING", "PIXEL_UNPACK_BUFFER_BINDING", "COPY_READ_BUFFER", "COPY_WRITE_BUFFER", "COPY_READ_BUFFER_BINDING", "COPY_WRITE_BUFFER_BINDING", "FLOAT_MAT2x3", "FLOAT_MAT2x4", "FLOAT_MAT3x2", "FLOAT_MAT3x4", "FLOAT_MAT4x2", "FLOAT_MAT4x3", "UNSIGNED_INT_VEC2", "UNSIGNED_INT_VEC3", "UNSIGNED_INT_VEC4", "UNSIGNED_NORMALIZED", "SIGNED_NORMALIZED", "VERTEX_ATTRIB_ARRAY_INTEGER", "VERTEX_ATTRIB_ARRAY_DIVISOR", "TRANSFORM_FEEDBACK_BUFFER_MODE", "MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS", "TRANSFORM_FEEDBACK_VARYINGS", "TRANSFORM_FEEDBACK_BUFFER_START", "TRANSFORM_FEEDBACK_BUFFER_SIZE", "TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN", "MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS", "MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS", "INTERLEAVED_ATTRIBS", "SEPARATE_ATTRIBS", "TRANSFORM_FEEDBACK_BUFFER", "TRANSFORM_FEEDBACK_BUFFER_BINDING", "TRANSFORM_FEEDBACK", "TRANSFORM_FEEDBACK_PAUSED", "TRANSFORM_FEEDBACK_ACTIVE", "TRANSFORM_FEEDBACK_BINDING", "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING", "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE", "FRAMEBUFFER_ATTACHMENT_RED_SIZE", "FRAMEBUFFER_ATTACHMENT_GREEN_SIZE", "FRAMEBUFFER_ATTACHMENT_BLUE_SIZE", "FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE", "FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE", "FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE", "FRAMEBUFFER_DEFAULT", "DEPTH24_STENCIL8", "DRAW_FRAMEBUFFER_BINDING", "READ_FRAMEBUFFER_BINDING", "RENDERBUFFER_SAMPLES", "FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER", "FRAMEBUFFER_INCOMPLETE_MULTISAMPLE", "UNIFORM_BUFFER", "UNIFORM_BUFFER_BINDING", "UNIFORM_BUFFER_START", "UNIFORM_BUFFER_SIZE", "MAX_VERTEX_UNIFORM_BLOCKS", "MAX_FRAGMENT_UNIFORM_BLOCKS", "MAX_COMBINED_UNIFORM_BLOCKS", "MAX_UNIFORM_BUFFER_BINDINGS", "MAX_UNIFORM_BLOCK_SIZE", "MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS", "MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS", "UNIFORM_BUFFER_OFFSET_ALIGNMENT", "ACTIVE_UNIFORM_BLOCKS", "UNIFORM_TYPE", "UNIFORM_SIZE", "UNIFORM_BLOCK_INDEX", "UNIFORM_OFFSET", "UNIFORM_ARRAY_STRIDE", "UNIFORM_MATRIX_STRIDE", "UNIFORM_IS_ROW_MAJOR", "UNIFORM_BLOCK_BINDING", "UNIFORM_BLOCK_DATA_SIZE", "UNIFORM_BLOCK_ACTIVE_UNIFORMS", "UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES", "UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER", "UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER", "OBJECT_TYPE", "SYNC_CONDITION", "SYNC_STATUS", "SYNC_FLAGS", "SYNC_FENCE", "SYNC_GPU_COMMANDS_COMPLETE", "UNSIGNALED", "SIGNALED", "ALREADY_SIGNALED", "TIMEOUT_EXPIRED", "CONDITION_SATISFIED", "WAIT_FAILED", "SYNC_FLUSH_COMMANDS_BIT", "COLOR", "DEPTH", "STENCIL", "MIN", "MAX", "DEPTH_COMPONENT24", "STREAM_READ", "STREAM_COPY", "STATIC_READ", "STATIC_COPY", "DYNAMIC_READ", "DYNAMIC_COPY", "DEPTH_COMPONENT32F", "DEPTH32F_STENCIL8", "INVALID_INDEX", "TIMEOUT_IGNORED", "MAX_CLIENT_WAIT_TIMEOUT_WEBGL", "VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE", "UNMASKED_VENDOR_WEBGL", "UNMASKED_RENDERER_WEBGL", "MAX_TEXTURE_MAX_ANISOTROPY_EXT", "TEXTURE_MAX_ANISOTROPY_EXT", "COMPRESSED_RGB_S3TC_DXT1_EXT", "COMPRESSED_RGBA_S3TC_DXT1_EXT", "COMPRESSED_RGBA_S3TC_DXT3_EXT", "COMPRESSED_RGBA_S3TC_DXT5_EXT", "COMPRESSED_R11_EAC", "COMPRESSED_SIGNED_R11_EAC", "COMPRESSED_RG11_EAC", "COMPRESSED_SIGNED_RG11_EAC", "COMPRESSED_RGB8_ETC2", "COMPRESSED_RGBA8_ETC2_EAC", "COMPRESSED_SRGB8_ETC2", "COMPRESSED_SRGB8_ALPHA8_ETC2_EAC", "COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2", "COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2", "COMPRESSED_RGB_PVRTC_4BPPV1_IMG", "COMPRESSED_RGBA_PVRTC_4BPPV1_IMG", "COMPRESSED_RGB_PVRTC_2BPPV1_IMG", "COMPRESSED_RGBA_PVRTC_2BPPV1_IMG", "COMPRESSED_RGB_ETC1_WEBGL", "COMPRESSED_RGB_ATC_WEBGL", "COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL", "COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL", "UNSIGNED_INT_24_8_WEBGL", "HALF_FLOAT_OES", "RGBA32F_EXT", "RGB32F_EXT", "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT", "UNSIGNED_NORMALIZED_EXT", "MIN_EXT", "MAX_EXT", "SRGB_EXT", "SRGB_ALPHA_EXT", "SRGB8_ALPHA8_EXT", "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT", "FRAGMENT_SHADER_DERIVATIVE_HINT_OES", "COLOR_ATTACHMENT0_WEBGL", "COLOR_ATTACHMENT1_WEBGL", "COLOR_ATTACHMENT2_WEBGL", "COLOR_ATTACHMENT3_WEBGL", "COLOR_ATTACHMENT4_WEBGL", "COLOR_ATTACHMENT5_WEBGL", "COLOR_ATTACHMENT6_WEBGL", "COLOR_ATTACHMENT7_WEBGL", "COLOR_ATTACHMENT8_WEBGL", "COLOR_ATTACHMENT9_WEBGL", "COLOR_ATTACHMENT10_WEBGL", "COLOR_ATTACHMENT11_WEBGL", "COLOR_ATTACHMENT12_WEBGL", "COLOR_ATTACHMENT13_WEBGL", "COLOR_ATTACHMENT14_WEBGL", "COLOR_ATTACHMENT15_WEBGL", "DRAW_BUFFER0_WEBGL", "DRAW_BUFFER1_WEBGL", "DRAW_BUFFER2_WEBGL", "DRAW_BUFFER3_WEBGL", "DRAW_BUFFER4_WEBGL", "DRAW_BUFFER5_WEBGL", "DRAW_BUFFER6_WEBGL", "DRAW_BUFFER7_WEBGL", "DRAW_BUFFER8_WEBGL", "DRAW_BUFFER9_WEBGL", "DRAW_BUFFER10_WEBGL", "DRAW_BUFFER11_WEBGL", "DRAW_BUFFER12_WEBGL", "DRAW_BUFFER13_WEBGL", "DRAW_BUFFER14_WEBGL", "DRAW_BUFFER15_WEBGL", "MAX_COLOR_ATTACHMENTS_WEBGL", "MAX_DRAW_BUFFERS_WEBGL", "VERTEX_ARRAY_BINDING_OES", "QUERY_COUNTER_BITS_EXT", "CURRENT_QUERY_EXT", "QUERY_RESULT_EXT", "QUERY_RESULT_AVAILABLE_EXT", "TIME_ELAPSED_EXT", "TIMESTAMP_EXT", "GPU_DISJOINT_EXT", "INITIAL_STATE", "outlineEnabled", "outlineRenderShadowmap", "outlineShadowmap", "getUniforms", "uniforms", "undefined", "outline_uEnabled", "outline_uRenderOutlines", "outline_uShadowmap", "vs", "fs", "name", "injectShaderCode", "source", "code", "INJECT_CODE", "replace", "concat", "VS_CODE", "FS_CODE", "defaultProps", "getZLevel", "PathOutlineLayer", "shaders", "Object", "assign", "modules", "outline", "vs", "fs", "context", "setState", "outlineFramebuffer", "Framebuffer", "gl", "dummyTexture", "Texture2D", "state", "attributeManager", "addInstanced", "instanceZLevel", "size", "type", "GL", "UNSIGNED_BYTE", "accessor", "moduleParameters", "parameters", "uniforms", "props", "jointRounded", "capRounded", "billboard", "miterLimit", "widthUnits", "widthScale", "widthMinPixels", "widthMaxPixels", "jointType", "Number", "capType", "UNIT", "resize", "clear", "color", "depth", "model", "updateModuleSettings", "outlineEnabled", "outlineRenderShadowmap", "outlineShadowmap", "draw", "depthTest", "blendEquation", "MAX", "framebuffer", "PathLayer", "Arrow2DGeometry", "opts", "Object", "assign", "attributes", "getArrowAttributes", "Geometry", "length", "headSize", "tailWidth", "tailStart", "texCoords", "normals", "positions", "Array", "i", "i3", "Float32Array", "esm_exports", "init_esm", "getLineLength", "vPoints", "lineLength", "i", "length", "distance", "DEFAULT_COLOR", "DEFAULT_DIRECTION", "forward", "backward", "createPathMarkers", "data", "getPath", "x", "path", "getDirection", "direction", "getColor", "getMarkerPercentages", "info", "projectFlat", "markers", "object", "color", "map", "p", "Vector2", "vPointsReverse", "slice", "reverse", "percentages", "percentage", "marker", "createMarkerAlongPath", "push", "distanceAlong", "currentDistance", "previousDistance", "vDirection", "clone", "subtract", "normalize", "along", "vCenter", "multiply", "add", "vDirection2", "angle", "verticalAngle", "Math", "PI", "position", "y", "getClosestPointOnLine", "p", "p1", "p2", "clampToLine", "lineVector", "Vector3", "subtract", "pointVector", "dotProduct", "dot", "lerp", "getClosestPointOnPolyline", "points", "pClosest", "distanceSquared", "Infinity", "index", "i", "length", "pClosestOnLine", "distanceToLineSquared", "point", "distance", "Math", "sqrt", "DISTANCE_FOR_MULTI_ARROWS", "ARROW_HEAD_SIZE", "ARROW_TAIL_WIDTH", "DEFAULT_MARKER_LAYER", "SimpleMeshLayer", "DEFAULT_MARKER_LAYER_PROPS", "mesh", "Arrow2DGeometry", "headSize", "tailWidth", "defaultProps", "Object", "assign", "PathOutlineLayer", "MarkerLayer", "markerLayerProps", "sizeScale", "fp64", "highlightIndex", "highlightPoint", "getPath", "x", "path", "getColor", "color", "getMarkerColor", "getDirection", "direction", "getMarkerPercentages", "object", "lineLength", "PathMarkerLayer", "state", "markers", "closestPoint", "xyz", "viewport", "coordinateSystem", "coordinateOrigin", "COORDINATE_SYSTEM", "METER_OFFSETS", "metersToLngLatDelta", "dx", "dy", "y", "projectFlat", "LNGLAT_OFFSETS", "props", "oldProps", "changeFlags", "dataChanged", "updateTriggersChanged", "data", "context", "o", "_recalculateClosestPoint", "propsChanged", "point", "points", "p", "closestPoints", "position", "info", "getSubLayerProps", "id", "getOrientation", "angle", "pickable", "parameters", "blend", "depthTest", "ScatterplotLayer", "CompositeLayer", "JunctionScatterplotLayer", "props", "id", "getFillColor", "getStrokeColor", "getInnerRadius", "updateTriggers", "ScatterplotLayer", "data", "getLineColor", "getRadius", "pickable", "CompositeLayer", "defaultProps", "d"]
}
