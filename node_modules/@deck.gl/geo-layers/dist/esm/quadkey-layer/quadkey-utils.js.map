{"version":3,"sources":["../../../src/quadkey-layer/quadkey-utils.ts"],"names":["worldToLngLat","TILE_SIZE","quadkeyToWorldBounds","quadkey","coverage","x","y","mask","length","scale","i","q","parseInt","getQuadkeyPolygon","topLeft","bottomRight","w","n","e","s"],"mappings":"AAAA,SAAQA,aAAR,QAA4B,uBAA5B;AAEA,MAAMC,SAAS,GAAG,GAAlB;AAEA,OAAO,SAASC,oBAAT,CAA8BC,OAA9B,EAA+CC,QAA/C,EAAuF;AAC5F,MAAIC,CAAC,GAAG,CAAR;AACA,MAAIC,CAAC,GAAG,CAAR;AACA,MAAIC,IAAI,GAAG,KAAKJ,OAAO,CAACK,MAAxB;AACA,QAAMC,KAAK,GAAGF,IAAI,GAAGN,SAArB;;AAEA,OAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,OAAO,CAACK,MAA5B,EAAoCE,CAAC,EAArC,EAAyC;AACvCH,IAAAA,IAAI,KAAK,CAAT;AACA,UAAMI,CAAC,GAAGC,QAAQ,CAACT,OAAO,CAACO,CAAD,CAAR,CAAlB;AACA,QAAIC,CAAC,GAAG,CAAR,EAAWN,CAAC,IAAIE,IAAL;AACX,QAAII,CAAC,GAAG,CAAR,EAAWL,CAAC,IAAIC,IAAL;AACZ;;AACD,SAAO,CACL,CAACF,CAAC,GAAGI,KAAL,EAAYR,SAAS,GAAGK,CAAC,GAAGG,KAA5B,CADK,EAEL,CAAC,CAACJ,CAAC,GAAGD,QAAL,IAAiBK,KAAlB,EAAyBR,SAAS,GAAG,CAACK,CAAC,GAAGF,QAAL,IAAiBK,KAAtD,CAFK,CAAP;AAID;AAED,OAAO,SAASI,iBAAT,CAA2BV,OAA3B,EAA4CC,QAAQ,GAAG,CAAvD,EAAoE;AACzE,QAAM,CAACU,OAAD,EAAUC,WAAV,IAAyBb,oBAAoB,CAACC,OAAD,EAAUC,QAAV,CAAnD;AACA,QAAM,CAACY,CAAD,EAAIC,CAAJ,IAASjB,aAAa,CAACc,OAAD,CAA5B;AACA,QAAM,CAACI,CAAD,EAAIC,CAAJ,IAASnB,aAAa,CAACe,WAAD,CAA5B;AACA,SAAO,CAACG,CAAD,EAAID,CAAJ,EAAOC,CAAP,EAAUC,CAAV,EAAaH,CAAb,EAAgBG,CAAhB,EAAmBH,CAAnB,EAAsBC,CAAtB,EAAyBC,CAAzB,EAA4BD,CAA5B,CAAP;AACD","sourcesContent":["import {worldToLngLat} from '@math.gl/web-mercator';\n\nconst TILE_SIZE = 512;\n\nexport function quadkeyToWorldBounds(quadkey: string, coverage: number): [number[], number[]] {\n  let x = 0;\n  let y = 0;\n  let mask = 1 << quadkey.length;\n  const scale = mask / TILE_SIZE;\n\n  for (let i = 0; i < quadkey.length; i++) {\n    mask >>= 1;\n    const q = parseInt(quadkey[i]);\n    if (q % 2) x |= mask;\n    if (q > 1) y |= mask;\n  }\n  return [\n    [x / scale, TILE_SIZE - y / scale],\n    [(x + coverage) / scale, TILE_SIZE - (y + coverage) / scale]\n  ];\n}\n\nexport function getQuadkeyPolygon(quadkey: string, coverage = 1): number[] {\n  const [topLeft, bottomRight] = quadkeyToWorldBounds(quadkey, coverage);\n  const [w, n] = worldToLngLat(topLeft);\n  const [e, s] = worldToLngLat(bottomRight);\n  return [e, n, e, s, w, s, w, n, e, n];\n}\n"],"file":"quadkey-utils.js"}