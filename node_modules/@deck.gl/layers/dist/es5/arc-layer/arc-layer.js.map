{"version":3,"sources":["../../../src/arc-layer/arc-layer.ts"],"names":["DEFAULT_COLOR","defaultProps","getSourcePosition","type","value","x","sourcePosition","getTargetPosition","targetPosition","getSourceColor","getTargetColor","getWidth","getHeight","getTilt","greatCircle","numSegments","min","widthUnits","widthScale","widthMinPixels","widthMaxPixels","Number","MAX_SAFE_INTEGER","ArcLayer","getAttributeManager","getBounds","vs","fs","modules","project32","picking","attributeManager","addInstanced","instanceSourcePositions","size","fp64","use64bitPositions","transition","accessor","instanceTargetPositions","instanceSourceColors","props","colorFormat","length","normalized","defaultValue","instanceTargetColors","instanceWidths","instanceHeights","instanceTilts","opts","oldProps","changeFlags","extensionsChanged","propsChanged","gl","context","state","model","delete","_getModel","invalidateAll","uniforms","wrapLongitude","setUniforms","UNIT","useShortestPath","draw","id","positions","i","concat","Model","getShaders","geometry","Geometry","drawMode","attributes","Float32Array","isInstanced","Layer"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Layer,\n  project32,\n  picking,\n  UNIT,\n  UpdateParameters,\n  LayerProps,\n  LayerDataSource,\n  Unit,\n  AccessorFunction,\n  Position,\n  Accessor,\n  Color,\n  DefaultProps\n} from '@deck.gl/core';\n\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './arc-layer-vertex.glsl';\nimport fs from './arc-layer-fragment.glsl';\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<ArcLayerProps> = {\n  getSourcePosition: {type: 'accessor', value: x => x.sourcePosition},\n  getTargetPosition: {type: 'accessor', value: x => x.targetPosition},\n  getSourceColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getTargetColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getWidth: {type: 'accessor', value: 1},\n  getHeight: {type: 'accessor', value: 1},\n  getTilt: {type: 'accessor', value: 0},\n\n  greatCircle: false,\n  numSegments: {type: 'number', value: 50, min: 1},\n\n  widthUnits: 'pixels',\n  widthScale: {type: 'number', value: 1, min: 0},\n  widthMinPixels: {type: 'number', value: 0, min: 0},\n  widthMaxPixels: {type: 'number', value: Number.MAX_SAFE_INTEGER, min: 0}\n};\n\n/** All properties supported by ArcLayer. */\nexport type ArcLayerProps<DataT = any> = _ArcLayerProps<DataT> & LayerProps;\n\n/** Properties added by ArcLayer. */\ntype _ArcLayerProps<DataT> = {\n  data: LayerDataSource<DataT>;\n  /**\n   * If `true`, create the arc along the shortest path on the earth surface.\n   * @default false\n   */\n  greatCircle?: boolean;\n\n  /**\n   * The number of segments used to draw each arc.\n   * @default 50\n   */\n  numSegments?: number;\n\n  /**\n   * The units of the line width, one of `'meters'`, `'common'`, and `'pixels'`\n   * @default 'pixels'\n   */\n  widthUnits?: Unit;\n\n  /**\n   * The scaling multiplier for the width of each line.\n   * @default 1\n   */\n  widthScale?: number;\n\n  /**\n   * The minimum line width in pixels.\n   * @default 0\n   */\n  widthMinPixels?: number;\n\n  /**\n   * The maximum line width in pixels.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  widthMaxPixels?: number;\n\n  /**\n   * Method called to retrieve the source position of each object.\n   * @default object => object.sourcePosition\n   */\n  getSourcePosition?: AccessorFunction<DataT, Position>;\n\n  /**\n   * Method called to retrieve the target position of each object.\n   * @default object => object.targetPosition\n   */\n  getTargetPosition?: AccessorFunction<DataT, Position>;\n\n  /**\n   * The rgba color is in the format of `[r, g, b, [a]]`.\n   * @default [0, 0, 0, 255]\n   */\n  getSourceColor?: Accessor<DataT, Color>;\n\n  /**\n   * The rgba color is in the format of `[r, g, b, [a]]`.\n   * @default [0, 0, 0, 255]\n   */\n  getTargetColor?: Accessor<DataT, Color>;\n\n  /**\n   * The line width of each object, in units specified by `widthUnits`.\n   * @default 1\n   */\n  getWidth?: Accessor<DataT, number>;\n\n  /**\n   * Multiplier of layer height. `0` will make the layer flat.\n   * @default 1\n   */\n  getHeight?: Accessor<DataT, number>;\n\n  /**\n   * Use to tilt the arc to the side if you have multiple arcs with the same source and target positions.\n   * @default 0\n   */\n  getTilt?: Accessor<DataT, number>;\n};\n\n/** Render raised arcs joining pairs of source and target coordinates. */\nexport default class ArcLayer<DataT = any, ExtraPropsT extends {} = {}> extends Layer<\n  ExtraPropsT & Required<_ArcLayerProps<DataT>>\n> {\n  static layerName = 'ArcLayer';\n  static defaultProps = defaultProps;\n\n  state!: Layer['state'] & {\n    model?: Model;\n  };\n\n  getBounds(): [number[], number[]] | null {\n    return this.getAttributeManager()?.getBounds([\n      'instanceSourcePositions',\n      'instanceTargetPositions'\n    ]);\n  }\n\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]}); // 'project' module added by default.\n  }\n\n  // This layer has its own wrapLongitude logic\n  get wrapLongitude() {\n    return false;\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager()!;\n\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instanceSourcePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getSourcePosition'\n      },\n      instanceTargetPositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getTargetPosition'\n      },\n      instanceSourceColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getSourceColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceTargetColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getTargetColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getWidth',\n        defaultValue: 1\n      },\n      instanceHeights: {\n        size: 1,\n        transition: true,\n        accessor: 'getHeight',\n        defaultValue: 1\n      },\n      instanceTilts: {\n        size: 1,\n        transition: true,\n        accessor: 'getTilt',\n        defaultValue: 0\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState(opts: UpdateParameters<this>): void {\n    super.updateState(opts);\n    const {props, oldProps, changeFlags} = opts;\n    // Re-generate model if geometry changed\n    if (\n      changeFlags.extensionsChanged ||\n      (changeFlags.propsChanged && props.numSegments !== oldProps.numSegments)\n    ) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager()!.invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {widthUnits, widthScale, widthMinPixels, widthMaxPixels, greatCircle, wrapLongitude} =\n      this.props;\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        greatCircle,\n        widthUnits: UNIT[widthUnits],\n        widthScale,\n        widthMinPixels,\n        widthMaxPixels,\n        useShortestPath: wrapLongitude\n      })\n      .draw();\n  }\n\n  protected _getModel(gl: WebGLRenderingContext): Model {\n    const {id, numSegments} = this.props;\n    let positions: number[] = [];\n    /*\n     *  (0, -1)-------------_(1, -1)\n     *       |          _,-\"  |\n     *       o      _,-\"      o\n     *       |  _,-\"          |\n     *   (0, 1)\"-------------(1, 1)\n     */\n    for (let i = 0; i < numSegments; i++) {\n      positions = positions.concat([i, 1, 0, i, -1, 0]);\n    }\n\n    const model = new Model(gl, {\n      ...this.getShaders(),\n      id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_STRIP,\n        attributes: {\n          positions: new Float32Array(positions)\n        }\n      }),\n      isInstanced: true\n    });\n\n    model.setUniforms({numSegments});\n\n    return model;\n  }\n}\n"],"file":"arc-layer.js"}