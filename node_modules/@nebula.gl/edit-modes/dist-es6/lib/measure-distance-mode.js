"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MeasureDistanceMode = void 0;

var _distance = _interopRequireDefault(require("@turf/distance"));

var _midpoint = _interopRequireDefault(require("@turf/midpoint"));

var _utils = require("../utils");

var _geojsonEditMode = require("./geojson-edit-mode");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var MeasureDistanceMode = /*#__PURE__*/function (_GeoJsonEditMode) {
  _inherits(MeasureDistanceMode, _GeoJsonEditMode);

  var _super = _createSuper(MeasureDistanceMode);

  function MeasureDistanceMode() {
    var _this;

    _classCallCheck(this, MeasureDistanceMode);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "_isMeasuringSessionFinished", false);

    _defineProperty(_assertThisInitialized(_this), "_currentTooltips", []);

    _defineProperty(_assertThisInitialized(_this), "_currentDistance", 0);

    _defineProperty(_assertThisInitialized(_this), "_calculateDistanceForTooltip", function (_ref) {
      var positionA = _ref.positionA,
          positionB = _ref.positionB,
          modeConfig = _ref.modeConfig;

      var _ref2 = modeConfig || {},
          turfOptions = _ref2.turfOptions,
          measurementCallback = _ref2.measurementCallback;

      var distance = (0, _distance["default"])(positionA, positionB, turfOptions);

      if (measurementCallback) {
        measurementCallback(distance);
      }

      return distance;
    });

    return _this;
  }

  _createClass(MeasureDistanceMode, [{
    key: "_formatTooltip",
    value: function _formatTooltip(distance, modeConfig) {
      var _ref3 = modeConfig || {},
          formatTooltip = _ref3.formatTooltip,
          turfOptions = _ref3.turfOptions;

      var units = turfOptions && turfOptions.units || 'kilometers';
      var text;

      if (formatTooltip) {
        text = formatTooltip(distance);
      } else {
        // By default, round to 2 decimal places and append units
        text = "".concat(parseFloat(distance).toFixed(2), " ").concat(units);
      }

      return text;
    }
  }, {
    key: "handleClick",
    value: function handleClick(event, props) {
      var modeConfig = props.modeConfig,
          data = props.data,
          onEdit = props.onEdit;

      var _ref4 = modeConfig || {},
          _ref4$centerTooltipsO = _ref4.centerTooltipsOnLine,
          centerTooltipsOnLine = _ref4$centerTooltipsO === void 0 ? false : _ref4$centerTooltipsO; // restart measuring session


      if (this._isMeasuringSessionFinished) {
        this._isMeasuringSessionFinished = false;
        this.resetClickSequence();
        this._currentTooltips = [];
        this._currentDistance = 0;
      }

      var picks = event.picks;
      var clickedEditHandle = (0, _utils.getPickedEditHandle)(picks);
      var positionAdded = false;

      if (!clickedEditHandle) {
        // Don't add another point right next to an existing one
        this.addClickSequence(event);
        positionAdded = true;
      }

      var clickSequence = this.getClickSequence();

      if (clickSequence.length > 1 && clickedEditHandle && Array.isArray(clickedEditHandle.properties.positionIndexes) && clickedEditHandle.properties.positionIndexes[0] === clickSequence.length - 1) {
        // They clicked the last point (or double-clicked), so add the LineString
        this._isMeasuringSessionFinished = true;
      } else if (positionAdded) {
        if (clickSequence.length > 1) {
          this._currentDistance += this._calculateDistanceForTooltip({
            positionA: clickSequence[clickSequence.length - 2],
            positionB: clickSequence[clickSequence.length - 1],
            modeConfig: modeConfig
          });
          var tooltipPosition = centerTooltipsOnLine ? (0, _midpoint["default"])(clickSequence[clickSequence.length - 2], clickSequence[clickSequence.length - 1]).geometry.coordinates : event.mapCoords;

          this._currentTooltips.push({
            position: tooltipPosition,
            text: this._formatTooltip(this._currentDistance, modeConfig)
          });
        } // new tentative point


        onEdit({
          // data is the same
          updatedData: data,
          editType: 'addTentativePosition',
          editContext: {
            position: event.mapCoords
          }
        });
      }
    }
  }, {
    key: "handleKeyUp",
    value: function handleKeyUp(event, props) {
      if (this._isMeasuringSessionFinished) return;
      event.stopPropagation();
      var key = event.key;
      var clickSequenceLength = this.getClickSequence().length;

      switch (key) {
        case 'Escape':
          this._isMeasuringSessionFinished = true;

          if (clickSequenceLength === 1) {
            this.resetClickSequence();
            this._currentTooltips = [];
          } // force update drawings


          props.onUpdateCursor('cell');
          break;

        case 'Enter':
          this.handleClick(props.lastPointerMoveEvent, props);
          this._isMeasuringSessionFinished = true;
          break;

        default:
          break;
      }
    }
  }, {
    key: "getGuides",
    value: function getGuides(props) {
      var _guides$features;

      var lastPointerMoveEvent = props.lastPointerMoveEvent;
      var clickSequence = this.getClickSequence();
      var lastCoords = lastPointerMoveEvent && !this._isMeasuringSessionFinished ? [lastPointerMoveEvent.mapCoords] : [];
      var guides = {
        type: 'FeatureCollection',
        features: []
      };

      if (clickSequence.length > 0) {
        guides.features.push({
          type: 'Feature',
          properties: {
            guideType: 'tentative'
          },
          geometry: {
            type: 'LineString',
            coordinates: [].concat(_toConsumableArray(clickSequence), lastCoords)
          }
        });
      }

      var editHandles = clickSequence.map(function (clickedCoord, index) {
        return {
          type: 'Feature',
          properties: {
            guideType: 'editHandle',
            editHandleType: 'existing',
            featureIndex: -1,
            positionIndexes: [index]
          },
          geometry: {
            type: 'Point',
            coordinates: clickedCoord
          }
        };
      });

      (_guides$features = guides.features).push.apply(_guides$features, _toConsumableArray(editHandles)); // @ts-ignore


      return guides;
    }
  }, {
    key: "handlePointerMove",
    value: function handlePointerMove(event, props) {
      props.onUpdateCursor('cell');
    }
  }, {
    key: "getTooltips",
    value: function getTooltips(props) {
      var lastPointerMoveEvent = props.lastPointerMoveEvent,
          modeConfig = props.modeConfig;

      var _ref5 = modeConfig || {},
          _ref5$centerTooltipsO = _ref5.centerTooltipsOnLine,
          centerTooltipsOnLine = _ref5$centerTooltipsO === void 0 ? false : _ref5$centerTooltipsO;

      var positions = this.getClickSequence();

      if (positions.length > 0 && lastPointerMoveEvent && !this._isMeasuringSessionFinished) {
        var distance = this._calculateDistanceForTooltip({
          positionA: positions[positions.length - 1],
          positionB: lastPointerMoveEvent.mapCoords,
          modeConfig: props.modeConfig
        });

        var tooltipPosition = centerTooltipsOnLine ? (0, _midpoint["default"])(positions[positions.length - 1], lastPointerMoveEvent.mapCoords).geometry.coordinates : lastPointerMoveEvent.mapCoords;
        return [].concat(_toConsumableArray(this._currentTooltips), [{
          position: tooltipPosition,
          text: this._formatTooltip(this._currentDistance + distance, modeConfig)
        }]);
      }

      return this._currentTooltips;
    }
  }]);

  return MeasureDistanceMode;
}(_geojsonEditMode.GeoJsonEditMode);

exports.MeasureDistanceMode = MeasureDistanceMode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,