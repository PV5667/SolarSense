"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TranslateMode = void 0;

var _bearing = _interopRequireDefault(require("@turf/bearing"));

var _distance = _interopRequireDefault(require("@turf/distance"));

var _transformTranslate = _interopRequireDefault(require("@turf/transform-translate"));

var _helpers = require("@turf/helpers");

var _viewportMercatorProject = _interopRequireDefault(require("viewport-mercator-project"));

var _utils = require("../utils");

var _geojsonEditMode = require("./geojson-edit-mode");

var _immutableFeatureCollection = require("./immutable-feature-collection");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var TranslateMode = /*#__PURE__*/function (_GeoJsonEditMode) {
  _inherits(TranslateMode, _GeoJsonEditMode);

  var _super = _createSuper(TranslateMode);

  function TranslateMode() {
    var _this;

    _classCallCheck(this, TranslateMode);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "_geometryBeforeTranslate", void 0);

    _defineProperty(_assertThisInitialized(_this), "_isTranslatable", void 0);

    return _this;
  }

  _createClass(TranslateMode, [{
    key: "handleDragging",
    value: function handleDragging(event, props) {
      if (!this._isTranslatable) {
        // Nothing to do
        return;
      }

      if (this._geometryBeforeTranslate) {
        // Translate the geometry
        var editAction = this.getTranslateAction(event.pointerDownMapCoords, event.mapCoords, 'translating', props);

        if (editAction) {
          props.onEdit(editAction);
        }
      } // cancel map panning


      event.cancelPan();
    }
  }, {
    key: "handlePointerMove",
    value: function handlePointerMove(event, props) {
      this._isTranslatable = this.isSelectionPicked(event.pointerDownPicks || event.picks, props);
      this.updateCursor(props);
    }
  }, {
    key: "handleStartDragging",
    value: function handleStartDragging(event, props) {
      if (!this._isTranslatable) {
        return;
      }

      this._geometryBeforeTranslate = this.getSelectedFeaturesAsFeatureCollection(props);
    }
  }, {
    key: "handleStopDragging",
    value: function handleStopDragging(event, props) {
      if (this._geometryBeforeTranslate) {
        // Translate the geometry
        var editAction = this.getTranslateAction(event.pointerDownMapCoords, event.mapCoords, 'translated', props);

        if (editAction) {
          props.onEdit(editAction);
        }

        this._geometryBeforeTranslate = null;
      }
    }
  }, {
    key: "updateCursor",
    value: function updateCursor(props) {
      if (this._isTranslatable) {
        props.onUpdateCursor('move');
      } else {
        props.onUpdateCursor(null);
      }
    }
  }, {
    key: "getTranslateAction",
    value: function getTranslateAction(startDragPoint, currentPoint, editType, props) {
      var _this2 = this;

      if (!this._geometryBeforeTranslate) {
        return null;
      }

      var updatedData = new _immutableFeatureCollection.ImmutableFeatureCollection(props.data);
      var selectedIndexes = props.selectedIndexes;

      var _ref = props.modeConfig || {},
          viewportDesc = _ref.viewport,
          screenSpace = _ref.screenSpace;

      if (viewportDesc && screenSpace) {
        (function () {
          var viewport = viewportDesc.project ? viewportDesc : new _viewportMercatorProject["default"](viewportDesc);
          var from = viewport.project(startDragPoint);
          var to = viewport.project(currentPoint);
          var dx = to[0] - from[0];
          var dy = to[1] - from[1];

          for (var i = 0; i < selectedIndexes.length; i++) {
            var selectedIndex = selectedIndexes[i];
            var feature = _this2._geometryBeforeTranslate.features[i];
            var coordinates = feature.geometry.coordinates;

            if (coordinates) {
              coordinates = (0, _utils.mapCoords)(coordinates, function (coord) {
                var pixels = viewport.project(coord);

                if (pixels) {
                  pixels[0] += dx;
                  pixels[1] += dy;
                  return viewport.unproject(pixels);
                }

                return null;
              }); // @ts-ignore

              updatedData = updatedData.replaceGeometry(selectedIndex, {
                type: feature.geometry.type,
                coordinates: coordinates
              });
            }
          }
        })();
      } else {
        var p1 = (0, _helpers.point)(startDragPoint);
        var p2 = (0, _helpers.point)(currentPoint);
        var distanceMoved = (0, _distance["default"])(p1, p2);
        var direction = (0, _bearing["default"])(p1, p2);
        var movedFeatures = (0, _transformTranslate["default"])( // @ts-ignore
        this._geometryBeforeTranslate, distanceMoved, direction);

        for (var i = 0; i < selectedIndexes.length; i++) {
          var selectedIndex = selectedIndexes[i];
          var movedFeature = movedFeatures.features[i];
          updatedData = updatedData.replaceGeometry(selectedIndex, movedFeature.geometry);
        }
      }

      return {
        updatedData: updatedData.getObject(),
        editType: editType,
        editContext: {
          featureIndexes: selectedIndexes
        }
      };
    }
  }]);

  return TranslateMode;
}(_geojsonEditMode.GeoJsonEditMode);

exports.TranslateMode = TranslateMode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvdHJhbnNsYXRlLW1vZGUudHMiXSwibmFtZXMiOlsiVHJhbnNsYXRlTW9kZSIsImV2ZW50IiwicHJvcHMiLCJfaXNUcmFuc2xhdGFibGUiLCJfZ2VvbWV0cnlCZWZvcmVUcmFuc2xhdGUiLCJlZGl0QWN0aW9uIiwiZ2V0VHJhbnNsYXRlQWN0aW9uIiwicG9pbnRlckRvd25NYXBDb29yZHMiLCJtYXBDb29yZHMiLCJvbkVkaXQiLCJjYW5jZWxQYW4iLCJpc1NlbGVjdGlvblBpY2tlZCIsInBvaW50ZXJEb3duUGlja3MiLCJwaWNrcyIsInVwZGF0ZUN1cnNvciIsImdldFNlbGVjdGVkRmVhdHVyZXNBc0ZlYXR1cmVDb2xsZWN0aW9uIiwib25VcGRhdGVDdXJzb3IiLCJzdGFydERyYWdQb2ludCIsImN1cnJlbnRQb2ludCIsImVkaXRUeXBlIiwidXBkYXRlZERhdGEiLCJJbW11dGFibGVGZWF0dXJlQ29sbGVjdGlvbiIsImRhdGEiLCJzZWxlY3RlZEluZGV4ZXMiLCJtb2RlQ29uZmlnIiwidmlld3BvcnREZXNjIiwidmlld3BvcnQiLCJzY3JlZW5TcGFjZSIsInByb2plY3QiLCJXZWJNZXJjYXRvclZpZXdwb3J0IiwiZnJvbSIsInRvIiwiZHgiLCJkeSIsImkiLCJsZW5ndGgiLCJzZWxlY3RlZEluZGV4IiwiZmVhdHVyZSIsImZlYXR1cmVzIiwiY29vcmRpbmF0ZXMiLCJnZW9tZXRyeSIsImNvb3JkIiwicGl4ZWxzIiwidW5wcm9qZWN0IiwicmVwbGFjZUdlb21ldHJ5IiwidHlwZSIsInAxIiwicDIiLCJkaXN0YW5jZU1vdmVkIiwiZGlyZWN0aW9uIiwibW92ZWRGZWF0dXJlcyIsIm1vdmVkRmVhdHVyZSIsImdldE9iamVjdCIsImVkaXRDb250ZXh0IiwiZmVhdHVyZUluZGV4ZXMiLCJHZW9Kc29uRWRpdE1vZGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFTQTs7QUFDQTs7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQUVhQSxhOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O21DQUlJQyxLLEVBQXNCQyxLLEVBQXFDO0FBQ3hFLFVBQUksQ0FBQyxLQUFLQyxlQUFWLEVBQTJCO0FBQ3pCO0FBQ0E7QUFDRDs7QUFFRCxVQUFJLEtBQUtDLHdCQUFULEVBQW1DO0FBQ2pDO0FBQ0EsWUFBTUMsVUFBVSxHQUFHLEtBQUtDLGtCQUFMLENBQ2pCTCxLQUFLLENBQUNNLG9CQURXLEVBRWpCTixLQUFLLENBQUNPLFNBRlcsRUFHakIsYUFIaUIsRUFJakJOLEtBSmlCLENBQW5COztBQU9BLFlBQUlHLFVBQUosRUFBZ0I7QUFDZEgsVUFBQUEsS0FBSyxDQUFDTyxNQUFOLENBQWFKLFVBQWI7QUFDRDtBQUNGLE9BbEJ1RSxDQW9CeEU7OztBQUNBSixNQUFBQSxLQUFLLENBQUNTLFNBQU47QUFDRDs7O3NDQUVpQlQsSyxFQUF5QkMsSyxFQUFxQztBQUM5RSxXQUFLQyxlQUFMLEdBQXVCLEtBQUtRLGlCQUFMLENBQXVCVixLQUFLLENBQUNXLGdCQUFOLElBQTBCWCxLQUFLLENBQUNZLEtBQXZELEVBQThEWCxLQUE5RCxDQUF2QjtBQUVBLFdBQUtZLFlBQUwsQ0FBa0JaLEtBQWxCO0FBQ0Q7Ozt3Q0FFbUJELEssRUFBMkJDLEssRUFBcUM7QUFDbEYsVUFBSSxDQUFDLEtBQUtDLGVBQVYsRUFBMkI7QUFDekI7QUFDRDs7QUFFRCxXQUFLQyx3QkFBTCxHQUFnQyxLQUFLVyxzQ0FBTCxDQUE0Q2IsS0FBNUMsQ0FBaEM7QUFDRDs7O3VDQUVrQkQsSyxFQUEwQkMsSyxFQUFxQztBQUNoRixVQUFJLEtBQUtFLHdCQUFULEVBQW1DO0FBQ2pDO0FBQ0EsWUFBTUMsVUFBVSxHQUFHLEtBQUtDLGtCQUFMLENBQ2pCTCxLQUFLLENBQUNNLG9CQURXLEVBRWpCTixLQUFLLENBQUNPLFNBRlcsRUFHakIsWUFIaUIsRUFJakJOLEtBSmlCLENBQW5COztBQU9BLFlBQUlHLFVBQUosRUFBZ0I7QUFDZEgsVUFBQUEsS0FBSyxDQUFDTyxNQUFOLENBQWFKLFVBQWI7QUFDRDs7QUFFRCxhQUFLRCx3QkFBTCxHQUFnQyxJQUFoQztBQUNEO0FBQ0Y7OztpQ0FFWUYsSyxFQUFxQztBQUNoRCxVQUFJLEtBQUtDLGVBQVQsRUFBMEI7QUFDeEJELFFBQUFBLEtBQUssQ0FBQ2MsY0FBTixDQUFxQixNQUFyQjtBQUNELE9BRkQsTUFFTztBQUNMZCxRQUFBQSxLQUFLLENBQUNjLGNBQU4sQ0FBcUIsSUFBckI7QUFDRDtBQUNGOzs7dUNBR0NDLGMsRUFDQUMsWSxFQUNBQyxRLEVBQ0FqQixLLEVBQ3NDO0FBQUE7O0FBQ3RDLFVBQUksQ0FBQyxLQUFLRSx3QkFBVixFQUFvQztBQUNsQyxlQUFPLElBQVA7QUFDRDs7QUFFRCxVQUFJZ0IsV0FBVyxHQUFHLElBQUlDLHNEQUFKLENBQStCbkIsS0FBSyxDQUFDb0IsSUFBckMsQ0FBbEI7QUFDQSxVQUFNQyxlQUFlLEdBQUdyQixLQUFLLENBQUNxQixlQUE5Qjs7QUFOc0MsaUJBUVVyQixLQUFLLENBQUNzQixVQUFOLElBQW9CLEVBUjlCO0FBQUEsVUFRcEJDLFlBUm9CLFFBUTlCQyxRQVI4QjtBQUFBLFVBUU5DLFdBUk0sUUFRTkEsV0FSTTs7QUFVdEMsVUFBSUYsWUFBWSxJQUFJRSxXQUFwQixFQUFpQztBQUFBO0FBQy9CLGNBQU1ELFFBQVEsR0FBR0QsWUFBWSxDQUFDRyxPQUFiLEdBQXVCSCxZQUF2QixHQUFzQyxJQUFJSSxtQ0FBSixDQUF3QkosWUFBeEIsQ0FBdkQ7QUFFQSxjQUFNSyxJQUFJLEdBQUdKLFFBQVEsQ0FBQ0UsT0FBVCxDQUFpQlgsY0FBakIsQ0FBYjtBQUNBLGNBQU1jLEVBQUUsR0FBR0wsUUFBUSxDQUFDRSxPQUFULENBQWlCVixZQUFqQixDQUFYO0FBQ0EsY0FBTWMsRUFBRSxHQUFHRCxFQUFFLENBQUMsQ0FBRCxDQUFGLEdBQVFELElBQUksQ0FBQyxDQUFELENBQXZCO0FBQ0EsY0FBTUcsRUFBRSxHQUFHRixFQUFFLENBQUMsQ0FBRCxDQUFGLEdBQVFELElBQUksQ0FBQyxDQUFELENBQXZCOztBQUVBLGVBQUssSUFBSUksQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR1gsZUFBZSxDQUFDWSxNQUFwQyxFQUE0Q0QsQ0FBQyxFQUE3QyxFQUFpRDtBQUMvQyxnQkFBTUUsYUFBYSxHQUFHYixlQUFlLENBQUNXLENBQUQsQ0FBckM7QUFDQSxnQkFBTUcsT0FBTyxHQUFHLE1BQUksQ0FBQ2pDLHdCQUFMLENBQThCa0MsUUFBOUIsQ0FBdUNKLENBQXZDLENBQWhCO0FBRUEsZ0JBQUlLLFdBQVcsR0FBR0YsT0FBTyxDQUFDRyxRQUFSLENBQWlCRCxXQUFuQzs7QUFDQSxnQkFBSUEsV0FBSixFQUFpQjtBQUNmQSxjQUFBQSxXQUFXLEdBQUcsc0JBQVVBLFdBQVYsRUFBdUIsVUFBQ0UsS0FBRCxFQUFXO0FBQzlDLG9CQUFNQyxNQUFNLEdBQUdoQixRQUFRLENBQUNFLE9BQVQsQ0FBaUJhLEtBQWpCLENBQWY7O0FBQ0Esb0JBQUlDLE1BQUosRUFBWTtBQUNWQSxrQkFBQUEsTUFBTSxDQUFDLENBQUQsQ0FBTixJQUFhVixFQUFiO0FBQ0FVLGtCQUFBQSxNQUFNLENBQUMsQ0FBRCxDQUFOLElBQWFULEVBQWI7QUFDQSx5QkFBT1AsUUFBUSxDQUFDaUIsU0FBVCxDQUFtQkQsTUFBbkIsQ0FBUDtBQUNEOztBQUNELHVCQUFPLElBQVA7QUFDRCxlQVJhLENBQWQsQ0FEZSxDQVdmOztBQUNBdEIsY0FBQUEsV0FBVyxHQUFHQSxXQUFXLENBQUN3QixlQUFaLENBQTRCUixhQUE1QixFQUEyQztBQUN2RFMsZ0JBQUFBLElBQUksRUFBRVIsT0FBTyxDQUFDRyxRQUFSLENBQWlCSyxJQURnQztBQUV2RE4sZ0JBQUFBLFdBQVcsRUFBWEE7QUFGdUQsZUFBM0MsQ0FBZDtBQUlEO0FBQ0Y7QUE5QjhCO0FBK0JoQyxPQS9CRCxNQStCTztBQUNMLFlBQU1PLEVBQUUsR0FBRyxvQkFBTTdCLGNBQU4sQ0FBWDtBQUNBLFlBQU04QixFQUFFLEdBQUcsb0JBQU03QixZQUFOLENBQVg7QUFFQSxZQUFNOEIsYUFBYSxHQUFHLDBCQUFhRixFQUFiLEVBQWlCQyxFQUFqQixDQUF0QjtBQUNBLFlBQU1FLFNBQVMsR0FBRyx5QkFBWUgsRUFBWixFQUFnQkMsRUFBaEIsQ0FBbEI7QUFFQSxZQUFNRyxhQUFhLEdBQUcscUNBQ3BCO0FBQ0EsYUFBSzlDLHdCQUZlLEVBR3BCNEMsYUFIb0IsRUFJcEJDLFNBSm9CLENBQXRCOztBQU9BLGFBQUssSUFBSWYsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR1gsZUFBZSxDQUFDWSxNQUFwQyxFQUE0Q0QsQ0FBQyxFQUE3QyxFQUFpRDtBQUMvQyxjQUFNRSxhQUFhLEdBQUdiLGVBQWUsQ0FBQ1csQ0FBRCxDQUFyQztBQUNBLGNBQU1pQixZQUFZLEdBQUdELGFBQWEsQ0FBQ1osUUFBZCxDQUF1QkosQ0FBdkIsQ0FBckI7QUFDQWQsVUFBQUEsV0FBVyxHQUFHQSxXQUFXLENBQUN3QixlQUFaLENBQTRCUixhQUE1QixFQUEyQ2UsWUFBWSxDQUFDWCxRQUF4RCxDQUFkO0FBQ0Q7QUFDRjs7QUFFRCxhQUFPO0FBQ0xwQixRQUFBQSxXQUFXLEVBQUVBLFdBQVcsQ0FBQ2dDLFNBQVosRUFEUjtBQUVMakMsUUFBQUEsUUFBUSxFQUFSQSxRQUZLO0FBR0xrQyxRQUFBQSxXQUFXLEVBQUU7QUFDWEMsVUFBQUEsY0FBYyxFQUFFL0I7QUFETDtBQUhSLE9BQVA7QUFPRDs7OztFQTlJZ0NnQyxnQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0dXJmQmVhcmluZyBmcm9tICdAdHVyZi9iZWFyaW5nJztcbmltcG9ydCB0dXJmRGlzdGFuY2UgZnJvbSAnQHR1cmYvZGlzdGFuY2UnO1xuaW1wb3J0IHR1cmZUcmFuc2Zvcm1UcmFuc2xhdGUgZnJvbSAnQHR1cmYvdHJhbnNmb3JtLXRyYW5zbGF0ZSc7XG5pbXBvcnQgeyBwb2ludCB9IGZyb20gJ0B0dXJmL2hlbHBlcnMnO1xuaW1wb3J0IFdlYk1lcmNhdG9yVmlld3BvcnQgZnJvbSAndmlld3BvcnQtbWVyY2F0b3ItcHJvamVjdCc7XG5pbXBvcnQgeyBGZWF0dXJlQ29sbGVjdGlvbiwgUG9zaXRpb24gfSBmcm9tICcuLi9nZW9qc29uLXR5cGVzJztcbmltcG9ydCB7XG4gIFBvaW50ZXJNb3ZlRXZlbnQsXG4gIFN0YXJ0RHJhZ2dpbmdFdmVudCxcbiAgU3RvcERyYWdnaW5nRXZlbnQsXG4gIERyYWdnaW5nRXZlbnQsXG4gIE1vZGVQcm9wcyxcbn0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgbWFwQ29vcmRzIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgR2VvSnNvbkVkaXRNb2RlLCBHZW9Kc29uRWRpdEFjdGlvbiB9IGZyb20gJy4vZ2VvanNvbi1lZGl0LW1vZGUnO1xuaW1wb3J0IHsgSW1tdXRhYmxlRmVhdHVyZUNvbGxlY3Rpb24gfSBmcm9tICcuL2ltbXV0YWJsZS1mZWF0dXJlLWNvbGxlY3Rpb24nO1xuXG5leHBvcnQgY2xhc3MgVHJhbnNsYXRlTW9kZSBleHRlbmRzIEdlb0pzb25FZGl0TW9kZSB7XG4gIF9nZW9tZXRyeUJlZm9yZVRyYW5zbGF0ZTogRmVhdHVyZUNvbGxlY3Rpb24gfCBudWxsIHwgdW5kZWZpbmVkO1xuICBfaXNUcmFuc2xhdGFibGU6IGJvb2xlYW47XG5cbiAgaGFuZGxlRHJhZ2dpbmcoZXZlbnQ6IERyYWdnaW5nRXZlbnQsIHByb3BzOiBNb2RlUHJvcHM8RmVhdHVyZUNvbGxlY3Rpb24+KSB7XG4gICAgaWYgKCF0aGlzLl9pc1RyYW5zbGF0YWJsZSkge1xuICAgICAgLy8gTm90aGluZyB0byBkb1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9nZW9tZXRyeUJlZm9yZVRyYW5zbGF0ZSkge1xuICAgICAgLy8gVHJhbnNsYXRlIHRoZSBnZW9tZXRyeVxuICAgICAgY29uc3QgZWRpdEFjdGlvbiA9IHRoaXMuZ2V0VHJhbnNsYXRlQWN0aW9uKFxuICAgICAgICBldmVudC5wb2ludGVyRG93bk1hcENvb3JkcyxcbiAgICAgICAgZXZlbnQubWFwQ29vcmRzLFxuICAgICAgICAndHJhbnNsYXRpbmcnLFxuICAgICAgICBwcm9wc1xuICAgICAgKTtcblxuICAgICAgaWYgKGVkaXRBY3Rpb24pIHtcbiAgICAgICAgcHJvcHMub25FZGl0KGVkaXRBY3Rpb24pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGNhbmNlbCBtYXAgcGFubmluZ1xuICAgIGV2ZW50LmNhbmNlbFBhbigpO1xuICB9XG5cbiAgaGFuZGxlUG9pbnRlck1vdmUoZXZlbnQ6IFBvaW50ZXJNb3ZlRXZlbnQsIHByb3BzOiBNb2RlUHJvcHM8RmVhdHVyZUNvbGxlY3Rpb24+KSB7XG4gICAgdGhpcy5faXNUcmFuc2xhdGFibGUgPSB0aGlzLmlzU2VsZWN0aW9uUGlja2VkKGV2ZW50LnBvaW50ZXJEb3duUGlja3MgfHwgZXZlbnQucGlja3MsIHByb3BzKTtcblxuICAgIHRoaXMudXBkYXRlQ3Vyc29yKHByb3BzKTtcbiAgfVxuXG4gIGhhbmRsZVN0YXJ0RHJhZ2dpbmcoZXZlbnQ6IFN0YXJ0RHJhZ2dpbmdFdmVudCwgcHJvcHM6IE1vZGVQcm9wczxGZWF0dXJlQ29sbGVjdGlvbj4pIHtcbiAgICBpZiAoIXRoaXMuX2lzVHJhbnNsYXRhYmxlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fZ2VvbWV0cnlCZWZvcmVUcmFuc2xhdGUgPSB0aGlzLmdldFNlbGVjdGVkRmVhdHVyZXNBc0ZlYXR1cmVDb2xsZWN0aW9uKHByb3BzKTtcbiAgfVxuXG4gIGhhbmRsZVN0b3BEcmFnZ2luZyhldmVudDogU3RvcERyYWdnaW5nRXZlbnQsIHByb3BzOiBNb2RlUHJvcHM8RmVhdHVyZUNvbGxlY3Rpb24+KSB7XG4gICAgaWYgKHRoaXMuX2dlb21ldHJ5QmVmb3JlVHJhbnNsYXRlKSB7XG4gICAgICAvLyBUcmFuc2xhdGUgdGhlIGdlb21ldHJ5XG4gICAgICBjb25zdCBlZGl0QWN0aW9uID0gdGhpcy5nZXRUcmFuc2xhdGVBY3Rpb24oXG4gICAgICAgIGV2ZW50LnBvaW50ZXJEb3duTWFwQ29vcmRzLFxuICAgICAgICBldmVudC5tYXBDb29yZHMsXG4gICAgICAgICd0cmFuc2xhdGVkJyxcbiAgICAgICAgcHJvcHNcbiAgICAgICk7XG5cbiAgICAgIGlmIChlZGl0QWN0aW9uKSB7XG4gICAgICAgIHByb3BzLm9uRWRpdChlZGl0QWN0aW9uKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fZ2VvbWV0cnlCZWZvcmVUcmFuc2xhdGUgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZUN1cnNvcihwcm9wczogTW9kZVByb3BzPEZlYXR1cmVDb2xsZWN0aW9uPikge1xuICAgIGlmICh0aGlzLl9pc1RyYW5zbGF0YWJsZSkge1xuICAgICAgcHJvcHMub25VcGRhdGVDdXJzb3IoJ21vdmUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvcHMub25VcGRhdGVDdXJzb3IobnVsbCk7XG4gICAgfVxuICB9XG5cbiAgZ2V0VHJhbnNsYXRlQWN0aW9uKFxuICAgIHN0YXJ0RHJhZ1BvaW50OiBQb3NpdGlvbixcbiAgICBjdXJyZW50UG9pbnQ6IFBvc2l0aW9uLFxuICAgIGVkaXRUeXBlOiBzdHJpbmcsXG4gICAgcHJvcHM6IE1vZGVQcm9wczxGZWF0dXJlQ29sbGVjdGlvbj5cbiAgKTogR2VvSnNvbkVkaXRBY3Rpb24gfCBudWxsIHwgdW5kZWZpbmVkIHtcbiAgICBpZiAoIXRoaXMuX2dlb21ldHJ5QmVmb3JlVHJhbnNsYXRlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBsZXQgdXBkYXRlZERhdGEgPSBuZXcgSW1tdXRhYmxlRmVhdHVyZUNvbGxlY3Rpb24ocHJvcHMuZGF0YSk7XG4gICAgY29uc3Qgc2VsZWN0ZWRJbmRleGVzID0gcHJvcHMuc2VsZWN0ZWRJbmRleGVzO1xuXG4gICAgY29uc3QgeyB2aWV3cG9ydDogdmlld3BvcnREZXNjLCBzY3JlZW5TcGFjZSB9ID0gcHJvcHMubW9kZUNvbmZpZyB8fCB7fTtcblxuICAgIGlmICh2aWV3cG9ydERlc2MgJiYgc2NyZWVuU3BhY2UpIHtcbiAgICAgIGNvbnN0IHZpZXdwb3J0ID0gdmlld3BvcnREZXNjLnByb2plY3QgPyB2aWV3cG9ydERlc2MgOiBuZXcgV2ViTWVyY2F0b3JWaWV3cG9ydCh2aWV3cG9ydERlc2MpO1xuXG4gICAgICBjb25zdCBmcm9tID0gdmlld3BvcnQucHJvamVjdChzdGFydERyYWdQb2ludCk7XG4gICAgICBjb25zdCB0byA9IHZpZXdwb3J0LnByb2plY3QoY3VycmVudFBvaW50KTtcbiAgICAgIGNvbnN0IGR4ID0gdG9bMF0gLSBmcm9tWzBdO1xuICAgICAgY29uc3QgZHkgPSB0b1sxXSAtIGZyb21bMV07XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VsZWN0ZWRJbmRleGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHNlbGVjdGVkSW5kZXggPSBzZWxlY3RlZEluZGV4ZXNbaV07XG4gICAgICAgIGNvbnN0IGZlYXR1cmUgPSB0aGlzLl9nZW9tZXRyeUJlZm9yZVRyYW5zbGF0ZS5mZWF0dXJlc1tpXTtcblxuICAgICAgICBsZXQgY29vcmRpbmF0ZXMgPSBmZWF0dXJlLmdlb21ldHJ5LmNvb3JkaW5hdGVzO1xuICAgICAgICBpZiAoY29vcmRpbmF0ZXMpIHtcbiAgICAgICAgICBjb29yZGluYXRlcyA9IG1hcENvb3Jkcyhjb29yZGluYXRlcywgKGNvb3JkKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwaXhlbHMgPSB2aWV3cG9ydC5wcm9qZWN0KGNvb3JkKTtcbiAgICAgICAgICAgIGlmIChwaXhlbHMpIHtcbiAgICAgICAgICAgICAgcGl4ZWxzWzBdICs9IGR4O1xuICAgICAgICAgICAgICBwaXhlbHNbMV0gKz0gZHk7XG4gICAgICAgICAgICAgIHJldHVybiB2aWV3cG9ydC51bnByb2plY3QocGl4ZWxzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgIHVwZGF0ZWREYXRhID0gdXBkYXRlZERhdGEucmVwbGFjZUdlb21ldHJ5KHNlbGVjdGVkSW5kZXgsIHtcbiAgICAgICAgICAgIHR5cGU6IGZlYXR1cmUuZ2VvbWV0cnkudHlwZSxcbiAgICAgICAgICAgIGNvb3JkaW5hdGVzLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHAxID0gcG9pbnQoc3RhcnREcmFnUG9pbnQpO1xuICAgICAgY29uc3QgcDIgPSBwb2ludChjdXJyZW50UG9pbnQpO1xuXG4gICAgICBjb25zdCBkaXN0YW5jZU1vdmVkID0gdHVyZkRpc3RhbmNlKHAxLCBwMik7XG4gICAgICBjb25zdCBkaXJlY3Rpb24gPSB0dXJmQmVhcmluZyhwMSwgcDIpO1xuXG4gICAgICBjb25zdCBtb3ZlZEZlYXR1cmVzID0gdHVyZlRyYW5zZm9ybVRyYW5zbGF0ZShcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICB0aGlzLl9nZW9tZXRyeUJlZm9yZVRyYW5zbGF0ZSxcbiAgICAgICAgZGlzdGFuY2VNb3ZlZCxcbiAgICAgICAgZGlyZWN0aW9uXG4gICAgICApO1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlbGVjdGVkSW5kZXhlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBzZWxlY3RlZEluZGV4ID0gc2VsZWN0ZWRJbmRleGVzW2ldO1xuICAgICAgICBjb25zdCBtb3ZlZEZlYXR1cmUgPSBtb3ZlZEZlYXR1cmVzLmZlYXR1cmVzW2ldO1xuICAgICAgICB1cGRhdGVkRGF0YSA9IHVwZGF0ZWREYXRhLnJlcGxhY2VHZW9tZXRyeShzZWxlY3RlZEluZGV4LCBtb3ZlZEZlYXR1cmUuZ2VvbWV0cnkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB1cGRhdGVkRGF0YTogdXBkYXRlZERhdGEuZ2V0T2JqZWN0KCksXG4gICAgICBlZGl0VHlwZSxcbiAgICAgIGVkaXRDb250ZXh0OiB7XG4gICAgICAgIGZlYXR1cmVJbmRleGVzOiBzZWxlY3RlZEluZGV4ZXMsXG4gICAgICB9LFxuICAgIH07XG4gIH1cbn1cbiJdfQ==