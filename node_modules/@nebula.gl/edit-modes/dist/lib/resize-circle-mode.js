"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ResizeCircleMode = void 0;

var _nearestPointOnLine = _interopRequireDefault(require("@turf/nearest-point-on-line"));

var _helpers = require("@turf/helpers");

var _circle = _interopRequireDefault(require("@turf/circle"));

var _distance = _interopRequireDefault(require("@turf/distance"));

var _center = _interopRequireDefault(require("@turf/center"));

var _utils = require("../utils");

var _geojsonEditMode = require("./geojson-edit-mode");

var _immutableFeatureCollection = require("./immutable-feature-collection");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ResizeCircleMode = /*#__PURE__*/function (_GeoJsonEditMode) {
  _inherits(ResizeCircleMode, _GeoJsonEditMode);

  var _super = _createSuper(ResizeCircleMode);

  function ResizeCircleMode() {
    var _this;

    _classCallCheck(this, ResizeCircleMode);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "_selectedEditHandle", void 0);

    _defineProperty(_assertThisInitialized(_this), "_isResizing", false);

    return _this;
  }

  _createClass(ResizeCircleMode, [{
    key: "getGuides",
    value: function getGuides(props) {
      var _this2 = this;

      var handles = [];
      var selectedFeatureIndexes = props.selectedIndexes;
      var lastPointerMoveEvent = props.lastPointerMoveEvent;
      var picks = lastPointerMoveEvent && lastPointerMoveEvent.picks;
      var mapCoords = lastPointerMoveEvent && lastPointerMoveEvent.mapCoords; // intermediate edit handle

      if (picks && picks.length && mapCoords && selectedFeatureIndexes.length === 1 && !this._isResizing) {
        var featureAsPick = picks.find(function (pick) {
          return !pick.isGuide;
        }); // is the feature in the pick selected

        if (featureAsPick && featureAsPick.object.properties.shape && featureAsPick.object.properties.shape.includes('Circle') && props.selectedIndexes.includes(featureAsPick.index)) {
          var intermediatePoint = null;
          var positionIndexPrefix = [];
          var referencePoint = (0, _helpers.point)(mapCoords); // process all lines of the (single) feature

          (0, _utils.recursivelyTraverseNestedArrays)(featureAsPick.object.geometry.coordinates, [], function (lineString, prefix) {
            var lineStringFeature = (0, _helpers.lineString)(lineString);

            var candidateIntermediatePoint = _this2.getNearestPoint( // @ts-ignore
            lineStringFeature, referencePoint, props.modeConfig && props.modeConfig.viewport);

            if (!intermediatePoint || candidateIntermediatePoint.properties.dist < intermediatePoint.properties.dist) {
              intermediatePoint = candidateIntermediatePoint;
              positionIndexPrefix = prefix;
            }
          }); // tack on the lone intermediate point to the set of handles

          if (intermediatePoint) {
            var _intermediatePoint = intermediatePoint,
                position = _intermediatePoint.geometry.coordinates,
                index = _intermediatePoint.properties.index;
            handles.push({
              type: 'Feature',
              properties: {
                guideType: 'editHandle',
                editHandleType: 'intermediate',
                featureIndex: featureAsPick.index,
                positionIndexes: [].concat(_toConsumableArray(positionIndexPrefix), [index + 1])
              },
              geometry: {
                type: 'Point',
                coordinates: position
              }
            });
          }
        }
      }

      return {
        type: 'FeatureCollection',
        features: handles
      };
    } // turf.js does not support elevation for nearestPointOnLine

  }, {
    key: "getNearestPoint",
    value: function getNearestPoint(line, inPoint, viewport) {
      var coordinates = line.geometry.coordinates;

      if (coordinates.some(function (coord) {
        return coord.length > 2;
      })) {
        if (viewport) {
          // This line has elevation, we need to use alternative algorithm
          return (0, _utils.nearestPointOnProjectedLine)(line, inPoint, viewport);
        } // eslint-disable-next-line no-console,no-undef


        console.log('Editing 3D point but modeConfig.viewport not provided. Falling back to 2D logic.');
      }

      return (0, _nearestPointOnLine["default"])(line, inPoint);
    }
  }, {
    key: "handleDragging",
    value: function handleDragging(event, props) {
      var editHandle = (0, _utils.getPickedEditHandle)(event.pointerDownPicks);

      if (editHandle) {
        // Cancel map panning if pointer went down on an edit handle
        event.cancelPan();
        var editHandleProperties = editHandle.properties;
        var feature = this.getSelectedFeature(props);
        var center = (0, _center["default"])(feature).geometry.coordinates;
        var numberOfSteps = Object.entries(feature.geometry.coordinates[0]).length - 1;
        var radius = Math.max((0, _distance["default"])(center, event.mapCoords), 0.001);
        var _ref = {},
            _ref$steps = _ref.steps,
            steps = _ref$steps === void 0 ? numberOfSteps : _ref$steps;
        var options = {
          steps: steps
        };
        var updatedFeature = (0, _circle["default"])(center, radius, options);
        var geometry = updatedFeature.geometry;
        var updatedData = new _immutableFeatureCollection.ImmutableFeatureCollection(props.data).replaceGeometry(editHandleProperties.featureIndex, geometry).getObject();
        props.onEdit({
          updatedData: updatedData,
          editType: 'unionGeometry',
          editContext: {
            featureIndexes: [editHandleProperties.featureIndex]
          }
        });
      }
    }
  }, {
    key: "handlePointerMove",
    value: function handlePointerMove(event, props) {
      if (!this._isResizing) {
        var selectedEditHandle = (0, _utils.getPickedEditHandle)(event.picks);
        this._selectedEditHandle = selectedEditHandle && selectedEditHandle.properties.editHandleType === 'intermediate' ? selectedEditHandle : null;
      }

      var cursor = this.getCursor(event);
      props.onUpdateCursor(cursor);
    }
  }, {
    key: "handleStartDragging",
    value: function handleStartDragging(event, props) {
      if (this._selectedEditHandle) {
        this._isResizing = true;
      }
    }
  }, {
    key: "handleStopDragging",
    value: function handleStopDragging(event, props) {
      if (this._isResizing) {
        this._selectedEditHandle = null;
        this._isResizing = false;
      }
    }
  }, {
    key: "getCursor",
    value: function getCursor(event) {
      var picks = event && event.picks || [];
      var handlesPicked = (0, _utils.getPickedEditHandles)(picks);

      if (handlesPicked.length) {
        return 'cell';
      }

      return null;
    }
  }]);

  return ResizeCircleMode;
}(_geojsonEditMode.GeoJsonEditMode);

exports.ResizeCircleMode = ResizeCircleMode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvcmVzaXplLWNpcmNsZS1tb2RlLnRzIl0sIm5hbWVzIjpbIlJlc2l6ZUNpcmNsZU1vZGUiLCJwcm9wcyIsImhhbmRsZXMiLCJzZWxlY3RlZEZlYXR1cmVJbmRleGVzIiwic2VsZWN0ZWRJbmRleGVzIiwibGFzdFBvaW50ZXJNb3ZlRXZlbnQiLCJwaWNrcyIsIm1hcENvb3JkcyIsImxlbmd0aCIsIl9pc1Jlc2l6aW5nIiwiZmVhdHVyZUFzUGljayIsImZpbmQiLCJwaWNrIiwiaXNHdWlkZSIsIm9iamVjdCIsInByb3BlcnRpZXMiLCJzaGFwZSIsImluY2x1ZGVzIiwiaW5kZXgiLCJpbnRlcm1lZGlhdGVQb2ludCIsInBvc2l0aW9uSW5kZXhQcmVmaXgiLCJyZWZlcmVuY2VQb2ludCIsImdlb21ldHJ5IiwiY29vcmRpbmF0ZXMiLCJsaW5lU3RyaW5nIiwicHJlZml4IiwibGluZVN0cmluZ0ZlYXR1cmUiLCJjYW5kaWRhdGVJbnRlcm1lZGlhdGVQb2ludCIsImdldE5lYXJlc3RQb2ludCIsIm1vZGVDb25maWciLCJ2aWV3cG9ydCIsImRpc3QiLCJwb3NpdGlvbiIsInB1c2giLCJ0eXBlIiwiZ3VpZGVUeXBlIiwiZWRpdEhhbmRsZVR5cGUiLCJmZWF0dXJlSW5kZXgiLCJwb3NpdGlvbkluZGV4ZXMiLCJmZWF0dXJlcyIsImxpbmUiLCJpblBvaW50Iiwic29tZSIsImNvb3JkIiwiY29uc29sZSIsImxvZyIsImV2ZW50IiwiZWRpdEhhbmRsZSIsInBvaW50ZXJEb3duUGlja3MiLCJjYW5jZWxQYW4iLCJlZGl0SGFuZGxlUHJvcGVydGllcyIsImZlYXR1cmUiLCJnZXRTZWxlY3RlZEZlYXR1cmUiLCJjZW50ZXIiLCJudW1iZXJPZlN0ZXBzIiwiT2JqZWN0IiwiZW50cmllcyIsInJhZGl1cyIsIk1hdGgiLCJtYXgiLCJzdGVwcyIsIm9wdGlvbnMiLCJ1cGRhdGVkRmVhdHVyZSIsInVwZGF0ZWREYXRhIiwiSW1tdXRhYmxlRmVhdHVyZUNvbGxlY3Rpb24iLCJkYXRhIiwicmVwbGFjZUdlb21ldHJ5IiwiZ2V0T2JqZWN0Iiwib25FZGl0IiwiZWRpdFR5cGUiLCJlZGl0Q29udGV4dCIsImZlYXR1cmVJbmRleGVzIiwic2VsZWN0ZWRFZGl0SGFuZGxlIiwiX3NlbGVjdGVkRWRpdEhhbmRsZSIsImN1cnNvciIsImdldEN1cnNvciIsIm9uVXBkYXRlQ3Vyc29yIiwiaGFuZGxlc1BpY2tlZCIsIkdlb0pzb25FZGl0TW9kZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQWtCQTs7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQUVhQSxnQjs7Ozs7Ozs7Ozs7Ozs7Ozs7O2tFQUVHLEs7Ozs7Ozs7OEJBRUpDLEssRUFBNkQ7QUFBQTs7QUFDckUsVUFBTUMsT0FBTyxHQUFHLEVBQWhCO0FBQ0EsVUFBTUMsc0JBQXNCLEdBQUdGLEtBQUssQ0FBQ0csZUFBckM7QUFGcUUsVUFJN0RDLG9CQUo2RCxHQUlwQ0osS0FKb0MsQ0FJN0RJLG9CQUo2RDtBQUtyRSxVQUFNQyxLQUFLLEdBQUdELG9CQUFvQixJQUFJQSxvQkFBb0IsQ0FBQ0MsS0FBM0Q7QUFDQSxVQUFNQyxTQUFTLEdBQUdGLG9CQUFvQixJQUFJQSxvQkFBb0IsQ0FBQ0UsU0FBL0QsQ0FOcUUsQ0FRckU7O0FBQ0EsVUFDRUQsS0FBSyxJQUNMQSxLQUFLLENBQUNFLE1BRE4sSUFFQUQsU0FGQSxJQUdBSixzQkFBc0IsQ0FBQ0ssTUFBdkIsS0FBa0MsQ0FIbEMsSUFJQSxDQUFDLEtBQUtDLFdBTFIsRUFNRTtBQUNBLFlBQU1DLGFBQWEsR0FBR0osS0FBSyxDQUFDSyxJQUFOLENBQVcsVUFBQ0MsSUFBRDtBQUFBLGlCQUFVLENBQUNBLElBQUksQ0FBQ0MsT0FBaEI7QUFBQSxTQUFYLENBQXRCLENBREEsQ0FHQTs7QUFDQSxZQUNFSCxhQUFhLElBQ2JBLGFBQWEsQ0FBQ0ksTUFBZCxDQUFxQkMsVUFBckIsQ0FBZ0ND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dC1wb2ludC1vbi1saW5lJztcbmltcG9ydCB7IHBvaW50LCBsaW5lU3RyaW5nIGFzIHRvTGluZVN0cmluZyB9IGZyb20gJ0B0dXJmL2hlbHBlcnMnO1xuaW1wb3J0IGNpcmNsZSBmcm9tICdAdHVyZi9jaXJjbGUnO1xuaW1wb3J0IGRpc3RhbmNlIGZyb20gJ0B0dXJmL2Rpc3RhbmNlJztcbmltcG9ydCB0dXJmQ2VudGVyIGZyb20gJ0B0dXJmL2NlbnRlcic7XG5pbXBvcnQge1xuICByZWN1cnNpdmVseVRyYXZlcnNlTmVzdGVkQXJyYXlzLFxuICBuZWFyZXN0UG9pbnRPblByb2plY3RlZExpbmUsXG4gIGdldFBpY2tlZEVkaXRIYW5kbGVzLFxuICBnZXRQaWNrZWRFZGl0SGFuZGxlLFxuICBOZWFyZXN0UG9pbnRUeXBlLFxufSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgeyBMaW5lU3RyaW5nLCBQb2ludCwgRmVhdHVyZUNvbGxlY3Rpb24sIEZlYXR1cmVPZiB9IGZyb20gJy4uL2dlb2pzb24tdHlwZXMnO1xuaW1wb3J0IHtcbiAgTW9kZVByb3BzLFxuICBQb2ludGVyTW92ZUV2ZW50LFxuICBTdGFydERyYWdnaW5nRXZlbnQsXG4gIFN0b3BEcmFnZ2luZ0V2ZW50LFxuICBEcmFnZ2luZ0V2ZW50LFxuICBWaWV3cG9ydCxcbiAgRWRpdEhhbmRsZUZlYXR1cmUsXG4gIEd1aWRlRmVhdHVyZUNvbGxlY3Rpb24sXG59IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IEdlb0pzb25FZGl0TW9kZSB9IGZyb20gJy4vZ2VvanNvbi1lZGl0LW1vZGUnO1xuaW1wb3J0IHsgSW1tdXRhYmxlRmVhdHVyZUNvbGxlY3Rpb24gfSBmcm9tICcuL2ltbXV0YWJsZS1mZWF0dXJlLWNvbGxlY3Rpb24nO1xuXG5leHBvcnQgY2xhc3MgUmVzaXplQ2lyY2xlTW9kZSBleHRlbmRzIEdlb0pzb25FZGl0TW9kZSB7XG4gIF9zZWxlY3RlZEVkaXRIYW5kbGU6IEVkaXRIYW5kbGVGZWF0dXJlIHwgbnVsbCB8IHVuZGVmaW5lZDtcbiAgX2lzUmVzaXppbmcgPSBmYWxzZTtcblxuICBnZXRHdWlkZXMocHJvcHM6IE1vZGVQcm9wczxGZWF0dXJlQ29sbGVjdGlvbj4pOiBHdWlkZUZlYXR1cmVDb2xsZWN0aW9uIHtcbiAgICBjb25zdCBoYW5kbGVzID0gW107XG4gICAgY29uc3Qgc2VsZWN0ZWRGZWF0dXJlSW5kZXhlcyA9IHByb3BzLnNlbGVjdGVkSW5kZXhlcztcblxuICAgIGNvbnN0IHsgbGFzdFBvaW50ZXJNb3ZlRXZlbnQgfSA9IHByb3BzO1xuICAgIGNvbnN0IHBpY2tzID0gbGFzdFBvaW50ZXJNb3ZlRXZlbnQgJiYgbGFzdFBvaW50ZXJNb3ZlRXZlbnQucGlja3M7XG4gICAgY29uc3QgbWFwQ29vcmRzID0gbGFzdFBvaW50ZXJNb3ZlRXZlbnQgJiYgbGFzdFBvaW50ZXJNb3ZlRXZlbnQubWFwQ29vcmRzO1xuXG4gICAgLy8gaW50ZXJtZWRpYXRlIGVkaXQgaGFuZGxlXG4gICAgaWYgKFxuICAgICAgcGlja3MgJiZcbiAgICAgIHBpY2tzLmxlbmd0aCAmJlxuICAgICAgbWFwQ29vcmRzICYmXG4gICAgICBzZWxlY3RlZEZlYXR1cmVJbmRleGVzLmxlbmd0aCA9PT0gMSAmJlxuICAgICAgIXRoaXMuX2lzUmVzaXppbmdcbiAgICApIHtcbiAgICAgIGNvbnN0IGZlYXR1cmVBc1BpY2sgPSBwaWNrcy5maW5kKChwaWNrKSA9PiAhcGljay5pc0d1aWRlKTtcblxuICAgICAgLy8gaXMgdGhlIGZlYXR1cmUgaW4gdGhlIHBpY2sgc2VsZWN0ZWRcbiAgICAgIGlmIChcbiAgICAgICAgZmVhdHVyZUFzUGljayAmJlxuICAgICAgICBmZWF0dXJlQXNQaWNrLm9iamVjdC5wcm9wZXJ0aWVzLnNoYXBlICYmXG4gICAgICAgIGZlYXR1cmVBc1BpY2sub2JqZWN0LnByb3BlcnRpZXMuc2hhcGUuaW5jbHVkZXMoJ0NpcmNsZScpICYmXG4gICAgICAgIHByb3BzLnNlbGVjdGVkSW5kZXhlcy5pbmNsdWRlcyhmZWF0dXJlQXNQaWNrLmluZGV4KVxuICAgICAgKSB7XG4gICAgICAgIGxldCBpbnRlcm1lZGlhdGVQb2ludDogTmVhcmVzdFBvaW50VHlwZSB8IG51bGwgfCB1bmRlZmluZWQgPSBudWxsO1xuICAgICAgICBsZXQgcG9zaXRpb25JbmRleFByZWZpeCA9IFtdO1xuICAgICAgICBjb25zdCByZWZlcmVuY2VQb2ludCA9IHBvaW50KG1hcENvb3Jkcyk7XG4gICAgICAgIC8vIHByb2Nlc3MgYWxsIGxpbmVzIG9mIHRoZSAoc2luZ2xlKSBmZWF0dXJlXG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VOZXN0ZWRBcnJheXMoXG4gICAgICAgICAgZmVhdHVyZUFzUGljay5vYmplY3QuZ2VvbWV0cnkuY29vcmRpbmF0ZXMsXG4gICAgICAgICAgW10sXG4gICAgICAgICAgKGxpbmVTdHJpbmcsIHByZWZpeCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbGluZVN0cmluZ0ZlYXR1cmUgPSB0b0xpbmVTdHJpbmcobGluZVN0cmluZyk7XG4gICAgICAgICAgICBjb25zdCBjYW5kaWRhdGVJbnRlcm1lZGlhdGVQb2ludCA9IHRoaXMuZ2V0TmVhcmVzdFBvaW50KFxuICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgIGxpbmVTdHJpbmdGZWF0dXJlLFxuICAgICAgICAgICAgICByZWZlcmVuY2VQb2ludCxcbiAgICAgICAgICAgICAgcHJvcHMubW9kZUNvbmZpZyAmJiBwcm9wcy5tb2RlQ29uZmlnLnZpZXdwb3J0XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAhaW50ZXJtZWRpYXRlUG9pbnQgfHxcbiAgICAgICAgICAgICAgY2FuZGlkYXRlSW50ZXJtZWRpYXRlUG9pbnQucHJvcGVydGllcy5kaXN0IDwgaW50ZXJtZWRpYXRlUG9pbnQucHJvcGVydGllcy5kaXN0XG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgaW50ZXJtZWRpYXRlUG9pbnQgPSBjYW5kaWRhdGVJbnRlcm1lZGlhdGVQb2ludDtcbiAgICAgICAgICAgICAgcG9zaXRpb25JbmRleFByZWZpeCA9IHByZWZpeDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIC8vIHRhY2sgb24gdGhlIGxvbmUgaW50ZXJtZWRpYXRlIHBvaW50IHRvIHRoZSBzZXQgb2YgaGFuZGxlc1xuICAgICAgICBpZiAoaW50ZXJtZWRpYXRlUG9pbnQpIHtcbiAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBnZW9tZXRyeTogeyBjb29yZGluYXRlczogcG9zaXRpb24gfSxcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IHsgaW5kZXggfSxcbiAgICAgICAgICB9ID0gaW50ZXJtZWRpYXRlUG9pbnQ7XG4gICAgICAgICAgaGFuZGxlcy5wdXNoKHtcbiAgICAgICAgICAgIHR5cGU6ICdGZWF0dXJlJyxcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgICAgZ3VpZGVUeXBlOiAnZWRpdEhhbmRsZScsXG4gICAgICAgICAgICAgIGVkaXRIYW5kbGVUeXBlOiAnaW50ZXJtZWRpYXRlJyxcbiAgICAgICAgICAgICAgZmVhdHVyZUluZGV4OiBmZWF0dXJlQXNQaWNrLmluZGV4LFxuICAgICAgICAgICAgICBwb3NpdGlvbkluZGV4ZXM6IFsuLi5wb3NpdGlvbkluZGV4UHJlZml4LCBpbmRleCArIDFdLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdlb21ldHJ5OiB7XG4gICAgICAgICAgICAgIHR5cGU6ICdQb2ludCcsXG4gICAgICAgICAgICAgIGNvb3JkaW5hdGVzOiBwb3NpdGlvbixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ0ZlYXR1cmVDb2xsZWN0aW9uJyxcbiAgICAgIGZlYXR1cmVzOiBoYW5kbGVzLFxuICAgIH07XG4gIH1cblxuICAvLyB0dXJmLmpzIGRvZXMgbm90IHN1cHBvcnQgZWxldmF0aW9uIGZvciBuZWFyZXN0UG9pbnRPbkxpbmVcbiAgZ2V0TmVhcmVzdFBvaW50KFxuICAgIGxpbmU6IEZlYXR1cmVPZjxMaW5lU3RyaW5nPixcbiAgICBpblBvaW50OiBGZWF0dXJlT2Y8UG9pbnQ+LFxuICAgIHZpZXdwb3J0OiBWaWV3cG9ydCB8IG51bGwgfCB1bmRlZmluZWRcbiAgKTogTmVhcmVzdFBvaW50VHlwZSB7XG4gICAgY29uc3QgeyBjb29yZGluYXRlcyB9ID0gbGluZS5nZW9tZXRyeTtcbiAgICBpZiAoY29vcmRpbmF0ZXMuc29tZSgoY29vcmQpID0+IGNvb3JkLmxlbmd0aCA+IDIpKSB7XG4gICAgICBpZiAodmlld3BvcnQpIHtcbiAgICAgICAgLy8gVGhpcyBsaW5lIGhhcyBlbGV2YXRpb24sIHdlIG5lZWQgdG8gdXNlIGFsdGVybmF0aXZlIGFsZ29yaXRobVxuICAgICAgICByZXR1cm4gbmVhcmVzdFBvaW50T25Qcm9qZWN0ZWRMaW5lKGxpbmUsIGluUG9pbnQsIHZpZXdwb3J0KTtcbiAgICAgIH1cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlLG5vLXVuZGVmXG4gICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgJ0VkaXRpbmcgM0QgcG9pbnQgYnV0IG1vZGVDb25maWcudmlld3BvcnQgbm90IHByb3ZpZGVkLiBGYWxsaW5nIGJhY2sgdG8gMkQgbG9naWMuJ1xuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmVhcmVzdFBvaW50T25MaW5lKGxpbmUsIGluUG9pbnQpO1xuICB9XG5cbiAgaGFuZGxlRHJhZ2dpbmcoZXZlbnQ6IERyYWdnaW5nRXZlbnQsIHByb3BzOiBNb2RlUHJvcHM8RmVhdHVyZUNvbGxlY3Rpb24+KTogdm9pZCB7XG4gICAgY29uc3QgZWRpdEhhbmRsZSA9IGdldFBpY2tlZEVkaXRIYW5kbGUoZXZlbnQucG9pbnRlckRvd25QaWNrcyk7XG5cbiAgICBpZiAoZWRpdEhhbmRsZSkge1xuICAgICAgLy8gQ2FuY2VsIG1hcCBwYW5uaW5nIGlmIHBvaW50ZXIgd2VudCBkb3duIG9uIGFuIGVkaXQgaGFuZGxlXG4gICAgICBldmVudC5jYW5jZWxQYW4oKTtcblxuICAgICAgY29uc3QgZWRpdEhhbmRsZVByb3BlcnRpZXMgPSBlZGl0SGFuZGxlLnByb3BlcnRpZXM7XG5cbiAgICAgIGNvbnN0IGZlYXR1cmUgPSB0aGlzLmdldFNlbGVjdGVkRmVhdHVyZShwcm9wcyk7XG4gICAgICBjb25zdCBjZW50ZXIgPSB0dXJmQ2VudGVyKGZlYXR1cmUpLmdlb21ldHJ5LmNvb3JkaW5hdGVzO1xuICAgICAgY29uc3QgbnVtYmVyT2ZTdGVwcyA9IE9iamVjdC5lbnRyaWVzKGZlYXR1cmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXNbMF0pLmxlbmd0aCAtIDE7XG4gICAgICBjb25zdCByYWRpdXMgPSBNYXRoLm1heChkaXN0YW5jZShjZW50ZXIsIGV2ZW50Lm1hcENvb3JkcyksIDAuMDAxKTtcblxuICAgICAgY29uc3QgeyBzdGVwcyA9IG51bWJlck9mU3RlcHMgfSA9IHt9O1xuICAgICAgY29uc3Qgb3B0aW9ucyA9IHsgc3RlcHMgfTtcbiAgICAgIGNvbnN0IHVwZGF0ZWRGZWF0dXJlID0gY2lyY2xlKGNlbnRlciwgcmFkaXVzLCBvcHRpb25zKTtcbiAgICAgIGNvbnN0IGdlb21ldHJ5ID0gdXBkYXRlZEZlYXR1cmUuZ2VvbWV0cnk7XG5cbiAgICAgIGNvbnN0IHVwZGF0ZWREYXRhID0gbmV3IEltbXV0YWJsZUZlYXR1cmVDb2xsZWN0aW9uKHByb3BzLmRhdGEpXG4gICAgICAgIC5yZXBsYWNlR2VvbWV0cnkoZWRpdEhhbmRsZVByb3BlcnRpZXMuZmVhdHVyZUluZGV4LCBnZW9tZXRyeSlcbiAgICAgICAgLmdldE9iamVjdCgpO1xuXG4gICAgICBwcm9wcy5vbkVkaXQoe1xuICAgICAgICB1cGRhdGVkRGF0YSxcbiAgICAgICAgZWRpdFR5cGU6ICd1bmlvbkdlb21ldHJ5JyxcbiAgICAgICAgZWRpdENvbnRleHQ6IHtcbiAgICAgICAgICBmZWF0dXJlSW5kZXhlczogW2VkaXRIYW5kbGVQcm9wZXJ0aWVzLmZlYXR1cmVJbmRleF0sXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBoYW5kbGVQb2ludGVyTW92ZShldmVudDogUG9pbnRlck1vdmVFdmVudCwgcHJvcHM6IE1vZGVQcm9wczxGZWF0dXJlQ29sbGVjdGlvbj4pOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuX2lzUmVzaXppbmcpIHtcbiAgICAgIGNvbnN0IHNlbGVjdGVkRWRpdEhhbmRsZSA9IGdldFBpY2tlZEVkaXRIYW5kbGUoZXZlbnQucGlja3MpO1xuICAgICAgdGhpcy5fc2VsZWN0ZWRFZGl0SGFuZGxlID1cbiAgICAgICAgc2VsZWN0ZWRFZGl0SGFuZGxlICYmIHNlbGVjdGVkRWRpdEhhbmRsZS5wcm9wZXJ0aWVzLmVkaXRIYW5kbGVUeXBlID09PSAnaW50ZXJtZWRpYXRlJ1xuICAgICAgICAgID8gc2VsZWN0ZWRFZGl0SGFuZGxlXG4gICAgICAgICAgOiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IGN1cnNvciA9IHRoaXMuZ2V0Q3Vyc29yKGV2ZW50KTtcbiAgICBwcm9wcy5vblVwZGF0ZUN1cnNvcihjdXJzb3IpO1xuICB9XG5cbiAgaGFuZGxlU3RhcnREcmFnZ2luZyhldmVudDogU3RhcnREcmFnZ2luZ0V2ZW50LCBwcm9wczogTW9kZVByb3BzPEZlYXR1cmVDb2xsZWN0aW9uPikge1xuICAgIGlmICh0aGlzLl9zZWxlY3RlZEVkaXRIYW5kbGUpIHtcbiAgICAgIHRoaXMuX2lzUmVzaXppbmcgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGhhbmRsZVN0b3BEcmFnZ2luZyhldmVudDogU3RvcERyYWdnaW5nRXZlbnQsIHByb3BzOiBNb2RlUHJvcHM8RmVhdHVyZUNvbGxlY3Rpb24+KSB7XG4gICAgaWYgKHRoaXMuX2lzUmVzaXppbmcpIHtcbiAgICAgIHRoaXMuX3NlbGVjdGVkRWRpdEhhbmRsZSA9IG51bGw7XG4gICAgICB0aGlzLl9pc1Jlc2l6aW5nID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgZ2V0Q3Vyc29yKGV2ZW50OiBQb2ludGVyTW92ZUV2ZW50KTogc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZCB7XG4gICAgY29uc3QgcGlja3MgPSAoZXZlbnQgJiYgZXZlbnQucGlja3MpIHx8IFtdO1xuXG4gICAgY29uc3QgaGFuZGxlc1BpY2tlZCA9IGdldFBpY2tlZEVkaXRIYW5kbGVzKHBpY2tzKTtcbiAgICBpZiAoaGFuZGxlc1BpY2tlZC5sZW5ndGgpIHtcbiAgICAgIHJldHVybiAnY2VsbCc7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG59XG4iXX0=