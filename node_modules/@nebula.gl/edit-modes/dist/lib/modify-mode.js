"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ModifyMode = void 0;

var _helpers = require("@turf/helpers");

var _utils = require("../utils");

var _geojsonEditMode = require("./geojson-edit-mode");

var _immutableFeatureCollection = require("./immutable-feature-collection");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var ModifyMode = /*#__PURE__*/function (_GeoJsonEditMode) {
  _inherits(ModifyMode, _GeoJsonEditMode);

  var _super = _createSuper(ModifyMode);

  function ModifyMode() {
    _classCallCheck(this, ModifyMode);

    return _super.apply(this, arguments);
  }

  _createClass(ModifyMode, [{
    key: "getGuides",
    value: function getGuides(props) {
      var _this = this;

      var handles = [];
      var data = props.data,
          lastPointerMoveEvent = props.lastPointerMoveEvent;
      var features = data.features;
      var picks = lastPointerMoveEvent && lastPointerMoveEvent.picks;
      var mapCoords = lastPointerMoveEvent && lastPointerMoveEvent.mapCoords;

      var _iterator = _createForOfIteratorHelper(props.selectedIndexes),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _index = _step.value;

          if (_index < features.length) {
            var geometry = features[_index].geometry;
            handles.push.apply(handles, _toConsumableArray((0, _utils.getEditHandlesForGeometry)(geometry, _index)));
          } else {
            console.warn("selectedFeatureIndexes out of range ".concat(_index)); // eslint-disable-line no-console,no-undef
          }
        } // intermediate edit handle

      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      if (picks && picks.length && mapCoords) {
        var _props$modeConfig;

        var existingEditHandle = (0, _utils.getPickedExistingEditHandle)(picks); // don't show intermediate point when too close to an existing edit handle

        var featureAsPick = !existingEditHandle && picks.find(function (pick) {
          return !pick.isGuide;
        }); // is the feature in the pick selected

        if (featureAsPick && !featureAsPick.object.geometry.type.includes('Point') && !(((_props$modeConfig = props.modeConfig) === null || _props$modeConfig === void 0 ? void 0 : _props$modeConfig.lockRectangles) && featureAsPick.object.properties.shape === 'Rectangle') && props.selectedIndexes.includes(featureAsPick.index)) {
          var intermediatePoint = null;
          var positionIndexPrefix = [];
          var referencePoint = (0, _helpers.point)(mapCoords); // process all lines of the (single) feature

          (0, _utils.recursivelyTraverseNestedArrays)(featureAsPick.object.geometry.coordinates, [], function (lineString, prefix) {
            var lineStringFeature = (0, _helpers.lineString)(lineString);

            var candidateIntermediatePoint = _this.getNearestPoint( // @ts-ignore
            lineStringFeature, referencePoint, props.modeConfig && props.modeConfig.viewport);

            if (!intermediatePoint || candidateIntermediatePoint.properties.dist < intermediatePoint.properties.dist) {
              intermediatePoint = candidateIntermediatePoint;
              positionIndexPrefix = prefix;
            }
          }); // tack on the lone intermediate point to the set of handles

          if (intermediatePoint) {
            var _intermediatePoint = intermediatePoint,
                position = _intermediatePoint.geometry.coordinates,
                index = _intermediatePoint.properties.index;
            handles.push({
              type: 'Feature',
              properties: {
                guideType: 'editHandle',
                editHandleType: 'intermediate',
                featureIndex: featureAsPick.index,
                positionIndexes: [].concat(_toConsumableArray(positionIndexPrefix), [index + 1])
              },
              geometry: {
                type: 'Point',
                coordinates: position
              }
            });
          }
        }
      }

      return {
        type: 'FeatureCollection',
        features: handles
      };
    } // turf.js does not support elevation for nearestPointOnLine

  }, {
    key: "getNearestPoint",
    value: function getNearestPoint(line, inPoint, viewport) {
      var coordinates = line.geometry.coordinates;

      if (coordinates.some(function (coord) {
        return coord.length > 2;
      })) {
        if (viewport) {
          // This line has elevation, we need to use alternative algorithm
          return (0, _utils.nearestPointOnProjectedLine)(line, inPoint, viewport);
        } // eslint-disable-next-line no-console,no-undef


        console.log('Editing 3D point but modeConfig.viewport not provided. Falling back to 2D logic.');
      }

      return (0, _utils.nearestPointOnLine)(line, inPoint, viewport);
    }
  }, {
    key: "handleClick",
    value: function handleClick(event, props) {
      var pickedExistingHandle = (0, _utils.getPickedExistingEditHandle)(event.picks);
      var pickedIntermediateHandle = (0, _utils.getPickedIntermediateEditHandle)(event.picks);

      if (pickedExistingHandle) {
        var _pickedExistingHandle = pickedExistingHandle.properties,
            featureIndex = _pickedExistingHandle.featureIndex,
            positionIndexes = _pickedExistingHandle.positionIndexes;
        var updatedData;

        try {
          updatedData = new _immutableFeatureCollection.ImmutableFeatureCollection(props.data).removePosition(featureIndex, positionIndexes).getObject();
        } catch (ignored) {// This happens if user attempts to remove the last point
        }

        if (updatedData) {
          props.onEdit({
            updatedData: updatedData,
            editType: 'removePosition',
            editContext: {
              featureIndexes: [featureIndex],
              positionIndexes: positionIndexes,
              position: pickedExistingHandle.geometry.coordinates
            }
          });
        }
      } else if (pickedIntermediateHandle) {
        var _props$modeConfig2;

        var _pickedIntermediateHa = pickedIntermediateHandle.properties,
            _featureIndex = _pickedIntermediateHa.featureIndex,
            _positionIndexes = _pickedIntermediateHa.positionIndexes;
        var feature = props.data.features[_featureIndex];
        var canAddPosition = !(((_props$modeConfig2 = props.modeConfig) === null || _props$modeConfig2 === void 0 ? void 0 : _props$modeConfig2.lockRectangles) && (feature === null || feature === void 0 ? void 0 : feature.properties.shape) === 'Rectangle');

        if (canAddPosition) {
          var _updatedData = new _immutableFeatureCollection.ImmutableFeatureCollection(props.data).addPosition(_featureIndex, _positionIndexes, pickedIntermediateHandle.geometry.coordinates).getObject();

          if (_updatedData) {
            props.onEdit({
              updatedData: _updatedData,
              editType: 'addPosition',
              editContext: {
                featureIndexes: [_featureIndex],
                positionIndexes: _positionIndexes,
                position: pickedIntermediateHandle.geometry.coordinates
              }
            });
          }
        }
      }
    }
  }, {
    key: "handleDragging",
    value: function handleDragging(event, props) {
      var editHandle = (0, _utils.getPickedEditHandle)(event.pointerDownPicks);

      if (editHandle) {
        // Cancel map panning if pointer went down on an edit handle
        event.cancelPan();

        this._dragEditHandle('movePosition', props, editHandle, event);
      }
    }
  }, {
    key: "_dragEditHandle",
    value: function _dragEditHandle(editType, props, editHandle, event) {
      var _props$modeConfig3;

      var editHandleProperties = editHandle.properties;
      var editedFeature = props.data.features[editHandleProperties.featureIndex];
      var updatedData;

      if (((_props$modeConfig3 = props.modeConfig) === null || _props$modeConfig3 === void 0 ? void 0 : _props$modeConfig3.lockRectangles) && editedFeature.properties.shape === 'Rectangle') {
        var coordinates = (0, _utils.updateRectanglePosition)(editedFeature, editHandleProperties.positionIndexes[1], event.mapCoords);
        updatedData = new _immutableFeatureCollection.ImmutableFeatureCollection(props.data).replaceGeometry(editHandleProperties.featureIndex, {
          coordinates: coordinates,
          type: 'Polygon'
        }).getObject();
      } else {
        updatedData = new _immutableFeatureCollection.ImmutableFeatureCollection(props.data).replacePosition(editHandleProperties.featureIndex, editHandleProperties.positionIndexes, event.mapCoords).getObject();
      }

      props.onEdit({
        updatedData: updatedData,
        editType: editType,
        editContext: {
          featureIndexes: [editHandleProperties.featureIndex],
          positionIndexes: editHandleProperties.positionIndexes,
          position: event.mapCoords
        }
      });
    }
  }, {
    key: "handlePointerMove",
    value: function handlePointerMove(event, props) {
      var cursor = this.getCursor(event);
      props.onUpdateCursor(cursor);
    }
  }, {
    key: "handleStartDragging",
    value: function handleStartDragging(event, props) {
      var selectedFeatureIndexes = props.selectedIndexes;
      var editHandle = (0, _utils.getPickedIntermediateEditHandle)(event.picks);

      if (selectedFeatureIndexes.length && editHandle) {
        var editHandleProperties = editHandle.properties;
        var updatedData = new _immutableFeatureCollection.ImmutableFeatureCollection(props.data).addPosition(editHandleProperties.featureIndex, editHandleProperties.positionIndexes, event.mapCoords).getObject();
        props.onEdit({
          updatedData: updatedData,
          editType: 'addPosition',
          editContext: {
            featureIndexes: [editHandleProperties.featureIndex],
            positionIndexes: editHandleProperties.positionIndexes,
            position: event.mapCoords
          }
        });
      }
    }
  }, {
    key: "handleStopDragging",
    value: function handleStopDragging(event, props) {
      var selectedFeatureIndexes = props.selectedIndexes;
      var editHandle = (0, _utils.getPickedEditHandle)(event.picks);

      if (selectedFeatureIndexes.length && editHandle) {
        this._dragEditHandle('finishMovePosition', props, editHandle, event);
      }
    }
  }, {
    key: "getCursor",
    value: function getCursor(event) {
      var picks = event && event.picks || [];
      var handlesPicked = (0, _utils.getPickedEditHandles)(picks);

      if (handlesPicked.length) {
        return 'cell';
      }

      return null;
    }
  }]);

  return ModifyMode;
}(_geojsonEditMode.GeoJsonEditMode);

exports.ModifyMode = ModifyMode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,