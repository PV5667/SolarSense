/// <reference types="deck.gl" />
import { CompositeLayer, RGBAColor } from '@deck.gl/core';
import { ScatterplotLayer } from '@deck.gl/layers';
import { CompositeLayerProps } from '@deck.gl/core/lib/composite-layer';
interface JunctionScatterplotLayerProps extends CompositeLayerProps<any> {
    getFillColor?: RGBAColor | ((d: any) => RGBAColor);
    getStrokeColor?: RGBAColor | ((d: any) => RGBAColor);
    getInnerRadius?: number | ((d: any) => number);
}
export default class JunctionScatterplotLayer extends CompositeLayer<any, JunctionScatterplotLayerProps> {
    static layerName: string;
    static defaultProps: JunctionScatterplotLayerProps;
    renderLayers(): (ScatterplotLayer<unknown, {
        id: string;
        data: any;
        getLineColor: RGBAColor | ((d: any) => RGBAColor);
        updateTriggers: any;
        getFillColor?: RGBAColor | ((d: any) => RGBAColor);
        getStrokeColor?: RGBAColor | ((d: any) => RGBAColor);
        getInnerRadius?: number | ((d: any) => number);
        _subLayerProps?: Object;
        visible?: boolean;
        opacity?: number;
        extensions?: any[];
        pickable?: boolean;
        onHover?: import("@deck.gl/core/lib/layer").LayerInputHandler<any>;
        onClick?: import("@deck.gl/core/lib/layer").LayerInputHandler<any>;
        onDragStart?: import("@deck.gl/core/lib/layer").LayerInputHandler<any>;
        onDrag?: import("@deck.gl/core/lib/layer").LayerInputHandler<any>;
        onDragEnd?: import("@deck.gl/core/lib/layer").LayerInputHandler<any>;
        highlightColor?: RGBAColor | ((pickInfo: import("@deck.gl/core/lib/deck").PickInfo<any>) => RGBAColor);
        highlightedObjectIndex?: number;
        autoHighlight?: boolean;
        coordinateSystem?: number;
        coordinateOrigin?: import("@deck.gl/core").Position;
        wrapLongitude?: boolean;
        modelMatrix?: number[];
        dataComparator?: (newData: any, oldData: any) => boolean;
        dataTransform?: () => any[] | Iterable<any>;
        _dataDiff?: (newData: any, oldData: any) => {
            startRow: number;
            endRow: number;
        };
        positionFormat?: "XYZ" | "XY";
        colorFormat?: "RGBA" | "RGB";
        numInstances?: number;
        loaders?: any[];
        loadOptions?: any;
        onDataLoad?: (value: any[] | Iterable<any>, context: {
            layer: import("@deck.gl/core").Layer<any, import("@deck.gl/core/lib/layer").LayerProps<any>>;
        }) => void;
        parameters?: any;
        getPolygonOffset?: (uniform: any) => [number, number];
        transitions?: {
            [attributeGetter: string]: import("@deck.gl/core/lib/layer").TransitionTiming;
        };
        filterEnabled?: boolean;
        filterTransformSize?: boolean;
        filterTransformColor?: boolean;
    }> | ScatterplotLayer<unknown, {
        id: string;
        data: any;
        getFillColor: RGBAColor | ((d: any) => RGBAColor);
        getRadius: number | ((d: any) => number);
        pickable: false;
        updateTriggers: any;
        getStrokeColor?: RGBAColor | ((d: any) => RGBAColor);
        getInnerRadius?: number | ((d: any) => number);
        _subLayerProps?: Object;
        visible?: boolean;
        opacity?: number;
        extensions?: any[];
        onHover?: import("@deck.gl/core/lib/layer").LayerInputHandler<any>;
        onClick?: import("@deck.gl/core/lib/layer").LayerInputHandler<any>;
        onDragStart?: import("@deck.gl/core/lib/layer").LayerInputHandler<any>;
        onDrag?: import("@deck.gl/core/lib/layer").LayerInputHandler<any>;
        onDragEnd?: import("@deck.gl/core/lib/layer").LayerInputHandler<any>;
        highlightColor?: RGBAColor | ((pickInfo: import("@deck.gl/core/lib/deck").PickInfo<any>) => RGBAColor);
        highlightedObjectIndex?: number;
        autoHighlight?: boolean;
        coordinateSystem?: number;
        coordinateOrigin?: import("@deck.gl/core").Position;
        wrapLongitude?: boolean;
        modelMatrix?: number[];
        dataComparator?: (newData: any, oldData: any) => boolean;
        dataTransform?: () => any[] | Iterable<any>;
        _dataDiff?: (newData: any, oldData: any) => {
            startRow: number;
            endRow: number;
        };
        positionFormat?: "XYZ" | "XY";
        colorFormat?: "RGBA" | "RGB";
        numInstances?: number;
        loaders?: any[];
        loadOptions?: any;
        onDataLoad?: (value: any[] | Iterable<any>, context: {
            layer: import("@deck.gl/core").Layer<any, import("@deck.gl/core/lib/layer").LayerProps<any>>;
        }) => void;
        parameters?: any;
        getPolygonOffset?: (uniform: any) => [number, number];
        transitions?: {
            [attributeGetter: string]: import("@deck.gl/core/lib/layer").TransitionTiming;
        };
        filterEnabled?: boolean;
        filterTransformSize?: boolean;
        filterTransformColor?: boolean;
    }>)[];
}
export {};
//# sourceMappingURL=junction-scatterplot-layer.d.ts.map