"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _layers = require("@deck.gl/layers");

var _editModes = require("@nebula.gl/edit-modes");

var _constants = require("../constants");

var _editableLayer = _interopRequireDefault(require("./editable-layer"));

var _editablePathLayer = _interopRequireDefault(require("./editable-path-layer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var DEFAULT_LINE_COLOR = [0x0, 0x0, 0x0, 0x99];
var DEFAULT_FILL_COLOR = [0x0, 0x0, 0x0, 0x90];
var DEFAULT_SELECTED_LINE_COLOR = [0x0, 0x0, 0x0, 0xff];
var DEFAULT_SELECTED_FILL_COLOR = [0x0, 0x0, 0x90, 0x90];
var DEFAULT_TENTATIVE_LINE_COLOR = [0x90, 0x90, 0x90, 0xff];
var DEFAULT_TENTATIVE_FILL_COLOR = [0x90, 0x90, 0x90, 0x90];
var DEFAULT_EDITING_EXISTING_POINT_COLOR = [0xc0, 0x0, 0x0, 0xff];
var DEFAULT_EDITING_INTERMEDIATE_POINT_COLOR = [0x0, 0x0, 0x0, 0x80];
var DEFAULT_EDITING_SNAP_POINT_COLOR = [0x7c, 0x00, 0xc0, 0xff];
var DEFAULT_EDITING_POINT_OUTLINE_COLOR = [0xff, 0xff, 0xff, 0xff];
var DEFAULT_EDITING_EXISTING_POINT_RADIUS = 5;
var DEFAULT_EDITING_INTERMEDIATE_POINT_RADIUS = 3;
var DEFAULT_EDITING_SNAP_POINT_RADIUS = 7;
var DEFAULT_TOOLTIP_FONT_SIZE = 32 * _constants.PROJECTED_PIXEL_SIZE_MULTIPLIER;
var DEFAULT_EDIT_MODE = _editModes.DrawPolygonMode;

function guideAccessor(accessor) {
  if (!accessor || typeof accessor !== 'function') {
    return accessor;
  }

  return function (guideMaybeWrapped) {
    return accessor(unwrapGuide(guideMaybeWrapped));
  };
} // The object handed to us from deck.gl is different depending on the version of deck.gl used, unwrap as necessary


function unwrapGuide(guideMaybeWrapped) {
  if (guideMaybeWrapped.__source) {
    return guideMaybeWrapped.__source.object;
  } else if (guideMaybeWrapped.sourceFeature) {
    return guideMaybeWrapped.sourceFeature.feature;
  } // It is not wrapped, return as is


  return guideMaybeWrapped;
}

function getEditHandleColor(handle) {
  switch (handle.properties.editHandleType) {
    case 'existing':
      return DEFAULT_EDITING_EXISTING_POINT_COLOR;

    case 'snap-source':
      return DEFAULT_EDITING_SNAP_POINT_COLOR;

    case 'intermediate':
    default:
      return DEFAULT_EDITING_INTERMEDIATE_POINT_COLOR;
  }
}

function getEditHandleOutlineColor(handle) {
  return DEFAULT_EDITING_POINT_OUTLINE_COLOR;
}

function getEditHandleRadius(handle) {
  switch (handle.properties.editHandleType) {
    case 'existing':
      return DEFAULT_EDITING_EXISTING_POINT_RADIUS;

    case 'snap':
      return DEFAULT_EDITING_SNAP_POINT_RADIUS;

    case 'intermediate':
    default:
      return DEFAULT_EDITING_INTERMEDIATE_POINT_RADIUS;
  }
}

var defaultProps = {
  mode: DEFAULT_EDIT_MODE,
  // Edit and interaction events
  onEdit: function onEdit() {},
  pickable: true,
  pickingRadius: 10,
  pickingDepth: 5,
  fp64: false,
  filled: true,
  stroked: true,
  lineWidthScale: _constants.PROJECTED_PIXEL_SIZE_MULTIPLIER,
  lineWidthMinPixels: 1,
  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,
  pickingLineWidthExtraPixels: 0,
  lineWidthUnits: 'pixels',
  lineJointRounded: false,
  lineCapRounded: false,
  lineMiterLimit: 4,
  pointRadiusScale: 1,
  pointRadiusMinPixels: 2,
  pointRadiusMaxPixels: Number.MAX_SAFE_INTEGER,
  getLineColor: function getLineColor(feature, isSelected, mode) {
    return isSelected ? DEFAULT_SELECTED_LINE_COLOR : DEFAULT_LINE_COLOR;
  },
  getFillColor: function getFillColor(feature, isSelected, mode) {
    return isSelected ? DEFAULT_SELECTED_FILL_COLOR : DEFAULT_FILL_COLOR;
  },
  getRadius: function getRadius(f) {
    return f && f.properties && f.properties.radius || f && f.properties && f.properties.size || 1;
  },
  getLineWidth: function getLineWidth(f) {
    return f && f.properties && f.properties.lineWidth || 3;
  },
  // Tentative feature rendering
  getTentativeLineColor: function getTentativeLineColor(f) {
    return DEFAULT_TENTATIVE_LINE_COLOR;
  },
  getTentativeFillColor: function getTentativeFillColor(f) {
    return DEFAULT_TENTATIVE_FILL_COLOR;
  },
  getTentativeLineWidth: function getTentativeLineWidth(f) {
    return f && f.properties && f.properties.lineWidth || 3;
  },
  editHandleType: 'point',
  // point handles
  editHandlePointRadiusScale: 1,
  editHandlePointOutline: true,
  editHandlePointStrokeWidth: 2,
  editHandlePointRadiusUnits: 'pixels',
  editHandlePointRadiusMinPixels: 4,
  editHandlePointRadiusMaxPixels: 8,
  getEditHandlePointColor: getEditHandleColor,
  getEditHandlePointOutlineColor: getEditHandleOutlineColor,
  getEditHandlePointRadius: getEditHandleRadius,
  // icon handles
  editHandleIconAtlas: null,
  editHandleIconMapping: null,
  editHandleIconSizeScale: 1,
  editHandleIconSizeUnits: 'pixels',
  getEditHandleIcon: function getEditHandleIcon(handle) {
    return handle.properties.editHandleType;
  },
  getEditHandleIconSize: 10,
  getEditHandleIconColor: getEditHandleColor,
  getEditHandleIconAngle: 0,
  // misc
  billboard: true
}; // Mapping of mode name to mode class (for legacy purposes)

var modeNameMapping = {
  view: _editModes.ViewMode,
  // Alter modes
  modify: _editModes.ModifyMode,
  translate: new _editModes.SnappableMode(new _editModes.TranslateMode()),
  transform: new _editModes.SnappableMode(new _editModes.TransformMode()),
  scale: _editModes.ScaleMode,
  rotate: _editModes.RotateMode,
  duplicate: _editModes.DuplicateMode,
  split: _editModes.SplitPolygonMode,
  extrude: _editModes.ExtrudeMode,
  elevation: _editModes.ElevationMode,
  // Draw modes
  drawPoint: _editModes.DrawPointMode,
  drawLineString: _editModes.DrawLineStringMode,
  drawPolygon: _editModes.DrawPolygonMode,
  drawRectangle: _editModes.DrawRectangleMode,
  drawSquare: _editModes.DrawSquareMode,
  drawRectangleFromCenter: _editModes.DrawRectangleFromCenterMode,
  drawSquareFromCenter: _editModes.DrawSquareFromCenterMode,
  drawCircleFromCenter: _editModes.DrawCircleFromCenterMode,
  drawCircleByBoundingBox: _editModes.DrawCircleByDiameterMode,
  drawEllipseByBoundingBox: _editModes.DrawEllipseByBoundingBoxMode,
  drawRectangleUsing3Points: _editModes.DrawRectangleUsingThreePointsMode,
  drawEllipseUsing3Points: _editModes.DrawEllipseUsingThreePointsMode,
  draw90DegreePolygon: _editModes.Draw90DegreePolygonMode,
  drawPolygonByDragging: _editModes.DrawPolygonByDraggingMode
}; // type State = {
//   mode: GeoJsonEditMode,
//   tentativeFeature: ?Feature,
//   editHandles: any[],
//   selectedFeatures: Feature[]
// };

var EditableGeoJsonLayer = /*#__PURE__*/function (_EditableLayer) {
  _inherits(EditableGeoJsonLayer, _EditableLayer);

  var _super = _createSuper(EditableGeoJsonLayer);

  function EditableGeoJsonLayer() {
    _classCallCheck(this, EditableGeoJsonLayer);

    return _super.apply(this, arguments);
  }

  _createClass(EditableGeoJsonLayer, [{
    key: "renderLayers",
    // setState: ($Shape<State>) => void;
    value: function renderLayers() {
      var subLayerProps = this.getSubLayerProps({
        id: 'geojson',
        // Proxy most GeoJsonLayer props as-is
        data: this.props.data,
        fp64: this.props.fp64,
        filled: this.props.filled,
        stroked: this.props.stroked,
        lineWidthScale: this.props.lineWidthScale,
        lineWidthMinPixels: this.props.lineWidthMinPixels,
        lineWidthMaxPixels: this.props.lineWidthMaxPixels,
        lineWidthUnits: this.props.lineWidthUnits,
        lineJointRounded: this.props.lineJointRounded,
        lineCapRounded: this.props.lineCapRounded,
        lineMiterLimit: this.props.lineMiterLimit,
        pointRadiusScale: this.props.pointRadiusScale,
        pointRadiusMinPixels: this.props.pointRadiusMinPixels,
        pointRadiusMaxPixels: this.props.pointRadiusMaxPixels,
        getLineColor: this.selectionAwareAccessor(this.props.getLineColor),
        getFillColor: this.selectionAwareAccessor(this.props.getFillColor),
        getPointRadius: this.selectionAwareAccessor(this.props.getRadius),
        getLineWidth: this.selectionAwareAccessor(this.props.getLineWidth),
        _subLayerProps: {
          linestrings: {
            billboard: this.props.billboard,
            updateTriggers: {
              // required to update dashed array attribute
              all: [this.props.selectedFeatureIndexes, this.props.mode]
            }
          },
          'polygons-stroke': {
            billboard: this.props.billboard,
            pickingLineWidthExtraPixels: this.props.pickingLineWidthExtraPixels,
            type: _editablePathLayer["default"],
            updateTriggers: {
              // required to update dashed array attribute
              all: [this.props.selectedFeatureIndexes, this.props.mode]
            }
          }
        },
        updateTriggers: {
          getLineColor: [this.props.selectedFeatureIndexes, this.props.mode],
          getFillColor: [this.props.selectedFeatureIndexes, this.props.mode],
          getPointRadius: [this.props.selectedFeatureIndexes, this.props.mode],
          getLineWidth: [this.props.selectedFeatureIndexes, this.props.mode]
        }
      });
      var layers = [new _layers.GeoJsonLayer(subLayerProps)];
      layers = layers.concat(this.createGuidesLayers(), this.createTooltipsLayers());
      return layers;
    }
  }, {
    key: "initializeState",
    value: function initializeState() {
      _get(_getPrototypeOf(EditableGeoJsonLayer.prototype), "initializeState", this).call(this);

      this.setState({
        selectedFeatures: [],
        editHandles: []
      });
    } // TODO: is this the best way to properly update state from an outside event handler?

  }, {
    key: "shouldUpdateState",
    value: function shouldUpdateState(opts) {
      // console.log(
      //   'shouldUpdateState',
      //   opts.changeFlags.propsOrDataChanged,
      //   opts.changeFlags.stateChanged
      // );
      return _get(_getPrototypeOf(EditableGeoJsonLayer.prototype), "shouldUpdateState", this).call(this, opts) || opts.changeFlags.stateChanged;
    }
  }, {
    key: "updateState",
    value: function updateState(_ref) {
      var props = _ref.props,
          oldProps = _ref.oldProps,
          changeFlags = _ref.changeFlags,
          context = _ref.context;

      _get(_getPrototypeOf(EditableGeoJsonLayer.prototype), "updateState", this).call(this, {
        oldProps: oldProps,
        props: props,
        changeFlags: changeFlags,
        context: context
      });

      if (changeFlags.propsOrDataChanged) {
        var modePropChanged = Object.keys(oldProps).length === 0 || props.mode !== oldProps.mode;

        if (modePropChanged) {
          var _mode;

          if (typeof props.mode === 'function') {
            // They passed a constructor/class, so new it up
            var ModeConstructor = props.mode;
            _mode = new ModeConstructor();
          } else if (typeof props.mode === 'string') {
            // Lookup the mode based on its name (for backwards compatibility)
            _mode = modeNameMapping[props.mode]; // eslint-disable-next-line no-console

            console.warn("Deprecated use of passing `mode` as a string. Pass the mode's class constructor instead.");
          } else {
            // Should be an instance of EditMode in this case
            _mode = props.mode;
          }

          if (!_mode) {
            console.warn("No mode configured for ".concat(String(props.mode))); // eslint-disable-line no-console,no-undef
            // Use default mode

            _mode = new DEFAULT_EDIT_MODE();
          }

          if (_mode !== this.state.mode) {
            this.setState({
              mode: _mode,
              cursor: null
            });
          }
        }
      }

      var selectedFeatures = [];

      if (Array.isArray(props.selectedFeatureIndexes)) {
        // TODO: needs improved testing, i.e. checking for duplicates, NaNs, out of range numbers, ...
        selectedFeatures = props.selectedFeatureIndexes.map(function (elem) {
          return props.data.features[elem];
        });
      }

      this.setState({
        selectedFeatures: selectedFeatures
      });
    }
  }, {
    key: "getModeProps",
    value: function getModeProps(props) {
      var _this = this;

      return {
        modeConfig: props.modeConfig,
        data: props.data,
        selectedIndexes: props.selectedFeatureIndexes,
        lastPointerMoveEvent: this.state.lastPointerMoveEvent,
        cursor: this.state.cursor,
        onEdit: function onEdit(editAction) {
          // Force a re-render
          // This supports double-click where we need to ensure that there's a re-render between the two clicks
          // even though the data wasn't changed, just the internal tentative feature.
          _this.setNeedsUpdate();

          props.onEdit(editAction);
        },
        onUpdateCursor: function onUpdateCursor(cursor) {
          _this.setState({
            cursor: cursor
          });
        }
      };
    }
  }, {
    key: "selectionAwareAccessor",
    value: function selectionAwareAccessor(accessor) {
      var _this2 = this;

      if (typeof accessor !== 'function') {
        return accessor;
      }

      return function (feature) {
        return accessor(feature, _this2.isFeatureSelected(feature), _this2.props.mode);
      };
    }
  }, {
    key: "isFeatureSelected",
    value: function isFeatureSelected(feature) {
      if (!this.props.data || !this.props.selectedFeatureIndexes) {
        return false;
      }

      if (!this.props.selectedFeatureIndexes.length) {
        return false;
      }

      var featureIndex = this.props.data.features.indexOf(feature);
      return this.props.selectedFeatureIndexes.includes(featureIndex);
    }
  }, {
    key: "getPickingInfo",
    value: function getPickingInfo(_ref2) {
      var info = _ref2.info,
          sourceLayer = _ref2.sourceLayer;

      if (sourceLayer.id.endsWith('guides')) {
        // If user is picking an editing handle, add additional data to the info
        info.isGuide = true;
      }

      return info;
    }
  }, {
    key: "_updateAutoHighlight",
    value: function _updateAutoHighlight(info) {
      // Extra handling for guides
      if (info === null || info === void 0 ? void 0 : info.sourceLayer) {
        if (info.isGuide) {
          var _iterator = _createForOfIteratorHelper(info.sourceLayer.getSubLayers()),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var layer = _step.value;
              layer.updateAutoHighlight(info);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        } else {
          info.sourceLayer.updateAutoHighlight(info);
        }
      }
    }
  }, {
    key: "createGuidesLayers",
    value: function createGuidesLayers() {
      var mode = this.getActiveMode();
      var guides = mode.getGuides(this.getModeProps(this.props));

      if (!guides || !guides.features.length) {
        return [];
      }

      var subLayerProps = {
        linestrings: {
          billboard: this.props.billboard,
          autoHighlight: false
        },
        'polygons-fill': {
          autoHighlight: false
        },
        'polygons-stroke': {
          billboard: this.props.billboard
        }
      };

      if (this.props.editHandleType === 'icon') {
        subLayerProps['points-icon'] = {
          type: _layers.IconLayer,
          iconAtlas: this.props.editHandleIconAtlas,
          iconMapping: this.props.editHandleIconMapping,
          sizeUnits: this.props.editHandleIconSizeUnits,
          sizeScale: this.props.editHandleIconSizeScale,
          getIcon: guideAccessor(this.props.getEditHandleIcon),
          getSize: guideAccessor(this.props.getEditHandleIconSize),
          getColor: guideAccessor(this.props.getEditHandleIconColor),
          getAngle: guideAccessor(this.props.getEditHandleIconAngle)
        };
      } else {
        subLayerProps['points-circle'] = {
          type: _layers.ScatterplotLayer,
          radiusScale: this.props.editHandlePointRadiusScale,
          stroked: this.props.editHandlePointOutline,
          getLineWidth: this.props.editHandlePointStrokeWidth,
          radiusUnits: this.props.editHandlePointRadiusUnits,
          radiusMinPixels: this.props.editHandlePointRadiusMinPixels,
          radiusMaxPixels: this.props.editHandlePointRadiusMaxPixels,
          getRadius: guideAccessor(this.props.getEditHandlePointRadius),
          getFillColor: guideAccessor(this.props.getEditHandlePointColor),
          getLineColor: guideAccessor(this.props.getEditHandlePointOutlineColor)
        };
      }

      var layer = new _layers.GeoJsonLayer(this.getSubLayerProps({
        id: "guides",
        data: guides,
        fp64: this.props.fp64,
        _subLayerProps: subLayerProps,
        lineWidthScale: this.props.lineWidthScale,
        lineWidthMinPixels: this.props.lineWidthMinPixels,
        lineWidthMaxPixels: this.props.lineWidthMaxPixels,
        lineWidthUnits: this.props.lineWidthUnits,
        lineJointRounded: this.props.lineJointRounded,
        lineCapRounded: this.props.lineCapRounded,
        lineMiterLimit: this.props.lineMiterLimit,
        getLineColor: guideAccessor(this.props.getTentativeLineColor),
        getLineWidth: guideAccessor(this.props.getTentativeLineWidth),
        getFillColor: guideAccessor(this.props.getTentativeFillColor),
        pointType: this.props.editHandleType === 'icon' ? 'icon' : 'circle',
        iconAtlas: this.props.editHandleIconAtlas
      }));
      return [layer];
    }
  }, {
    key: "createTooltipsLayers",
    value: function createTooltipsLayers() {
      var mode = this.getActiveMode();
      var tooltips = mode.getTooltips(this.getModeProps(this.props));
      var layer = new _layers.TextLayer(_objectSpread({
        getSize: DEFAULT_TOOLTIP_FONT_SIZE
      }, this.getSubLayerProps({
        id: "tooltips",
        data: tooltips
      })));
      return [layer];
    }
  }, {
    key: "onLayerClick",
    value: function onLayerClick(event) {
      this.getActiveMode().handleClick(event, this.getModeProps(this.props));
    }
  }, {
    key: "onLayerKeyUp",
    value: function onLayerKeyUp(event) {
      this.getActiveMode().handleKeyUp(event, this.getModeProps(this.props));
    }
  }, {
    key: "onStartDragging",
    value: function onStartDragging(event) {
      this.getActiveMode().handleStartDragging(event, this.getModeProps(this.props));
    }
  }, {
    key: "onDragging",
    value: function onDragging(event) {
      this.getActiveMode().handleDragging(event, this.getModeProps(this.props));
    }
  }, {
    key: "onStopDragging",
    value: function onStopDragging(event) {
      this.getActiveMode().handleStopDragging(event, this.getModeProps(this.props));
    }
  }, {
    key: "onPointerMove",
    value: function onPointerMove(event) {
      this.setState({
        lastPointerMoveEvent: event
      });
      this.getActiveMode().handlePointerMove(event, this.getModeProps(this.props));
    }
  }, {
    key: "getCursor",
    value: function getCursor(_ref3) {
      var isDragging = _ref3.isDragging;

      if (this.state === null || this.state === undefined) {
        // Layer in 'Awaiting state'
        return null;
      }

      var cursor = this.state.cursor;

      if (!cursor) {
        // default cursor
        cursor = isDragging ? 'grabbing' : 'grab';
      }

      return cursor;
    }
  }, {
    key: "getActiveMode",
    value: function getActiveMode() {
      return this.state.mode;
    }
  }]);

  return EditableGeoJsonLayer;
}(_editableLayer["default"]);

exports["default"] = EditableGeoJsonLayer;

_defineProperty(EditableGeoJsonLayer, "layerName", 'EditableGeoJsonLayer');

_defineProperty(EditableGeoJsonLayer, "defaultProps", defaultProps);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sYXllcnMvZWRpdGFibGUtZ2VvanNvbi1sYXllci50cyJdLCJuYW1lcyI6WyJERUZBVUxUX0xJTkVfQ09MT1IiLCJERUZBVUxUX0ZJTExfQ09MT1IiLCJERUZBVUxUX1NFTEVDVEVEX0xJTkVfQ09MT1IiLCJERUZBVUxUX1NFTEVDVEVEX0ZJTExfQ09MT1IiLCJERUZBVUxUX1RFTlRBVElWRV9MSU5FX0NPTE9SIiwiREVGQVVMVF9URU5UQVRJVkVfRklMTF9DT0xPUiIsIkRFRkFVTFRfRURJVElOR19FWElTVElOR19QT0lOVF9DT0xPUiIsIkRFRkFVTFRfRURJVElOR19JTlRFUk1FRElBVEVfUE9JTlRfQ09MT1IiLCJERUZBVUxUX0VESVRJTkdfU05BUF9QT0lOVF9DT0xPUiIsIkRFRkFVTFRfRURJVElOR19QT0lOVF9PVVRMSU5FX0NPTE9SIiwiREVGQVVMVF9FRElUSU5HX0VYSVNUSU5HX1BPSU5UX1JBRElVUyIsIkRFRkFVTFRfRURJVElOR19JTlRFUk1FRElBVEVfUE9JTlRfUkFESVVTIiwiREVGQVVMVF9FRElUSU5HX1NOQVBfUE9JTlRfUkFESVVTIiwiREVGQVVMVF9UT09MVElQX0ZPTlRfU0laRSIsIlBST0pFQ1RFRF9QSVhFTF9TSVpFX01VTFRJUExJRVIiLCJERUZBVUxUX0VESVRfTU9ERSIsIkRyYXdQb2x5Z29uTW9kZSIsImd1aWRlQWNjZXNzb3IiLCJhY2Nlc3NvciIsImd1aWRlTWF5YmVXcmFwcGVkIiwidW53cmFwR3VpZGUiLCJfX3NvdXJjZSIsIm9iamVjdCIsInNvdXJjZUZlYXR1cmUiLCJmZWF0dXJlIiwiZ2V0RWRpdEhhbmRsZUNvbG9yIiwiaGFuZGxlIiwicHJvcGVydGllcyIsImVkaXRIYW5kbGVUeXBlIiwiZ2V0RWRpdEhhbmRsZU91dGxpbmVDb2xvciIsImdldEVkaXRIYW5kbGVSYWRpdXMiLCJkZWZhdWx0UHJvcHMiLCJtb2RlIiwib25FZGl0IiwicGlja2FibGUiLCJwaWNraW5nUmFkaXVzIiwicGlja2luZ0RlcHRoIiwiZnA2NCIsImZpbGxlZCIsInN0cm9rZWQiLCJsaW5lV2lkdGhTY2FsZSIsImxpbmVXaWR0aE1pblBpeGVscyIsImxpbmVXaWR0aE1heFBpeGVscyIsIk51bWJlciIsIk1BWF9TQUZFX0lOVEVHRVIiLCJwaWNraW5nTGluZVdpZHRoRXh0cmFQaXhlbHMiLCJsaW5lV2lkdGhVbml0cyIsImxpbmVKb2ludFJvdW5kZWQiLCJsaW5lQ2FwUm91bmRlZCIsImxpbmVNaXRlckxpbWl0IiwicG9pbnRSYWRpdXNTY2FsZSIsInBvaW50UmFkaXVzTWluUGl4ZWxzIiwicG9pbnRSYWRpdXNNYXhQaXhlbHMiLCJnZXRMaW5lQ29sb3IiLCJpc1NlbGVjdGVkIiwiZ2V0RmlsbENvbG9yIiwiZ2V0UmFkaXVzIiwiZiIsInJhZGl1cyIsInNpemUiLCJnZXRMaW5lV2lkdGgiLCJsaW5lV2lkdGgiLCJnZXRUZW50YXRpdmVMaW5lQ29sb3IiLCJnZXRUZW50YXRpdmVGaWxsQ29sb3IiLCJnZXRUZW50YXRpdmVMaW5lV2lkdGgiLCJlZGl0SGFuZGxlUG9pbnRSYWRpdXNTY2FsZSIsImVkaXRIYW5kbGVQb2ludE91dGxpbmUiLCJlZGl0SGFuZGxlUG9pbnRTdHJva2VXaWR0aCIsImVkaXRIYW5kbGVQb2ludFJhZGl1c1VuaXRzIiwiZWRpdEhhbmRsZVBvaW50UmFkaXVzTWluUGl4ZWxzIiwiZWRpdEhhbmRsZVBvaW50UmFkaXVzTWF4UGl4ZWxzIiwiZ2V0RWRpdEhhbmRsZVBvaW50Q29sb3IiLCJnZXRFZGl0SGFuZGxlUG9pbnRPdXRsaW5lQ29sb3IiLCJnZXRFZGl0SGFuZGxlUG9pbnRSYWRpdXMiLCJlZGl0SGFuZGxlSWNvbkF0bGFzIiwiZWRpdEhhbmRsZUljb25NYXBwaW5nIiwiZWRpdEhhbmRsZUljb25TaXplU2NhbGUiLCJlZGl0SGFuZGxlSWNvblNpemVVbml0cyIsImdldEVkaXRIYW5kbGVJY29uIiwiZ2V0RWRpdEhhbmRsZUljb25TaXplIiwiZ2V0RWRpdEhhbmRsZUljb25Db2xvciIsImdldEVkaXRIYW5kbGVJY29uQW5nbGUiLCJiaWxsYm9hcmQiLCJtb2RlTmFtZU1hcHBpbmciLCJ2aWV3IiwiVmlld01vZGUiLCJtb2RpZnkiLCJNb2RpZnlNb2RlIiwidHJhbnNsYXRlIiwiU25hcHBhYmxlTW9kZSIsIlRyYW5zbGF0ZU1vZGUiLCJ0cmFuc2Zvcm0iLCJUcmFuc2Zvcm1Nb2RlIiwic2NhbGUiLCJTY2FsZU1vZGUiLCJyb3RhdGUiLCJSb3RhdGVNb2RlIiwiZHVwbGljYXRlIiwiRHVwbGljYXRlTW9kZSIsInNwbGl0IiwiU3BsaXRQb2x5Z29uTW9kZSIsImV4dHJ1ZGUiLCJFeHRydWRlTW9kZSIsImVsZXZhdGlvbiIsIkVsZXZhdGlvbk1vZGUiLCJkcmF3UG9pbnQiLCJEcmF3UG9pbnRNb2RlIiwiZHJhd0xpbmVTdHJpbmciLCJEcmF3TGluZVN0cmluZ01vZGUiLCJkcmF3UG9seWdvbiIsImRyYXdSZWN0YW5nbGUiLCJEcmF3UmVjdGFuZ2xlTW9kZSIsImRyYXdTcXVhcmUiLCJEcmF3U3F1YXJlTW9kZSIsImRyYXdSZWN0YW5nbGVGcm9tQ2VudGVyIiwiRHJhd1JlY3RhbmdsZUZyb21DZW50ZXJNb2RlIiwiZHJhd1NxdWFyZUZyb21DZW50ZXIiLCJEcmF3U3F1YXJlRnJvbUNlbnRlck1vZGUiLCJkcmF3Q2lyY2xlRnJvbUNlbnRlciIsIkRyYXdDaXJjbGVGcm9tQ2VudGVyTW9kZSIsImRyYXdDaXJjbGVCeUJvdW5kaW5nQm94IiwiRHJhd0NpcmNsZUJ5RGlhbWV0ZXJNb2RlIiwiZHJhd0VsbGlwc2VCeUJvdW5kaW5nQm94IiwiRHJhd0VsbGlwc2VCeUJvdW5kaW5nQm94TW9kZSIsImRyYXdSZWN0YW5nbGVVc2luZzNQb2ludHMiLCJEcmF3UmVjdGFuZ2xlVXNpbmdUaHJlZVBvaW50c01vZGUiLCJkcmF3RWxsaXBzZVVzaW5nM1BvaW50cyIsIkRyYXdFbGxpcHNlVXNpbmdUaHJlZVBvaW50c01vZGUiLCJkcmF3OTBEZWdyZWVQb2x5Z29uIiwiRHJhdzkwRGVncmVlUG9seWdvbk1vZGUiLCJkcmF3UG9seWdvbkJ5RHJhZ2dpbmciLCJEcmF3UG9seWdvbkJ5RHJhZ2dpbmdNb2RlIiwiRWRpdGFibGVHZW9Kc29uTGF5ZXIiLCJzdWJMYXllclByb3BzIiwiZ2V0U3ViTGF5ZXJQcm9wcyIsImlkIiwiZGF0YSIsInByb3BzIiwic2VsZWN0aW9uQXdhcmVBY2Nlc3NvciIsImdldFBvaW50UmFkaXVzIiwiX3N1YkxheWVyUHJvcHMiLCJsaW5lc3RyaW5ncyIsInVwZGF0ZVRyaWdnZXJzIiwiYWxsIiwic2VsZWN0ZWRGZWF0dXJlSW5kZXhlcyIsInR5cGUiLCJFZGl0YWJsZVBhdGhMYXllciIsImxheWVycyIsIkdlb0pzb25MYXllciIsImNvbmNhdCIsImNyZWF0ZUd1aWRlc0xheWVycyIsImNyZWF0ZVRvb2x0aXBzTGF5ZXJzIiwic2V0U3RhdGUiLCJzZWxlY3RlZEZlYXR1cmVzIiwiZWRpdEhhbmRsZXMiLCJvcHRzIiwiY2hhbmdlRmxhZ3MiLCJzdGF0ZUNoYW5nZWQiLCJvbGRQcm9wcyIsImNvbnRleHQiLCJwcm9wc09yRGF0YUNoYW5nZWQiLCJtb2RlUHJvcENoYW5nZWQiLCJPYmplY3QiLCJrZXlzIiwibGVuZ3RoIiwiTW9kZUNvbnN0cnVjdG9yIiwiY29uc29sZSIsIndhcm4iLCJTdHJpbmciLCJzdGF0ZSIsImN1cnNvciIsIkFycmF5IiwiaXNBcnJheSIsIm1hcCIsImVsZW0iLCJmZWF0dXJlcyIsIm1vZGVDb25maWciLCJzZWxlY3RlZEluZGV4ZXMiLCJsYXN0UG9pbnRlck1vdmVFdmVudCIsImVkaXRBY3Rpb24iLCJzZXROZWVkc1VwZGF0ZSIsIm9uVXBkYXRlQ3Vyc29yIiwiaXNGZWF0dXJlU2VsZWN0ZWQiLCJmZWF0dXJlSW5kZXgiLCJpbmRleE9mIiwiaW5jbHVkZXMiLCJpbmZvIiwic291cmNlTGF5ZXIiLCJlbmRzV2l0aCIsImlzR3VpZGUiLCJnZXRTdWJMYXllcnMiLCJsYXllciIsInVwZGF0ZUF1dG9IaWdobGlnaHQiLCJnZXRBY3RpdmVNb2RlIiwiZ3VpZGVzIiwiZ2V0R3VpZGVzIiwiZ2V0TW9kZVByb3BzIiwiYXV0b0hpZ2hsaWdodCIsIkljb25MYXllciIsImljb25BdGxhcyIsImljb25NYXBwaW5nIiwic2l6ZVVuaXRzIiwic2l6ZVNjYWxlIiwiZ2V0SWNvbiIsImdldFNpemUiLCJnZXRDb2xvciIsImdldEFuZ2xlIiwiU2NhdHRlcnBsb3RMYXllciIsInJhZGl1c1NjYWxlIiwicmFkaXVzVW5pdHMiLCJyYWRpdXNNaW5QaXhlbHMiLCJyYWRpdXNNYXhQaXhlbHMiLCJwb2ludFR5cGUiLCJ0b29sdGlwcyIsImdldFRvb2x0aXBzIiwiVGV4dExheWVyIiwiZXZlbnQiLCJoYW5kbGVDbGljayIsImhhbmRsZUtleVVwIiwiaGFuZGxlU3RhcnREcmFnZ2luZyIsImhhbmRsZURyYWdnaW5nIiwiaGFuZGxlU3RvcERyYWdnaW5nIiwiaGFuZGxlUG9pbnRlck1vdmUiLCJpc0RyYWdnaW5nIiwidW5kZWZpbmVkIiwiRWRpdGFibGVMYXllciJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUdBOztBQUVBOztBQW9DQTs7QUFFQTs7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUEsSUFBTUEsa0JBQTZCLEdBQUcsQ0FBQyxHQUFELEVBQU0sR0FBTixFQUFXLEdBQVgsRUFBZ0IsSUFBaEIsQ0FBdEM7QUFDQSxJQUFNQyxrQkFBNkIsR0FBRyxDQUFDLEdBQUQsRUFBTSxHQUFOLEVBQVcsR0FBWCxFQUFnQixJQUFoQixDQUF0QztBQUNBLElBQU1DLDJCQUFzQyxHQUFHLENBQUMsR0FBRCxFQUFNLEdBQU4sRUFBVyxHQUFYLEVBQWdCLElBQWhCLENBQS9DO0FBQ0EsSUFBTUMsMkJBQXNDLEdBQUcsQ0FBQyxHQUFELEVBQU0sR0FBTixFQUFXLElBQVgsRUFBaUIsSUFBakIsQ0FBL0M7QUFDQSxJQUFNQyw0QkFBdUMsR0FBRyxDQUFDLElBQUQsRUFBTyxJQUFQLEVBQWEsSUFBYixFQUFtQixJQUFuQixDQUFoRDtBQUNBLElBQU1DLDRCQUF1QyxHQUFHLENBQUMsSUFBRCxF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QUEvQztBQUNEOzs7a0NBRWErRSxLLEVBQXlCO0FBQ3JDLFdBQUtoRSxRQUFMLENBQWM7QUFBRTBCLFFBQUFBLG9CQUFvQixFQUFFc0M7QUFBeEIsT0FBZDtBQUNBLFdBQUt2QixhQUFMLEdBQXFCNkIsaUJBQXJCLENBQXVDTixLQUF2QyxFQUE4QyxLQUFLcEIsWUFBTCxDQUFrQixLQUFLM0QsS0FBdkIsQ0FBOUM7QUFDRDs7O3FDQUVrRDtBQUFBLFVBQXZDc0YsVUFBdUMsU0FBdkNBLFVBQXVDOztBQUNqRCxVQUFJLEtBQUt0RCxLQUFMLEtBQWUsSUFBZixJQUF1QixLQUFLQSxLQUFMLEtBQWV1RCxTQUExQyxFQUFxRDtBQUNuRDtBQUNBLGVBQU8sSUFBUDtBQUNEOztBQUpnRCxVQU0zQ3RELE1BTjJDLEdBTWhDLEtBQUtELEtBTjJCLENBTTNDQyxNQU4yQzs7QUFPakQsVUFBSSxDQUFDQSxNQUFMLEVBQWE7QUFDWDtBQUNBQSxRQUFBQSxNQUFNLEdBQUdxRCxVQUFVLEdBQUcsVUFBSCxHQUFnQixNQUFuQztBQUNEOztBQUNELGFBQU9yRCxNQUFQO0FBQ0Q7OztvQ0FFb0M7QUFDbkMsYUFBTyxLQUFLRCxLQUFMLENBQVd6SSxJQUFsQjtBQUNEOzs7O0VBelUrQ2lNLHlCOzs7O2dCQUE3QjdGLG9CLGVBSUEsc0I7O2dCQUpBQSxvQixrQkFLR3JHLFkiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZW52IGJyb3dzZXIgKi9cblxuaW1wb3J0IHsgUkdCQUNvbG9yIH0gZnJvbSAnQGRlY2suZ2wvY29yZSc7XG5pbXBvcnQgeyBHZW9Kc29uTGF5ZXIsIFNjYXR0ZXJwbG90TGF5ZXIsIEljb25MYXllciwgVGV4dExheWVyIH0gZnJvbSAnQGRlY2suZ2wvbGF5ZXJzJztcblxuaW1wb3J0IHtcbiAgVmlld01vZGUsXG4gIE1vZGlmeU1vZGUsXG4gIFRyYW5zbGF0ZU1vZGUsXG4gIFNjYWxlTW9kZSxcbiAgUm90YXRlTW9kZSxcbiAgRHVwbGljYXRlTW9kZSxcbiAgU3BsaXRQb2x5Z29uTW9kZSxcbiAgRXh0cnVkZU1vZGUsXG4gIEVsZXZhdGlvbk1vZGUsXG4gIERyYXdQb2ludE1vZGUsXG4gIERyYXdMaW5lU3RyaW5nTW9kZSxcbiAgRHJhd1BvbHlnb25Nb2RlLFxuICBEcmF3UmVjdGFuZ2xlTW9kZSxcbiAgRHJhd1NxdWFyZU1vZGUsXG4gIERyYXdSZWN0YW5nbGVGcm9tQ2VudGVyTW9kZSxcbiAgRHJhd1NxdWFyZUZyb21DZW50ZXJNb2RlLFxuICBEcmF3Q2lyY2xlRnJvbUNlbnRlck1vZGUsXG4gIERyYXdDaXJjbGVCeURpYW1ldGVyTW9kZSxcbiAgRHJhd0VsbGlwc2VCeUJvdW5kaW5nQm94TW9kZSxcbiAgRHJhd1JlY3RhbmdsZVVzaW5nVGhyZWVQb2ludHNNb2RlLFxuICBEcmF3RWxsaXBzZVVzaW5nVGhyZWVQb2ludHNNb2RlLFxuICBEcmF3OTBEZWdyZWVQb2x5Z29uTW9kZSxcbiAgRHJhd1BvbHlnb25CeURyYWdnaW5nTW9kZSxcbiAgU25hcHBhYmxlTW9kZSxcbiAgVHJhbnNmb3JtTW9kZSxcbiAgRWRpdEFjdGlvbixcbiAgQ2xpY2tFdmVudCxcbiAgU3RhcnREcmFnZ2luZ0V2ZW50LFxuICBTdG9wRHJhZ2dpbmdFdmVudCxcbiAgRHJhZ2dpbmdFdmVudCxcbiAgUG9pbnRlck1vdmVFdmVudCxcbiAgR2VvSnNvbkVkaXRNb2RlVHlwZSxcbiAgRmVhdHVyZUNvbGxlY3Rpb24sXG59IGZyb20gJ0BuZWJ1bGEuZ2wvZWRpdC1tb2Rlcyc7XG5cbmltcG9ydCB7IFBST0pFQ1RFRF9QSVhFTF9TSVpFX01VTFRJUExJRVIgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuXG5pbXBvcnQgRWRpdGFibGVMYXllciwgeyBFZGl0YWJsZUxheWVyUHJvcHMgfSBmcm9tICcuL2VkaXRhYmxlLWxheWVyJztcbmltcG9ydCBFZGl0YWJsZVBhdGhMYXllciBmcm9tICcuL2VkaXRhYmxlLXBhdGgtbGF5ZXInO1xuXG5jb25zdCBERUZBVUxUX0xJTkVfQ09MT1I6IFJHQkFDb2xvciA9IFsweDAsIDB4MCwgMHgwLCAweDk5XTtcbmNvbnN0IERFRkFVTFRfRklMTF9DT0xPUjogUkdCQUNvbG9yID0gWzB4MCwgMHgwLCAweDAsIDB4OTBdO1xuY29uc3QgREVGQVVMVF9TRUxFQ1RFRF9MSU5FX0NPTE9SOiBSR0JBQ29sb3IgPSBbMHgwLCAweDAsIDB4MCwgMHhmZl07XG5jb25zdCBERUZBVUxUX1NFTEVDVEVEX0ZJTExfQ09MT1I6IFJHQkFDb2xvciA9IFsweDAsIDB4MCwgMHg5MCwgMHg5MF07XG5jb25zdCBERUZBVUxUX1RFTlRBVElWRV9MSU5FX0NPTE9SOiBSR0JBQ29sb3IgPSBbMHg5MCwgMHg5MCwgMHg5MCwgMHhmZl07XG5jb25zdCBERUZBVUxUX1RFTlRBVElWRV9GSUxMX0NPTE9SOiBSR0JBQ29sb3IgPSBbMHg5MCwgMHg5MCwgMHg5MCwgMHg5MF07XG5jb25zdCBERUZBVUxUX0VESVRJTkdfRVhJU1RJTkdfUE9JTlRfQ09MT1I6IFJHQkFDb2xvciA9IFsweGMwLCAweDAsIDB4MCwgMHhmZl07XG5jb25zdCBERUZBVUxUX0VESVRJTkdfSU5URVJNRURJQVRFX1BPSU5UX0NPTE9SOiBSR0JBQ29sb3IgPSBbMHgwLCAweDAsIDB4MCwgMHg4MF07XG5jb25zdCBERUZBVUxUX0VESVRJTkdfU05BUF9QT0lOVF9DT0xPUjogUkdCQUNvbG9yID0gWzB4N2MsIDB4MDAsIDB4YzAsIDB4ZmZdO1xuY29uc3QgREVGQVVMVF9FRElUSU5HX1BPSU5UX09VVExJTkVfQ09MT1I6IFJHQkFDb2xvciA9IFsweGZmLCAweGZmLCAweGZmLCAweGZmXTtcbmNvbnN0IERFRkFVTFRfRURJVElOR19FWElTVElOR19QT0lOVF9SQURJVVMgPSA1O1xuY29uc3QgREVGQVVMVF9FRElUSU5HX0lOVEVSTUVESUFURV9QT0lOVF9SQURJVVMgPSAzO1xuY29uc3QgREVGQVVMVF9FRElUSU5HX1NOQVBfUE9JTlRfUkFESVVTID0gNztcbmNvbnN0IERFRkFVTFRfVE9PTFRJUF9GT05UX1NJWkUgPSAzMiAqIFBST0pFQ1RFRF9QSVhFTF9TSVpFX01VTFRJUExJRVI7XG5cbmNvbnN0IERFRkFVTFRfRURJVF9NT0RFID0gRHJhd1BvbHlnb25Nb2RlO1xuXG5mdW5jdGlvbiBndWlkZUFjY2Vzc29yKGFjY2Vzc29yKSB7XG4gIGlmICghYWNjZXNzb3IgfHwgdHlwZW9mIGFjY2Vzc29yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGFjY2Vzc29yO1xuICB9XG4gIHJldHVybiAoZ3VpZGVNYXliZVdyYXBwZWQpID0+IGFjY2Vzc29yKHVud3JhcEd1aWRlKGd1aWRlTWF5YmVXcmFwcGVkKSk7XG59XG5cbi8vIFRoZSBvYmplY3QgaGFuZGVkIHRvIHVzIGZyb20gZGVjay5nbCBpcyBkaWZmZXJlbnQgZGVwZW5kaW5nIG9uIHRoZSB2ZXJzaW9uIG9mIGRlY2suZ2wgdXNlZCwgdW53cmFwIGFzIG5lY2Vzc2FyeVxuZnVuY3Rpb24gdW53cmFwR3VpZGUoZ3VpZGVNYXliZVdyYXBwZWQpIHtcbiAgaWYgKGd1aWRlTWF5YmVXcmFwcGVkLl9fc291cmNlKSB7XG4gICAgcmV0dXJuIGd1aWRlTWF5YmVXcmFwcGVkLl9fc291cmNlLm9iamVjdDtcbiAgfSBlbHNlIGlmIChndWlkZU1heWJlV3JhcHBlZC5zb3VyY2VGZWF0dXJlKSB7XG4gICAgcmV0dXJuIGd1aWRlTWF5YmVXcmFwcGVkLnNvdXJjZUZlYXR1cmUuZmVhdHVyZTtcbiAgfVxuICAvLyBJdCBpcyBub3Qgd3JhcHBlZCwgcmV0dXJuIGFzIGlzXG4gIHJldHVybiBndWlkZU1heWJlV3JhcHBlZDtcbn1cblxuZnVuY3Rpb24gZ2V0RWRpdEhhbmRsZUNvbG9yKGhhbmRsZSkge1xuICBzd2l0Y2ggKGhhbmRsZS5wcm9wZXJ0aWVzLmVkaXRIYW5kbGVUeXBlKSB7XG4gICAgY2FzZSAnZXhpc3RpbmcnOlxuICAgICAgcmV0dXJuIERFRkFVTFRfRURJVElOR19FWElTVElOR19QT0lOVF9DT0xPUjtcbiAgICBjYXNlICdzbmFwLXNvdXJjZSc6XG4gICAgICByZXR1cm4gREVGQVVMVF9FRElUSU5HX1NOQVBfUE9JTlRfQ09MT1I7XG4gICAgY2FzZSAnaW50ZXJtZWRpYXRlJzpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIERFRkFVTFRfRURJVElOR19JTlRFUk1FRElBVEVfUE9JTlRfQ09MT1I7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RWRpdEhhbmRsZU91dGxpbmVDb2xvcihoYW5kbGUpIHtcbiAgcmV0dXJuIERFRkFVTFRfRURJVElOR19QT0lOVF9PVVRMSU5FX0NPTE9SO1xufVxuXG5mdW5jdGlvbiBnZXRFZGl0SGFuZGxlUmFkaXVzKGhhbmRsZSkge1xuICBzd2l0Y2ggKGhhbmRsZS5wcm9wZXJ0aWVzLmVkaXRIYW5kbGVUeXBlKSB7XG4gICAgY2FzZSAnZXhpc3RpbmcnOlxuICAgICAgcmV0dXJuIERFRkFVTFRfRURJVElOR19FWElTVElOR19QT0lOVF9SQURJVVM7XG4gICAgY2FzZSAnc25hcCc6XG4gICAgICByZXR1cm4gREVGQVVMVF9FRElUSU5HX1NOQVBfUE9JTlRfUkFESVVTO1xuICAgIGNhc2UgJ2ludGVybWVkaWF0ZSc6XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBERUZBVUxUX0VESVRJTkdfSU5URVJNRURJQVRFX1BPSU5UX1JBRElVUztcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEVkaXRhYmxlR2VvanNvbkxheWVyUHJvcHM8RD4gZXh0ZW5kcyBFZGl0YWJsZUxheWVyUHJvcHM8RD4ge1xuICBtb2RlPzogYW55O1xuICBtb2RlQ29uZmlnPzogYW55O1xuICBzZWxlY3RlZEZlYXR1cmVJbmRleGVzPzogbnVtYmVyW107XG4gIG9uRWRpdD86ICh1cGRhdGVkRGF0YT8sIGVkaXRUeXBlPzogc3RyaW5nLCBmZWF0dXJlSW5kZXhlcz86IG51bWJlcltdLCBlZGl0Q29udGV4dD8pID0+IHZvaWQ7XG5cbiAgcGlja2FibGU/OiBib29sZWFuO1xuICBwaWNraW5nUmFkaXVzPzogbnVtYmVyO1xuICBwaWNraW5nRGVwdGg/OiBudW1iZXI7XG4gIGZwNjQ/OiBib29sZWFuO1xuICBmaWxsZWQ/OiBib29sZWFuO1xuICBzdHJva2VkPzogYm9vbGVhbjtcbiAgbGluZVdpZHRoU2NhbGU/OiBudW1iZXI7XG4gIGxpbmVXaWR0aE1pblBpeGVscz86IG51bWJlcjtcbiAgbGluZVdpZHRoTWF4UGl4ZWxzPzogbnVtYmVyO1xuICBwaWNraW5nTGluZVdpZHRoRXh0cmFQaXhlbHM/OiBudW1iZXI7XG4gIGxpbmVXaWR0aFVuaXRzPzogc3RyaW5nO1xuICBsaW5lSm9pbnRSb3VuZGVkPzogYm9vbGVhbjtcbiAgbGluZUNhcFJvdW5kZWQ/OiBib29sZWFuO1xuICBsaW5lTWl0ZXJMaW1pdD86IG51bWJlcjtcbiAgcG9pbnRSYWRpdXNTY2FsZT86IG51bWJlcjtcbiAgcG9pbnRSYWRpdXNNaW5QaXhlbHM/OiBudW1iZXI7XG4gIHBvaW50UmFkaXVzTWF4UGl4ZWxzPzogbnVtYmVyO1xuXG4gIGdldExpbmVDb2xvcj86IFJHQkFDb2xvciB8ICgoZmVhdHVyZSwgaXNTZWxlY3RlZCwgbW9kZSkgPT4gUkdCQUNvbG9yKTtcbiAgZ2V0RmlsbENvbG9yPzogUkdCQUNvbG9yIHwgKChmZWF0dXJlLCBpc1NlbGVjdGVkLCBtb2RlKSA9PiBSR0JBQ29sb3IpO1xuICBnZXRSYWRpdXM/OiBudW1iZXIgfCAoKGYpID0+IG51bWJlcik7XG4gIGdldExpbmVXaWR0aD86IG51bWJlciB8ICgoZikgPT4gbnVtYmVyKTtcblxuICBnZXRUZW50YXRpdmVMaW5lQ29sb3I/OiBSR0JBQ29sb3IgfCAoKGZlYXR1cmUsIGlzU2VsZWN0ZWQsIG1vZGUpID0+IFJHQkFDb2xvcik7XG4gIGdldFRlbnRhdGl2ZUZpbGxDb2xvcj86IFJHQkFDb2xvciB8ICgoZmVhdHVyZSwgaXNTZWxlY3RlZCwgbW9kZSkgPT4gUkdCQUNvbG9yKTtcbiAgZ2V0VGVudGF0aXZlTGluZVdpZHRoPzogbnVtYmVyIHwgKChmKSA9PiBudW1iZXIpO1xuXG4gIGVkaXRIYW5kbGVUeXBlPzogc3RyaW5nO1xuXG4gIGVkaXRIYW5kbGVQb2ludFJhZGl1c1NjYWxlPzogbnVtYmVyO1xuICBlZGl0SGFuZGxlUG9pbnRPdXRsaW5lPzogYm9vbGVhbjtcbiAgZWRpdEhhbmRsZVBvaW50U3Ryb2tlV2lkdGg/OiBudW1iZXI7XG4gIGVkaXRIYW5kbGVQb2ludFJhZGl1c1VuaXRzPzogc3RyaW5nO1xuICBlZGl0SGFuZGxlUG9pbnRSYWRpdXNNaW5QaXhlbHM/OiBudW1iZXI7XG4gIGVkaXRIYW5kbGVQb2ludFJhZGl1c01heFBpeGVscz86IG51bWJlcjtcbiAgZ2V0RWRpdEhhbmRsZVBvaW50Q29sb3I/OiBSR0JBQ29sb3IgfCAoKGhhbmRsZSkgPT4gUkdCQUNvbG9yKTtcbiAgZ2V0RWRpdEhhbmRsZVBvaW50T3V0bGluZUNvbG9yPzogUkdCQUNvbG9yIHwgKChoYW5kbGUpID0+IFJHQkFDb2xvcik7XG4gIGdldEVkaXRIYW5kbGVQb2ludFJhZGl1cz86IG51bWJlciB8ICgoaGFuZGxlKSA9PiBudW1iZXIpO1xuXG4gIC8vIGljb24gaGFuZGxlc1xuICBlZGl0SGFuZGxlSWNvbkF0bGFzPzogYW55O1xuICBlZGl0SGFuZGxlSWNvbk1hcHBpbmc/OiBhbnk7XG4gIGVkaXRIYW5kbGVJY29uU2l6ZVNjYWxlPzogbnVtYmVyO1xuICBlZGl0SGFuZGxlSWNvblNpemVVbml0cz86IHN0cmluZztcbiAgZ2V0RWRpdEhhbmRsZUljb24/OiAoaGFuZGxlKSA9PiBzdHJpbmc7XG4gIGdldEVkaXRIYW5kbGVJY29uU2l6ZT86IG51bWJlcjtcbiAgZ2V0RWRpdEhhbmRsZUljb25Db2xvcj86IFJHQkFDb2xvciB8ICgoaGFuZGxlKSA9PiBSR0JBQ29sb3IpO1xuICBnZXRFZGl0SGFuZGxlSWNvbkFuZ2xlPzogbnVtYmVyIHwgKChoYW5kbGUpID0+IG51bWJlcik7XG5cbiAgLy8gbWlzY1xuICBiaWxsYm9hcmQ/OiBib29sZWFuO1xufVxuXG5jb25zdCBkZWZhdWx0UHJvcHM6IEVkaXRhYmxlR2VvanNvbkxheWVyUHJvcHM8YW55PiA9IHtcbiAgbW9kZTogREVGQVVMVF9FRElUX01PREUsXG5cbiAgLy8gRWRpdCBhbmQgaW50ZXJhY3Rpb24gZXZlbnRzXG4gIG9uRWRpdDogKCkgPT4ge30sXG5cbiAgcGlja2FibGU6IHRydWUsXG4gIHBpY2tpbmdSYWRpdXM6IDEwLFxuICBwaWNraW5nRGVwdGg6IDUsXG4gIGZwNjQ6IGZhbHNlLFxuICBmaWxsZWQ6IHRydWUsXG4gIHN0cm9rZWQ6IHRydWUsXG4gIGxpbmVXaWR0aFNjYWxlOiBQUk9KRUNURURfUElYRUxfU0laRV9NVUxUSVBMSUVSLFxuICBsaW5lV2lkdGhNaW5QaXhlbHM6IDEsXG4gIGxpbmVXaWR0aE1heFBpeGVsczogTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIsXG4gIHBpY2tpbmdMaW5lV2lkdGhFeHRyYVBpeGVsczogMCxcbiAgbGluZVdpZHRoVW5pdHM6ICdwaXhlbHMnLFxuICBsaW5lSm9pbnRSb3VuZGVkOiBmYWxzZSxcbiAgbGluZUNhcFJvdW5kZWQ6IGZhbHNlLFxuICBsaW5lTWl0ZXJMaW1pdDogNCxcbiAgcG9pbnRSYWRpdXNTY2FsZTogMSxcbiAgcG9pbnRSYWRpdXNNaW5QaXhlbHM6IDIsXG4gIHBvaW50UmFkaXVzTWF4UGl4ZWxzOiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUixcbiAgZ2V0TGluZUNvbG9yOiAoZmVhdHVyZSwgaXNTZWxlY3RlZCwgbW9kZSkgPT5cbiAgICBpc1NlbGVjdGVkID8gREVGQVVMVF9TRUxFQ1RFRF9MSU5FX0NPTE9SIDogREVGQVVMVF9MSU5FX0NPTE9SLFxuICBnZXRGaWxsQ29sb3I6IChmZWF0dXJlLCBpc1NlbGVjdGVkLCBtb2RlKSA9PlxuICAgIGlzU2VsZWN0ZWQgPyBERUZBVUxUX1NFTEVDVEVEX0ZJTExfQ09MT1IgOiBERUZBVUxUX0ZJTExfQ09MT1IsXG4gIGdldFJhZGl1czogKGYpID0+XG4gICAgKGYgJiYgZi5wcm9wZXJ0aWVzICYmIGYucHJvcGVydGllcy5yYWRpdXMpIHx8IChmICYmIGYucHJvcGVydGllcyAmJiBmLnByb3BlcnRpZXMuc2l6ZSkgfHwgMSxcbiAgZ2V0TGluZVdpZHRoOiAoZikgPT4gKGYgJiYgZi5wcm9wZXJ0aWVzICYmIGYucHJvcGVydGllcy5saW5lV2lkdGgpIHx8IDMsXG5cbiAgLy8gVGVudGF0aXZlIGZlYXR1cmUgcmVuZGVyaW5nXG4gIGdldFRlbnRhdGl2ZUxpbmVDb2xvcjogKGYpID0+IERFRkFVTFRfVEVOVEFUSVZFX0xJTkVfQ09MT1IsXG4gIGdldFRlbnRhdGl2ZUZpbGxDb2xvcjogKGYpID0+IERFRkFVTFRfVEVOVEFUSVZFX0ZJTExfQ09MT1IsXG4gIGdldFRlbnRhdGl2ZUxpbmVXaWR0aDogKGYpID0+IChmICYmIGYucHJvcGVydGllcyAmJiBmLnByb3BlcnRpZXMubGluZVdpZHRoKSB8fCAzLFxuXG4gIGVkaXRIYW5kbGVUeXBlOiAncG9pbnQnLFxuXG4gIC8vIHBvaW50IGhhbmRsZXNcbiAgZWRpdEhhbmRsZVBvaW50UmFkaXVzU2NhbGU6IDEsXG4gIGVkaXRIYW5kbGVQb2ludE91dGxpbmU6IHRydWUsXG4gIGVkaXRIYW5kbGVQb2ludFN0cm9rZVdpZHRoOiAyLFxuICBlZGl0SGFuZGxlUG9pbnRSYWRpdXNVbml0czogJ3BpeGVscycsXG4gIGVkaXRIYW5kbGVQb2ludFJhZGl1c01pblBpeGVsczogNCxcbiAgZWRpdEhhbmRsZVBvaW50UmFkaXVzTWF4UGl4ZWxzOiA4LFxuICBnZXRFZGl0SGFuZGxlUG9pbnRDb2xvcjogZ2V0RWRpdEhhbmRsZUNvbG9yLFxuICBnZXRFZGl0SGFuZGxlUG9pbnRPdXRsaW5lQ29sb3I6IGdldEVkaXRIYW5kbGVPdXRsaW5lQ29sb3IsXG4gIGdldEVkaXRIYW5kbGVQb2ludFJhZGl1czogZ2V0RWRpdEhhbmRsZVJhZGl1cyxcblxuICAvLyBpY29uIGhhbmRsZXNcbiAgZWRpdEhhbmRsZUljb25BdGxhczogbnVsbCxcbiAgZWRpdEhhbmRsZUljb25NYXBwaW5nOiBudWxsLFxuICBlZGl0SGFuZGxlSWNvblNpemVTY2FsZTogMSxcbiAgZWRpdEhhbmRsZUljb25TaXplVW5pdHM6ICdwaXhlbHMnLFxuICBnZXRFZGl0SGFuZGxlSWNvbjogKGhhbmRsZSkgPT4gaGFuZGxlLnByb3BlcnRpZXMuZWRpdEhhbmRsZVR5cGUsXG4gIGdldEVkaXRIYW5kbGVJY29uU2l6ZTogMTAsXG4gIGdldEVkaXRIYW5kbGVJY29uQ29sb3I6IGdldEVkaXRIYW5kbGVDb2xvcixcbiAgZ2V0RWRpdEhhbmRsZUljb25BbmdsZTogMCxcblxuICAvLyBtaXNjXG4gIGJpbGxib2FyZDogdHJ1ZSxcbn07XG5cbi8vIE1hcHBpbmcgb2YgbW9kZSBuYW1lIHRvIG1vZGUgY2xhc3MgKGZvciBsZWdhY3kgcHVycG9zZXMpXG5jb25zdCBtb2RlTmFtZU1hcHBpbmcgPSB7XG4gIHZpZXc6IFZpZXdNb2RlLFxuXG4gIC8vIEFsdGVyIG1vZGVzXG4gIG1vZGlmeTogTW9kaWZ5TW9kZSxcbiAgdHJhbnNsYXRlOiBuZXcgU25hcHBhYmxlTW9kZShuZXcgVHJhbnNsYXRlTW9kZSgpKSxcblxuICB0cmFuc2Zvcm06IG5ldyBTbmFwcGFibGVNb2RlKG5ldyBUcmFuc2Zvcm1Nb2RlKCkpLFxuICBzY2FsZTogU2NhbGVNb2RlLFxuICByb3RhdGU6IFJvdGF0ZU1vZGUsXG4gIGR1cGxpY2F0ZTogRHVwbGljYXRlTW9kZSxcbiAgc3BsaXQ6IFNwbGl0UG9seWdvbk1vZGUsXG4gIGV4dHJ1ZGU6IEV4dHJ1ZGVNb2RlLFxuICBlbGV2YXRpb246IEVsZXZhdGlvbk1vZGUsXG5cbiAgLy8gRHJhdyBtb2Rlc1xuICBkcmF3UG9pbnQ6IERyYXdQb2ludE1vZGUsXG4gIGRyYXdMaW5lU3RyaW5nOiBEcmF3TGluZVN0cmluZ01vZGUsXG4gIGRyYXdQb2x5Z29uOiBEcmF3UG9seWdvbk1vZGUsXG4gIGRyYXdSZWN0YW5nbGU6IERyYXdSZWN0YW5nbGVNb2RlLFxuICBkcmF3U3F1YXJlOiBEcmF3U3F1YXJlTW9kZSxcbiAgZHJhd1JlY3RhbmdsZUZyb21DZW50ZXI6IERyYXdSZWN0YW5nbGVGcm9tQ2VudGVyTW9kZSxcbiAgZHJhd1NxdWFyZUZyb21DZW50ZXI6IERyYXdTcXVhcmVGcm9tQ2VudGVyTW9kZSxcbiAgZHJhd0NpcmNsZUZyb21DZW50ZXI6IERyYXdDaXJjbGVGcm9tQ2VudGVyTW9kZSxcbiAgZHJhd0NpcmNsZUJ5Qm91bmRpbmdCb3g6IERyYXdDaXJjbGVCeURpYW1ldGVyTW9kZSxcbiAgZHJhd0VsbGlwc2VCeUJvdW5kaW5nQm94OiBEcmF3RWxsaXBzZUJ5Qm91bmRpbmdCb3hNb2RlLFxuICBkcmF3UmVjdGFuZ2xlVXNpbmczUG9pbnRzOiBEcmF3UmVjdGFuZ2xlVXNpbmdUaHJlZVBvaW50c01vZGUsXG4gIGRyYXdFbGxpcHNlVXNpbmczUG9pbnRzOiBEcmF3RWxsaXBzZVVzaW5nVGhyZWVQb2ludHNNb2RlLFxuICBkcmF3OTBEZWdyZWVQb2x5Z29uOiBEcmF3OTBEZWdyZWVQb2x5Z29uTW9kZSxcbiAgZHJhd1BvbHlnb25CeURyYWdnaW5nOiBEcmF3UG9seWdvbkJ5RHJhZ2dpbmdNb2RlLFxufTtcblxuLy8gdHlwZSBTdGF0ZSA9IHtcbi8vICAgbW9kZTogR2VvSnNvbkVkaXRNb2RlLFxuLy8gICB0ZW50YXRpdmVGZWF0dXJlOiA/RmVhdHVyZSxcbi8vICAgZWRpdEhhbmRsZXM6IGFueVtdLFxuLy8gICBzZWxlY3RlZEZlYXR1cmVzOiBGZWF0dXJlW11cbi8vIH07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVkaXRhYmxlR2VvSnNvbkxheWVyIGV4dGVuZHMgRWRpdGFibGVMYXllcjxcbiAgYW55LFxuICBFZGl0YWJsZUdlb2pzb25MYXllclByb3BzPGFueT5cbj4ge1xuICBzdGF0aWMgbGF5ZXJOYW1lID0gJ0VkaXRhYmxlR2VvSnNvbkxheWVyJztcbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxuICAvLyBzZXRTdGF0ZTogKCRTaGFwZTxTdGF0ZT4pID0+IHZvaWQ7XG4gIHJlbmRlckxheWVycygpIHtcbiAgICBjb25zdCBzdWJMYXllclByb3BzID0gdGhpcy5nZXRTdWJMYXllclByb3BzKHtcbiAgICAgIGlkOiAnZ2VvanNvbicsXG5cbiAgICAgIC8vIFByb3h5IG1vc3QgR2VvSnNvbkxheWVyIHByb3BzIGFzLWlzXG4gICAgICBkYXRhOiB0aGlzLnByb3BzLmRhdGEsXG4gICAgICBmcDY0OiB0aGlzLnByb3BzLmZwNjQsXG4gICAgICBmaWxsZWQ6IHRoaXMucHJvcHMuZmlsbGVkLFxuICAgICAgc3Ryb2tlZDogdGhpcy5wcm9wcy5zdHJva2VkLFxuICAgICAgbGluZVdpZHRoU2NhbGU6IHRoaXMucHJvcHMubGluZVdpZHRoU2NhbGUsXG4gICAgICBsaW5lV2lkdGhNaW5QaXhlbHM6IHRoaXMucHJvcHMubGluZVdpZHRoTWluUGl4ZWxzLFxuICAgICAgbGluZVdpZHRoTWF4UGl4ZWxzOiB0aGlzLnByb3BzLmxpbmVXaWR0aE1heFBpeGVscyxcbiAgICAgIGxpbmVXaWR0aFVuaXRzOiB0aGlzLnByb3BzLmxpbmVXaWR0aFVuaXRzLFxuICAgICAgbGluZUpvaW50Um91bmRlZDogdGhpcy5wcm9wcy5saW5lSm9pbnRSb3VuZGVkLFxuICAgICAgbGluZUNhcFJvdW5kZWQ6IHRoaXMucHJvcHMubGluZUNhcFJvdW5kZWQsXG4gICAgICBsaW5lTWl0ZXJMaW1pdDogdGhpcy5wcm9wcy5saW5lTWl0ZXJMaW1pdCxcbiAgICAgIHBvaW50UmFkaXVzU2NhbGU6IHRoaXMucHJvcHMucG9pbnRSYWRpdXNTY2FsZSxcbiAgICAgIHBvaW50UmFkaXVzTWluUGl4ZWxzOiB0aGlzLnByb3BzLnBvaW50UmFkaXVzTWluUGl4ZWxzLFxuICAgICAgcG9pbnRSYWRpdXNNYXhQaXhlbHM6IHRoaXMucHJvcHMucG9pbnRSYWRpdXNNYXhQaXhlbHMsXG4gICAgICBnZXRMaW5lQ29sb3I6IHRoaXMuc2VsZWN0aW9uQXdhcmVBY2Nlc3Nvcih0aGlzLnByb3BzLmdldExpbmVDb2xvciksXG4gICAgICBnZXRGaWxsQ29sb3I6IHRoaXMuc2VsZWN0aW9uQXdhcmVBY2Nlc3Nvcih0aGlzLnByb3BzLmdldEZpbGxDb2xvciksXG4gICAgICBnZXRQb2ludFJhZGl1czogdGhpcy5zZWxlY3Rpb25Bd2FyZUFjY2Vzc29yKHRoaXMucHJvcHMuZ2V0UmFkaXVzKSxcbiAgICAgIGdldExpbmVXaWR0aDogdGhpcy5zZWxlY3Rpb25Bd2FyZUFjY2Vzc29yKHRoaXMucHJvcHMuZ2V0TGluZVdpZHRoKSxcblxuICAgICAgX3N1YkxheWVyUHJvcHM6IHtcbiAgICAgICAgbGluZXN0cmluZ3M6IHtcbiAgICAgICAgICBiaWxsYm9hcmQ6IHRoaXMucHJvcHMuYmlsbGJvYXJkLFxuICAgICAgICAgIHVwZGF0ZVRyaWdnZXJzOiB7XG4gICAgICAgICAgICAvLyByZXF1aXJlZCB0byB1cGRhdGUgZGFzaGVkIGFycmF5IGF0dHJpYnV0ZVxuICAgICAgICAgICAgYWxsOiBbdGhpcy5wcm9wcy5zZWxlY3RlZEZlYXR1cmVJbmRleGVzLCB0aGlzLnByb3BzLm1vZGVdLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgICdwb2x5Z29ucy1zdHJva2UnOiB7XG4gICAgICAgICAgYmlsbGJvYXJkOiB0aGlzLnByb3BzLmJpbGxib2FyZCxcbiAgICAgICAgICBwaWNraW5nTGluZVdpZHRoRXh0cmFQaXhlbHM6IHRoaXMucHJvcHMucGlja2luZ0xpbmVXaWR0aEV4dHJhUGl4ZWxzLFxuICAgICAgICAgIHR5cGU6IEVkaXRhYmxlUGF0aExheWVyLFxuICAgICAgICAgIHVwZGF0ZVRyaWdnZXJzOiB7XG4gICAgICAgICAgICAvLyByZXF1aXJlZCB0byB1cGRhdGUgZGFzaGVkIGFycmF5IGF0dHJpYnV0ZVxuICAgICAgICAgICAgYWxsOiBbdGhpcy5wcm9wcy5zZWxlY3RlZEZlYXR1cmVJbmRleGVzLCB0aGlzLnByb3BzLm1vZGVdLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuXG4gICAgICB1cGRhdGVUcmlnZ2Vyczoge1xuICAgICAgICBnZXRMaW5lQ29sb3I6IFt0aGlzLnByb3BzLnNlbGVjdGVkRmVhdHVyZUluZGV4ZXMsIHRoaXMucHJvcHMubW9kZV0sXG4gICAgICAgIGdldEZpbGxDb2xvcjogW3RoaXMucHJvcHMuc2VsZWN0ZWRGZWF0dXJlSW5kZXhlcywgdGhpcy5wcm9wcy5tb2RlXSxcbiAgICAgICAgZ2V0UG9pbnRSYWRpdXM6IFt0aGlzLnByb3BzLnNlbGVjdGVkRmVhdHVyZUluZGV4ZXMsIHRoaXMucHJvcHMubW9kZV0sXG4gICAgICAgIGdldExpbmVXaWR0aDogW3RoaXMucHJvcHMuc2VsZWN0ZWRGZWF0dXJlSW5kZXhlcywgdGhpcy5wcm9wcy5tb2RlXSxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBsZXQgbGF5ZXJzOiBhbnkgPSBbbmV3IEdlb0pzb25MYXllcihzdWJMYXllclByb3BzKV07XG5cbiAgICBsYXllcnMgPSBsYXllcnMuY29uY2F0KHRoaXMuY3JlYXRlR3VpZGVzTGF5ZXJzKCksIHRoaXMuY3JlYXRlVG9vbHRpcHNMYXllcnMoKSk7XG5cbiAgICByZXR1cm4gbGF5ZXJzO1xuICB9XG5cbiAgaW5pdGlhbGl6ZVN0YXRlKCkge1xuICAgIHN1cGVyLmluaXRpYWxpemVTdGF0ZSgpO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBzZWxlY3RlZEZlYXR1cmVzOiBbXSxcbiAgICAgIGVkaXRIYW5kbGVzOiBbXSxcbiAgICB9KTtcbiAgfVxuXG4gIC8vIFRPRE86IGlzIHRoaXMgdGhlIGJlc3Qgd2F5IHRvIHByb3Blcmx5IHVwZGF0ZSBzdGF0ZSBmcm9tIGFuIG91dHNpZGUgZXZlbnQgaGFuZGxlcj9cbiAgc2hvdWxkVXBkYXRlU3RhdGUob3B0czogYW55KSB7XG4gICAgLy8gY29uc29sZS5sb2coXG4gICAgLy8gICAnc2hvdWxkVXBkYXRlU3RhdGUnLFxuICAgIC8vICAgb3B0cy5jaGFuZ2VGbGFncy5wcm9wc09yRGF0YUNoYW5nZWQsXG4gICAgLy8gICBvcHRzLmNoYW5nZUZsYWdzLnN0YXRlQ2hhbmdlZFxuICAgIC8vICk7XG4gICAgcmV0dXJuIHN1cGVyLnNob3VsZFVwZGF0ZVN0YXRlKG9wdHMpIHx8IG9wdHMuY2hhbmdlRmxhZ3Muc3RhdGVDaGFuZ2VkO1xuICB9XG5cbiAgdXBkYXRlU3RhdGUoe1xuICAgIHByb3BzLFxuICAgIG9sZFByb3BzLFxuICAgIGNoYW5nZUZsYWdzLFxuICAgIGNvbnRleHQsXG4gIH06IHtcbiAgICBwcm9wczogRWRpdGFibGVHZW9qc29uTGF5ZXJQcm9wczxhbnk+O1xuICAgIG9sZFByb3BzOiBFZGl0YWJsZUdlb2pzb25MYXllclByb3BzPGFueT47XG4gICAgY2hhbmdlRmxhZ3M6IGFueTtcbiAgICBjb250ZXh0OiBhbnk7XG4gICAgcztcbiAgfSkge1xuICAgIHN1cGVyLnVwZGF0ZVN0YXRlKHsgb2xkUHJvcHMsIHByb3BzLCBjaGFuZ2VGbGFncywgY29udGV4dCB9KTtcblxuICAgIGlmIChjaGFuZ2VGbGFncy5wcm9wc09yRGF0YUNoYW5nZWQpIHtcbiAgICAgIGNvbnN0IG1vZGVQcm9wQ2hhbmdlZCA9IE9iamVjdC5rZXlzKG9sZFByb3BzKS5sZW5ndGggPT09IDAgfHwgcHJvcHMubW9kZSAhPT0gb2xkUHJvcHMubW9kZTtcbiAgICAgIGlmIChtb2RlUHJvcENoYW5nZWQpIHtcbiAgICAgICAgbGV0IG1vZGU7XG4gICAgICAgIGlmICh0eXBlb2YgcHJvcHMubW9kZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIC8vIFRoZXkgcGFzc2VkIGEgY29uc3RydWN0b3IvY2xhc3MsIHNvIG5ldyBpdCB1cFxuICAgICAgICAgIGNvbnN0IE1vZGVDb25zdHJ1Y3RvciA9IHByb3BzLm1vZGU7XG4gICAgICAgICAgbW9kZSA9IG5ldyBNb2RlQ29uc3RydWN0b3IoKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgcHJvcHMubW9kZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAvLyBMb29rdXAgdGhlIG1vZGUgYmFzZWQgb24gaXRzIG5hbWUgKGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSlcbiAgICAgICAgICBtb2RlID0gbW9kZU5hbWVNYXBwaW5nW3Byb3BzLm1vZGVdO1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgXCJEZXByZWNhdGVkIHVzZSBvZiBwYXNzaW5nIGBtb2RlYCBhcyBhIHN0cmluZy4gUGFzcyB0aGUgbW9kZSdzIGNsYXNzIGNvbnN0cnVjdG9yIGluc3RlYWQuXCJcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFNob3VsZCBiZSBhbiBpbnN0YW5jZSBvZiBFZGl0TW9kZSBpbiB0aGlzIGNhc2VcbiAgICAgICAgICBtb2RlID0gcHJvcHMubW9kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghbW9kZSkge1xuICAgICAgICAgIGNvbnNvbGUud2FybihgTm8gbW9kZSBjb25maWd1cmVkIGZvciAke1N0cmluZyhwcm9wcy5tb2RlKX1gKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlLG5vLXVuZGVmXG4gICAgICAgICAgLy8gVXNlIGRlZmF1bHQgbW9kZVxuICAgICAgICAgIG1vZGUgPSBuZXcgREVGQVVMVF9FRElUX01PREUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtb2RlICE9PSB0aGlzLnN0YXRlLm1vZGUpIHtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgbW9kZSwgY3Vyc29yOiBudWxsIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IHNlbGVjdGVkRmVhdHVyZXMgPSBbXTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShwcm9wcy5zZWxlY3RlZEZlYXR1cmVJbmRleGVzKSkge1xuICAgICAgLy8gVE9ETzogbmVlZHMgaW1wcm92ZWQgdGVzdGluZywgaS5lLiBjaGVja2luZyBmb3IgZHVwbGljYXRlcywgTmFOcywgb3V0IG9mIHJhbmdlIG51bWJlcnMsIC4uLlxuICAgICAgc2VsZWN0ZWRGZWF0dXJlcyA9IHByb3BzLnNlbGVjdGVkRmVhdHVyZUluZGV4ZXMubWFwKChlbGVtKSA9PiBwcm9wcy5kYXRhLmZlYXR1cmVzW2VsZW1dKTtcbiAgICB9XG5cbiAgICB0aGlzLnNldFN0YXRlKHsgc2VsZWN0ZWRGZWF0dXJlcyB9KTtcbiAgfVxuXG4gIGdldE1vZGVQcm9wcyhwcm9wczogRWRpdGFibGVHZW9qc29uTGF5ZXJQcm9wczxhbnk+KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1vZGVDb25maWc6IHByb3BzLm1vZGVDb25maWcsXG4gICAgICBkYXRhOiBwcm9wcy5kYXRhLFxuICAgICAgc2VsZWN0ZWRJbmRleGVzOiBwcm9wcy5zZWxlY3RlZEZlYXR1cmVJbmRleGVzLFxuICAgICAgbGFzdFBvaW50ZXJNb3ZlRXZlbnQ6IHRoaXMuc3RhdGUubGFzdFBvaW50ZXJNb3ZlRXZlbnQsXG4gICAgICBjdXJzb3I6IHRoaXMuc3RhdGUuY3Vyc29yLFxuICAgICAgb25FZGl0OiAoZWRpdEFjdGlvbjogRWRpdEFjdGlvbjxGZWF0dXJlQ29sbGVjdGlvbj4pID0+IHtcbiAgICAgICAgLy8gRm9yY2UgYSByZS1yZW5kZXJcbiAgICAgICAgLy8gVGhpcyBzdXBwb3J0cyBkb3VibGUtY2xpY2sgd2hlcmUgd2UgbmVlZCB0byBlbnN1cmUgdGhhdCB0aGVyZSdzIGEgcmUtcmVuZGVyIGJldHdlZW4gdGhlIHR3byBjbGlja3NcbiAgICAgICAgLy8gZXZlbiB0aG91Z2ggdGhlIGRhdGEgd2Fzbid0IGNoYW5nZWQsIGp1c3QgdGhlIGludGVybmFsIHRlbnRhdGl2ZSBmZWF0dXJlLlxuICAgICAgICB0aGlzLnNldE5lZWRzVXBkYXRlKCk7XG4gICAgICAgIHByb3BzLm9uRWRpdChlZGl0QWN0aW9uKTtcbiAgICAgIH0sXG4gICAgICBvblVwZGF0ZUN1cnNvcjogKGN1cnNvcjogc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZCkgPT4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgY3Vyc29yIH0pO1xuICAgICAgfSxcbiAgICB9O1xuICB9XG5cbiAgc2VsZWN0aW9uQXdhcmVBY2Nlc3NvcihhY2Nlc3NvcjogYW55KSB7XG4gICAgaWYgKHR5cGVvZiBhY2Nlc3NvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIGFjY2Vzc29yO1xuICAgIH1cbiAgICByZXR1cm4gKGZlYXR1cmU6IFJlY29yZDxzdHJpbmcsIGFueT4pID0+XG4gICAgICBhY2Nlc3NvcihmZWF0dXJlLCB0aGlzLmlzRmVhdHVyZVNlbGVjdGVkKGZlYXR1cmUpLCB0aGlzLnByb3BzLm1vZGUpO1xuICB9XG5cbiAgaXNGZWF0dXJlU2VsZWN0ZWQoZmVhdHVyZTogUmVjb3JkPHN0cmluZywgYW55Pikge1xuICAgIGlmICghdGhpcy5wcm9wcy5kYXRhIHx8ICF0aGlzLnByb3BzLnNlbGVjdGVkRmVhdHVyZUluZGV4ZXMpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLnByb3BzLnNlbGVjdGVkRmVhdHVyZUluZGV4ZXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IGZlYXR1cmVJbmRleCA9IHRoaXMucHJvcHMuZGF0YS5mZWF0dXJlcy5pbmRleE9mKGZlYXR1cmUpO1xuICAgIHJldHVybiB0aGlzLnByb3BzLnNlbGVjdGVkRmVhdHVyZUluZGV4ZXMuaW5jbHVkZXMoZmVhdHVyZUluZGV4KTtcbiAgfVxuXG4gIGdldFBpY2tpbmdJbmZvKHsgaW5mbywgc291cmNlTGF5ZXIgfTogUmVjb3JkPHN0cmluZywgYW55Pikge1xuICAgIGlmIChzb3VyY2VMYXllci5pZC5lbmRzV2l0aCgnZ3VpZGVzJykpIHtcbiAgICAgIC8vIElmIHVzZXIgaXMgcGlja2luZyBhbiBlZGl0aW5nIGhhbmRsZSwgYWRkIGFkZGl0aW9uYWwgZGF0YSB0byB0aGUgaW5mb1xuICAgICAgaW5mby5pc0d1aWRlID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW5mbztcbiAgfVxuXG4gIF91cGRhdGVBdXRvSGlnaGxpZ2h0KGluZm8pIHtcbiAgICAvLyBFeHRyYSBoYW5kbGluZyBmb3IgZ3VpZGVzXG4gICAgaWYgKGluZm8/LnNvdXJjZUxheWVyKSB7XG4gICAgICBpZiAoaW5mby5pc0d1aWRlKSB7XG4gICAgICAgIGZvciAoY29uc3QgbGF5ZXIgb2YgaW5mby5zb3VyY2VMYXllci5nZXRTdWJMYXllcnMoKSkge1xuICAgICAgICAgIGxheWVyLnVwZGF0ZUF1dG9IaWdobGlnaHQoaW5mbyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluZm8uc291cmNlTGF5ZXIudXBkYXRlQXV0b0hpZ2hsaWdodChpbmZvKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjcmVhdGVHdWlkZXNMYXllcnMoKSB7XG4gICAgY29uc3QgbW9kZSA9IHRoaXMuZ2V0QWN0aXZlTW9kZSgpO1xuICAgIGNvbnN0IGd1aWRlczogRmVhdHVyZUNvbGxlY3Rpb24gPSBtb2RlLmdldEd1aWRlcyh0aGlzLmdldE1vZGVQcm9wcyh0aGlzLnByb3BzKSk7XG5cbiAgICBpZiAoIWd1aWRlcyB8fCAhZ3VpZGVzLmZlYXR1cmVzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIGNvbnN0IHN1YkxheWVyUHJvcHMgPSB7XG4gICAgICBsaW5lc3RyaW5nczoge1xuICAgICAgICBiaWxsYm9hcmQ6IHRoaXMucHJvcHMuYmlsbGJvYXJkLFxuICAgICAgICBhdXRvSGlnaGxpZ2h0OiBmYWxzZSxcbiAgICAgIH0sXG4gICAgICAncG9seWdvbnMtZmlsbCc6IHtcbiAgICAgICAgYXV0b0hpZ2hsaWdodDogZmFsc2UsXG4gICAgICB9LFxuICAgICAgJ3BvbHlnb25zLXN0cm9rZSc6IHtcbiAgICAgICAgYmlsbGJvYXJkOiB0aGlzLnByb3BzLmJpbGxib2FyZCxcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIGlmICh0aGlzLnByb3BzLmVkaXRIYW5kbGVUeXBlID09PSAnaWNvbicpIHtcbiAgICAgIHN1YkxheWVyUHJvcHNbJ3BvaW50cy1pY29uJ10gPSB7XG4gICAgICAgIHR5cGU6IEljb25MYXllcixcbiAgICAgICAgaWNvbkF0bGFzOiB0aGlzLnByb3BzLmVkaXRIYW5kbGVJY29uQXRsYXMsXG4gICAgICAgIGljb25NYXBwaW5nOiB0aGlzLnByb3BzLmVkaXRIYW5kbGVJY29uTWFwcGluZyxcbiAgICAgICAgc2l6ZVVuaXRzOiB0aGlzLnByb3BzLmVkaXRIYW5kbGVJY29uU2l6ZVVuaXRzLFxuICAgICAgICBzaXplU2NhbGU6IHRoaXMucHJvcHMuZWRpdEhhbmRsZUljb25TaXplU2NhbGUsXG4gICAgICAgIGdldEljb246IGd1aWRlQWNjZXNzb3IodGhpcy5wcm9wcy5nZXRFZGl0SGFuZGxlSWNvbiksXG4gICAgICAgIGdldFNpemU6IGd1aWRlQWNjZXNzb3IodGhpcy5wcm9wcy5nZXRFZGl0SGFuZGxlSWNvblNpemUpLFxuICAgICAgICBnZXRDb2xvcjogZ3VpZGVBY2Nlc3Nvcih0aGlzLnByb3BzLmdldEVkaXRIYW5kbGVJY29uQ29sb3IpLFxuICAgICAgICBnZXRBbmdsZTogZ3VpZGVBY2Nlc3Nvcih0aGlzLnByb3BzLmdldEVkaXRIYW5kbGVJY29uQW5nbGUpLFxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3ViTGF5ZXJQcm9wc1sncG9pbnRzLWNpcmNsZSddID0ge1xuICAgICAgICB0eXBlOiBTY2F0dGVycGxvdExheWVyLFxuICAgICAgICByYWRpdXNTY2FsZTogdGhpcy5wcm9wcy5lZGl0SGFuZGxlUG9pbnRSYWRpdXNTY2FsZSxcbiAgICAgICAgc3Ryb2tlZDogdGhpcy5wcm9wcy5lZGl0SGFuZGxlUG9pbnRPdXRsaW5lLFxuICAgICAgICBnZXRMaW5lV2lkdGg6IHRoaXMucHJvcHMuZWRpdEhhbmRsZVBvaW50U3Ryb2tlV2lkdGgsXG4gICAgICAgIHJhZGl1c1VuaXRzOiB0aGlzLnByb3BzLmVkaXRIYW5kbGVQb2ludFJhZGl1c1VuaXRzLFxuICAgICAgICByYWRpdXNNaW5QaXhlbHM6IHRoaXMucHJvcHMuZWRpdEhhbmRsZVBvaW50UmFkaXVzTWluUGl4ZWxzLFxuICAgICAgICByYWRpdXNNYXhQaXhlbHM6IHRoaXMucHJvcHMuZWRpdEhhbmRsZVBvaW50UmFkaXVzTWF4UGl4ZWxzLFxuICAgICAgICBnZXRSYWRpdXM6IGd1aWRlQWNjZXNzb3IodGhpcy5wcm9wcy5nZXRFZGl0SGFuZGxlUG9pbnRSYWRpdXMpLFxuICAgICAgICBnZXRGaWxsQ29sb3I6IGd1aWRlQWNjZXNzb3IodGhpcy5wcm9wcy5nZXRFZGl0SGFuZGxlUG9pbnRDb2xvciksXG4gICAgICAgIGdldExpbmVDb2xvcjogZ3VpZGVBY2Nlc3Nvcih0aGlzLnByb3BzLmdldEVkaXRIYW5kbGVQb2ludE91dGxpbmVDb2xvciksXG4gICAgICB9O1xuICAgIH1cblxuICAgIGNvbnN0IGxheWVyID0gbmV3IEdlb0pzb25MYXllcihcbiAgICAgIHRoaXMuZ2V0U3ViTGF5ZXJQcm9wcyh7XG4gICAgICAgIGlkOiBgZ3VpZGVzYCxcbiAgICAgICAgZGF0YTogZ3VpZGVzLFxuICAgICAgICBmcDY0OiB0aGlzLnByb3BzLmZwNjQsXG4gICAgICAgIF9zdWJMYXllclByb3BzOiBzdWJMYXllclByb3BzLFxuICAgICAgICBsaW5lV2lkdGhTY2FsZTogdGhpcy5wcm9wcy5saW5lV2lkdGhTY2FsZSxcbiAgICAgICAgbGluZVdpZHRoTWluUGl4ZWxzOiB0aGlzLnByb3BzLmxpbmVXaWR0aE1pblBpeGVscyxcbiAgICAgICAgbGluZVdpZHRoTWF4UGl4ZWxzOiB0aGlzLnByb3BzLmxpbmVXaWR0aE1heFBpeGVscyxcbiAgICAgICAgbGluZVdpZHRoVW5pdHM6IHRoaXMucHJvcHMubGluZVdpZHRoVW5pdHMsXG4gICAgICAgIGxpbmVKb2ludFJvdW5kZWQ6IHRoaXMucHJvcHMubGluZUpvaW50Um91bmRlZCxcbiAgICAgICAgbGluZUNhcFJvdW5kZWQ6IHRoaXMucHJvcHMubGluZUNhcFJvdW5kZWQsXG4gICAgICAgIGxpbmVNaXRlckxpbWl0OiB0aGlzLnByb3BzLmxpbmVNaXRlckxpbWl0LFxuICAgICAgICBnZXRMaW5lQ29sb3I6IGd1aWRlQWNjZXNzb3IodGhpcy5wcm9wcy5nZXRUZW50YXRpdmVMaW5lQ29sb3IpLFxuICAgICAgICBnZXRMaW5lV2lkdGg6IGd1aWRlQWNjZXNzb3IodGhpcy5wcm9wcy5nZXRUZW50YXRpdmVMaW5lV2lkdGgpLFxuICAgICAgICBnZXRGaWxsQ29sb3I6IGd1aWRlQWNjZXNzb3IodGhpcy5wcm9wcy5nZXRUZW50YXRpdmVGaWxsQ29sb3IpLFxuICAgICAgICBwb2ludFR5cGU6IHRoaXMucHJvcHMuZWRpdEhhbmRsZVR5cGUgPT09ICdpY29uJyA/ICdpY29uJyA6ICdjaXJjbGUnLFxuICAgICAgICBpY29uQXRsYXM6IHRoaXMucHJvcHMuZWRpdEhhbmRsZUljb25BdGxhcyxcbiAgICAgIH0pXG4gICAgKTtcblxuICAgIHJldHVybiBbbGF5ZXJdO1xuICB9XG5cbiAgY3JlYXRlVG9vbHRpcHNMYXllcnMoKSB7XG4gICAgY29uc3QgbW9kZSA9IHRoaXMuZ2V0QWN0aXZlTW9kZSgpO1xuICAgIGNvbnN0IHRvb2x0aXBzID0gbW9kZS5nZXRUb29sdGlwcyh0aGlzLmdldE1vZGVQcm9wcyh0aGlzLnByb3BzKSk7XG5cbiAgICBjb25zdCBsYXllciA9IG5ldyBUZXh0TGF5ZXIoe1xuICAgICAgZ2V0U2l6ZTogREVGQVVMVF9UT09MVElQX0ZPTlRfU0laRSxcbiAgICAgIC4uLnRoaXMuZ2V0U3ViTGF5ZXJQcm9wcyh7XG4gICAgICAgIGlkOiBgdG9vbHRpcHNgLFxuICAgICAgICBkYXRhOiB0b29sdGlwcyxcbiAgICAgIH0pLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIFtsYXllcl07XG4gIH1cblxuICBvbkxheWVyQ2xpY2soZXZlbnQ6IENsaWNrRXZlbnQpIHtcbiAgICB0aGlzLmdldEFjdGl2ZU1vZGUoKS5oYW5kbGVDbGljayhldmVudCwgdGhpcy5nZXRNb2RlUHJvcHModGhpcy5wcm9wcykpO1xuICB9XG5cbiAgb25MYXllcktleVVwKGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XG4gICAgdGhpcy5nZXRBY3RpdmVNb2RlKCkuaGFuZGxlS2V5VXAoZXZlbnQsIHRoaXMuZ2V0TW9kZVByb3BzKHRoaXMucHJvcHMpKTtcbiAgfVxuXG4gIG9uU3RhcnREcmFnZ2luZyhldmVudDogU3RhcnREcmFnZ2luZ0V2ZW50KSB7XG4gICAgdGhpcy5nZXRBY3RpdmVNb2RlKCkuaGFuZGxlU3RhcnREcmFnZ2luZyhldmVudCwgdGhpcy5nZXRNb2RlUHJvcHModGhpcy5wcm9wcykpO1xuICB9XG5cbiAgb25EcmFnZ2luZyhldmVudDogRHJhZ2dpbmdFdmVudCkge1xuICAgIHRoaXMuZ2V0QWN0aXZlTW9kZSgpLmhhbmRsZURyYWdnaW5nKGV2ZW50LCB0aGlzLmdldE1vZGVQcm9wcyh0aGlzLnByb3BzKSk7XG4gIH1cblxuICBvblN0b3BEcmFnZ2luZyhldmVudDogU3RvcERyYWdnaW5nRXZlbnQpIHtcbiAgICB0aGlzLmdldEFjdGl2ZU1vZGUoKS5oYW5kbGVTdG9wRHJhZ2dpbmcoZXZlbnQsIHRoaXMuZ2V0TW9kZVByb3BzKHRoaXMucHJvcHMpKTtcbiAgfVxuXG4gIG9uUG9pbnRlck1vdmUoZXZlbnQ6IFBvaW50ZXJNb3ZlRXZlbnQpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgbGFzdFBvaW50ZXJNb3ZlRXZlbnQ6IGV2ZW50IH0pO1xuICAgIHRoaXMuZ2V0QWN0aXZlTW9kZSgpLmhhbmRsZVBvaW50ZXJNb3ZlKGV2ZW50LCB0aGlzLmdldE1vZGVQcm9wcyh0aGlzLnByb3BzKSk7XG4gIH1cblxuICBnZXRDdXJzb3IoeyBpc0RyYWdnaW5nIH06IHsgaXNEcmFnZ2luZzogYm9vbGVhbiB9KSB7XG4gICAgaWYgKHRoaXMuc3RhdGUgPT09IG51bGwgfHwgdGhpcy5zdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBMYXllciBpbiAnQXdhaXRpbmcgc3RhdGUnXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBsZXQgeyBjdXJzb3IgfSA9IHRoaXMuc3RhdGU7XG4gICAgaWYgKCFjdXJzb3IpIHtcbiAgICAgIC8vIGRlZmF1bHQgY3Vyc29yXG4gICAgICBjdXJzb3IgPSBpc0RyYWdnaW5nID8gJ2dyYWJiaW5nJyA6ICdncmFiJztcbiAgICB9XG4gICAgcmV0dXJuIGN1cnNvcjtcbiAgfVxuXG4gIGdldEFjdGl2ZU1vZGUoKTogR2VvSnNvbkVkaXRNb2RlVHlwZSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUubW9kZTtcbiAgfVxufVxuIl19