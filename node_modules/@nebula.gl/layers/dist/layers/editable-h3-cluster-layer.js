"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _geoLayers = require("@deck.gl/geo-layers");

var _editModes = require("@nebula.gl/edit-modes");

var _h3Js = require("h3-js");

var _constants = require("../constants");

var _editableGeojsonLayer = _interopRequireDefault(require("./editable-geojson-layer"));

var _editableLayer = _interopRequireDefault(require("./editable-layer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var DEFAULT_EDIT_MODE = _editModes.ViewMode;
var DEFAULT_H3_RESOLUTION = 9;
var EMPTY_FEATURE_COLLECTION = {
  type: 'FeatureCollection',
  features: []
};

var defaultProps = _objectSpread({
  mode: DEFAULT_EDIT_MODE
}, _editableGeojsonLayer["default"].defaultProps, {
  // h3 layer
  data: [],
  selectedIndexes: [],
  filled: false,
  stroked: true,
  lineWidthScale: _constants.PROJECTED_PIXEL_SIZE_MULTIPLIER,
  lineWidthMinPixels: 1,
  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,
  lineWidthUnits: 'pixels',
  getHexagons: function getHexagons(d) {
    return d.hexIds;
  },
  getEditedCluster: function getEditedCluster(updatedHexagons, existingCluster) {
    if (existingCluster) {
      return _objectSpread({}, existingCluster, {
        hexIds: updatedHexagons
      });
    }

    return {
      hexIds: updatedHexagons
    };
  },
  resolution: DEFAULT_H3_RESOLUTION
});

var EditableH3ClusterLayer = /*#__PURE__*/function (_EditableLayer) {
  _inherits(EditableH3ClusterLayer, _EditableLayer);

  var _super = _createSuper(EditableH3ClusterLayer);

  function EditableH3ClusterLayer() {
    _classCallCheck(this, EditableH3ClusterLayer);

    return _super.apply(this, arguments);
  }

  _createClass(EditableH3ClusterLayer, [{
    key: "initializeState",
    value: function initializeState() {
      _get(_getPrototypeOf(EditableH3ClusterLayer.prototype), "initializeState", this).call(this);

      this.setState({
        tentativeHexagonIDs: []
      });
    } // convert array of (lng, lat) coords to cluster of hexes

  }, {
    key: "getDerivedHexagonIDs",
    value: function getDerivedHexagonIDs(coords) {
      return (0, _h3Js.polyfill)(coords, this.props.resolution, true);
    } // convert pair of (lng, lat) coords into single hex

  }, {
    key: "getDerivedHexagonID",
    value: function getDerivedHexagonID(coords) {
      return (0, _h3Js.geoToH3)(coords[1], coords[0], this.props.resolution);
    }
  }, {
    key: "renderLayers",
    value: function renderLayers() {
      var _this = this;

      var layers = [new _editableGeojsonLayer["default"](this.getSubLayerProps({
        id: 'editable-geojson',
        mode: this.props.mode,
        data: EMPTY_FEATURE_COLLECTION,
        selectedFeatureIndexes: [],
        onEdit: function onEdit(editAction) {
          var editType = editAction.editType,
              editContext = editAction.editContext;

          switch (editType) {
            case 'updateTentativeFeature':
              // tentative feature updates, updated on every pointer move
              if (editContext.feature.geometry.type === 'Polygon') {
                var coords = editContext.feature.geometry.coordinates;

                var hexIDs = _this.getDerivedHexagonIDs(coords);

                _this.setState({
                  tentativeHexagonIDs: hexIDs
                });
              } else if (editContext.feature.geometry.type === 'Point') {
                var _coords = editContext.feature.geometry.coordinates;

                var hexID = _this.getDerivedHexagonID(_coords);

                _this.setState({
                  tentativeHexagonIDs: [hexID]
                });
              }

              break;

            case 'addFeature':
              var _updatedData = _toConsumableArray(_this.props.data);

              var modeConfig = _this.props.modeConfig;

              if (!modeConfig || !modeConfig.booleanOperation) {
                // add new h3 cluster
                _updatedData.push(_this.props.getEditedCluster(_this.state.tentativeHexagonIDs, null));
              } else if (_this.props.selectedIndexes.length !== 1) {
                // eslint-disable-next-line no-console,no-undef
                console.warn('booleanOperation only supported for single cluster selection');
              } else {
                // they're affecting a selected cluster
                var finalHexagonIDs;
                var committedHexagonIDs = new Set(_this.getSelectedHexIDs());
                var tentativeHexagonIDs = new Set(_this.state.tentativeHexagonIDs);

                switch (modeConfig.booleanOperation) {
                  case 'union':
                  default:
                    finalHexagonIDs = _toConsumableArray(new Set([].concat(_toConsumableArray(committedHexagonIDs), _toConsumableArray(tentativeHexagonIDs))));
                    break;

                  case 'intersection':
                    finalHexagonIDs = _toConsumableArray(committedHexagonIDs).filter(function (hexID) {
                      return tentativeHexagonIDs.has(hexID);
                    });
                    break;

                  case 'difference':
                    finalHexagonIDs = _toConsumableArray(committedHexagonIDs).filter(function (hexID) {
                      return !tentativeHexagonIDs.has(hexID);
                    });
                    break;
                }

                var selectedIndex = _this.props.selectedIndexes[0];
                var _existingCluster = _this.props.data[selectedIndex];
                _updatedData[selectedIndex] = _this.props.getEditedCluster(finalHexagonIDs, _existingCluster);
              }

              _this.setState({
                tentativeHexagonIDs: []
              });

              _this.props.onEdit({
                updatedData: _updatedData
              });

              break;

            default:
              break;
          }
        }
      })), new _geoLayers.H3ClusterLayer(this.getSubLayerProps({
        id: 'hexagons',
        data: this.props.data,
        getHexagons: this.props.getHexagons
      })), new _geoLayers.H3ClusterLayer(this.getSubLayerProps({
        id: 'tentative-hexagons',
        data: [{
          hexIds: this.state.tentativeHexagonIDs
        }],
        getHexagons: function getHexagons(d) {
          return d.hexIds;
        }
      }))];
      return layers;
    } // because data is an array of hexagon data, we take the cumulative of all selected indexes,
    // using props.getHexagons to support multiple data types

  }, {
    key: "getSelectedHexIDs",
    value: function getSelectedHexIDs() {
      var _this2 = this;

      var cumulativeHexIDs = [];
      this.props.selectedIndexes.forEach(function (index) {
        var selectedCluster = _this2.props.data[index];

        var hexIDs = _this2.props.getHexagons(selectedCluster);

        cumulativeHexIDs = cumulativeHexIDs.concat(hexIDs);
      });
      return cumulativeHexIDs;
    }
  }, {
    key: "getCursor",
    value: function getCursor(_ref) {
      var isDragging = _ref.isDragging;

      var _ref2 = this.state || {},
          cursor = _ref2.cursor;

      if (!cursor) {
        // default cursor
        cursor = isDragging ? 'grabbing' : 'grab';
      }

      return cursor;
    }
  }]);

  return EditableH3ClusterLayer;
}(_editableLayer["default"]);

exports["default"] = EditableH3ClusterLayer;

_defineProperty(EditableH3ClusterLayer, "layerName", 'EditableH3ClusterLayer');

_defineProperty(EditableH3ClusterLayer, "defaultProps", defaultProps);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,